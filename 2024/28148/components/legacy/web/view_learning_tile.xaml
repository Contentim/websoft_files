<SPXMLScreen>
<%
iObjectID = OptInt( PARAMETERS.GetOptProperty( "id" ) );
//alert('iObjectID '+iObjectID)
bIsMobile = curDevice.disp_type == "mobile";
bTileStyle = tools_web.is_true(tools_web.get_web_param( curParams, "global.tile_styles", "1", false ));

if ( iObjectID != undefined )
{
	var sStatusColor = '';
	var teObject = OpenDoc( UrlFromDocID( iObjectID ) ).TopElem;
	var sObjectImageUrl = PARAMETERS.GetOptProperty( "image" );
	switch ( teObject.Name )
	{
		case 'learning':
				var learningObject = OpenDoc( UrlFromDocID( teObject.course_id ) ).TopElem;
				sName = teObject.course_name;
				curModeUrl = 'learning_stat';
			break;
			
		case 'active_learning':
				var learningObject = OpenDoc( UrlFromDocID( teObject.course_id ) ).TopElem;
				sName = teObject.course_name;
				curModeUrl = 'learning_proc';
			break;

		case 'test_learning':
				var learningObject = OpenDoc( UrlFromDocID( teObject.assessment_id ) ).TopElem;
				sName = teObject.assessment_name;
				curModeUrl = 'test_learning_stat';
			break;

		case 'active_test_learning':
				var learningObject = OpenDoc( UrlFromDocID( teObject.assessment_id ) ).TopElem;
				sName = teObject.assessment_name;
				curModeUrl = 'test_learning_proc';
			break;			
			
	}

	if(sObjectImageUrl == undefined)
	{
		if ( learningObject.ChildExists( 'resource_id' ) && learningObject.resource_id.HasValue )
			sObjectImageUrl = tools_web.get_object_source_url( 'resource', learningObject.resource_id );
		else
			sObjectImageUrl = '/images/' + learningObject.Name + '.png';
	}
	sStatus = teObject.state_id.ForeignElem.name.Value;

	sStatusColor = 'color-plan';
	switch ( teObject.state_id )
	{	
		case 0:
			sStatusColor = 'color-plan';
			break;
		case 1:
			sStatusColor = 'color-process';
			break;
		case 2:
			sStatusColor = 'color-viewed';
			break;
		case 3:
			sStatusColor = 'color-failed';
			break;
		case 4:
			sStatusColor = 'color-finish';
			break;			
	}
	
	var sSubtitle = PARAMETERS.GetOptProperty( "subtitle", "" );
	var sStatusColorClass = PARAMETERS.GetOptProperty( "status_class" );
	var sDesc = PARAMETERS.GetOptProperty( "desc" );
	var sCustomClass = PARAMETERS.GetOptProperty( "custom_class" );
	var sClickAction = PARAMETERS.GetOptProperty( "click" );
	var sLinkAction = PARAMETERS.GetOptProperty( "link_action", "" );
	var linkProp = Trim( PARAMETERS.GetOptProperty( 'link_prop', '' ) );
	var linkPropFlag = StrBegins( linkProp, '=' );
	linkProp = linkPropFlag ? linkProp.slice( 1 ) : linkProp;



	if ( sClickAction == undefined )
	{
		if ( sLinkAction == "" )
		{
			sActionName = 'OPENURL';
			if ( teObject.ChildExists( 'attributes' ) && StrContains( teObject.attributes.link_target, 'blank', true ) )
				sActionName = 'OPENWINDOW';

			sClickAction = sActionName + '=' + XmlAttrEncode( PARAMETERS.GetOptProperty( 'url', tools_web.get_mode_clean_url(curModeUrl, iObjectID, ({"doc_id": curDocID}))) );
		}
		else
		{
			sClickAction = sLinkAction;

			if ( linkPropFlag )
			{
				try
				{
					linkProp = SafeEval( linkProp, [ { 'Env': Env } ] );
				}
				catch( e )
				{
					linkProp = '';
				}
			}
			sClickAction += linkProp;
		}
	}

	sClickAction = StrReplace( UrlDecode( sClickAction ), '{id}', iObjectID );

	if ( sDesc == undefined)
		sDesc = "Ps.comment";
	if ( sDesc != undefined )
	{
		if ( StrBegins( sDesc, 'Ps.' ) )
		{
			sDesc = teObject.Child( StrRightRangePos( sDesc, 3 ) ).Value;
		}
	}
%>
<Dialog Name="ViewMediaDialog" Source="dlg_view_media" Title="<%="Просмотр материала"%>" Width="750" Height="550" Close="UPDATE=CompoundProgramPanel">
	<Param Name="object_id" Value=""/>
</Dialog>
<Dialog Name="EventResultDialog" Source="event_result_body" Width="800" Close="REFRESH">
	<Param Name="iPersonId" Value=""/>
	<Param Name="iEventId" Value=""/>
</Dialog>	
<StackPanel Orientation="Vertical" Class="XAML-stack-tile <%=sCustomClass%>">
	<StackPanel Orientation="Vertical" Class="XAML-stack-tile-image-container" Click="<%=sClickAction%>">
		<Image Click="<%=sClickAction%>" Class="XAML-image-tile-image" Width="216" Height="160">
			<BackgroundImage Source="<%=XmlAttrEncode( sObjectImageUrl )%>"/>
		</Image>
	</StackPanel>
	<StackPanel Class="XAML-stack-tile-title-container">
		<Link Click="<%=sClickAction%>" Class="XAML-link-tile-title"><![CDATA[<%=sName%>]]></Link>
	</StackPanel>
	<Label Class="XAML-label-tile-status <%=sStatusColor%>"><%=sStatus%></Label>
	
<%
			if(sDesc!="")
			{
				if(StrCharCount(sDesc)>=160 && bTileStyle)
				{
					sDesc = StrLeftCharRange(sDesc, 160);
				}
%>
<%
if (bTileStyle) {
%>
	<Label Class="XAML-label-tile-fader"></Label>
<%
				}
			}
%>
</StackPanel>

<%
}
%>
</SPXMLScreen>