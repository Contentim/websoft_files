<?xml version="1.0" encoding="utf-8"?>
<SPXML-SCREEN SOURCE="TopElem" BEFORE-INIT-ACTION="

	fldThisReportikLocalSettings = local_settings.custom_datas.ObtainChildByKey( TopElem.report_name );

">

<USE FORM="//wtv/ms_general.xms"/>
<USE FORM="//wtv/ui_reports.xms"/>

<LINE>

	<PANEL SUNKEN="1" BORDER="0" WIDTH-EXPR="TopElem.is_minimized ? '100%' : '-320vpx'">

		<PANEL STD-MARGINS="0" HEIGHT="48px" WIDTH="100%">
			<ITEM TYPE="standard_report_actions_panel" />
		</PANEL>

		<SPLIT FIXED="1" BK-COLOR-EXPR="AppUi.themeColors.separator"/>
		
		<!-- колонки -->
		<LIST NAME="ViewGrid" HEIGHT="-32vpx" ROW-AUTO-HEIGHT="1" VERT-SCROLL="1" LOOP-EXPR="
			try
			{
				arrColumnsInfo = StrReplace( List.GetCurCodeSortInfo(), '\'', '' ).split( ',' );
				sColumnName = Trim( arrColumnsInfo[0] );
				sSortDir = Trim( arrColumnsInfo[1] );

				Ps.persons.Sort( sColumnName, sSortDir )
				return Ps.persons;
			}
			catch( ex )
			{
				return Ps.persons;
			}
			" ON-SEL-CHANGE="
				if ( TopElem.ChildExists( 'count_sel' ) )
				{
					TopElem.set_sel_action( List );
				}
			">

			<ROW DELETE-ACTION="" OPEN-ACTION="ObtainDocScreen(UrlFromDocID(ListElem.id))" IMAGE-URL="ico/task.ico">
				<!-- «Сотрудник» - ФИО сотрудника; -->
				<COL WIDTH="40zr" COL-TITLE-EXPR="ms_tools.get_const('c_coll')" TITLE-EXPR="ListElem.person_fullname" ORDER="person_fullname"/>

				<!-- «Должность» - наименование должности сотрудника; -->
				<COL WIDTH="20zr" COL-TITLE-EXPR="ms_tools.get_const('c_position')" TITLE-EXPR="ListElem.person_position_name" ORDER="person_position_name"/>

				<!-- «Подразделение» - наименование подразделения, к которому относится должность; -->
				<COL WIDTH="20zr" COL-TITLE-EXPR="ms_tools.get_const('c_subd')" TITLE-EXPR="ListElem.person_subdivision_name" ORDER="person_subdivision_name"/>

				<!-- «Организация» - наименование организации, к которой относится подразделение; -->
				<COL WIDTH="20zr" COL-TITLE-EXPR="ms_tools.get_const('c_org')" TITLE-EXPR="ListElem.person_org_name" ORDER="person_org_name"/>

				<!-- «Задач» - общее число оцененных задач -->
				<COL WIDTH="20zr" COL-TITLE-EXPR="'Задач'" TITLE-EXPR="ListElem.eval_task_count" ORDER="task_count"/>

				<!-- «Текущая оценка» - текущая оценка, подсчитанная по оцененным задачам -->
				<COL WIDTH="20zr" COL-TITLE-EXPR="'Текущая оценка'" TITLE-EXPR="ListElem.current_mark" ORDER="task_count"/>
			</ROW>

			<MENU></MENU>
		</LIST>
		
		<ITEM TYPE="status_panel"/>

	</PANEL>

	<SPLIT FIXED="1" BK-COLOR-EXPR="AppUi.themeColors.separator"/>

	<PANEL HEIGHT="100%" WIDTH-EXPR="TopElem.is_minimized ? '0' : '320vpx'">

		<IF EXPR="! TopElem.is_minimized">
			<PANEL SUNKEN="1" STD-MARGINS="1" VERT-ALIGN="top" VERT-SCROLL="1" _HORIZ-SCROLL="1" PADDING="16vpx 16vpx 16vpx 16vpx" HEIGHT="100%" WIDTH="100%">

				<WITH VAR="oModelRoles" EXPR="
					curUser = tools.get_cur_user();
					var sApplicationID = ( tools_app.get_cur_application() == null ? '' : tools_app.get_cur_application().id.Value );
					if( sApplicationID != '' )
					{
						return CallServerMethod( 'tools_report', 'model_roles', [ curUser.id.Value, sApplicationID ]  );
					} else {
						return {};
					}
				">

					<!-- поля фильтра -->

					<!-- 
						Процедура оценки (обязательно) – единичный выбор из списка процедур оценки в статусе Завершена, привязанных к приложению websoft_task_assessment. Отчет считается только по выбранной процедуре;
					-->
					<ITEM VERT-ALIGN="top" TYPE="ms_object_selector" WIDTH="100%" catalogExpr="'assessment_appraise'" SOURCE="Ps.assessment_appraise_id" requireExpr="true" xqueryQualExpr="
						if(oModelRoles.type != '')
						{
							switch( oModelRoles.type )
							{
								case 'admin':
								case 'manager':
								case 'hr': // менеджер обучения
								case 'observer': // наблюдатель
								{
									return '';
								}
								case 'expert': // методист
								{
									if(oModelRoles.expert_id != undefined && oModelRoles.expert_id != null )
									{
										iExpertID = oModelRoles.expert_id;

										sQuery = 'for $elem in roles where $elem/catalog_name = \'course\' and contains($elem/experts,' + OptInt(iExpertID, 0) + ') return $elem/Fields(\'id\')';
										arrRoles = tools.xquery(sQuery);
										
										arrRoleIDs = [];
										for(oRole in arrRoles)
										{
											arrRoleIDs.push(oRole.id.Value);
										}

										arrObjects = [];
										if(ArrayCount(arrRoleIDs) > 0)
										{
											sQuery = 'for $elem in courses where MatchSome($elem/role_id, (' + ArrayMerge(arrRoleIDs, 'This', ',') + ')) return $elem/Fields(\'id\')';
											arrObjects = tools.xquery(sQuery);

											arrObjectIDs = [];
											if(ArrayOptFirstElem(arrObjects) != undefined)
											{
												for(oObject in arrObjects)
												{
													arrObjectIDs.push(oObject.id.Value);
												}
											}
											return 'MatchSome($elem/id, (' + ArrayMerge(arrObjectIDs, 'This', ',') + '))'
										} else {
											return '$elem/id = 0';
										}
									}
									break;
								}
								case 'reject':
								{
									return '$elem/id = 0';
								}
								default:
								{
									return '$elem/id = 0';
								}
							}
						}
					"/>

					<!-- 
						Подразделение (необязательно) – единичный выбор из каталога подразделений. Если выбрано, то из процедуры отбираются только сотрудники из этого подразделения;

						Учитывать дочерние подразделения вниз по иерархии (необязательно) – флаг. Если включено, то к сотрудникам из указанного подразделения добавляются все нижележащие по структуре подразделения.
					-->
					<ITEM TYPE="SelectOrgSubLabel" orgWidthExpr="'100%'" subWidthExpr="'90%'" isAdaptiveExpr="1" SOURCE="Ps.parent_object_id" xqueryQualExpr="
						if(oModelRoles.type != '')
						{
							switch( oModelRoles.type )
							{
								case 'admin':
								case 'manager':
								case 'expert':
								{
									return '';
								}
								case 'hr':
								{
									arrSubdivisionIDs = oModelRoles.subdivision_ids.hr;
									return 'MatchSome($elem/id, (' + ArrayMerge(arrSubdivisionIDs, 'This', ',') + '))';
								}
								case 'observer':
								{
									arrSubdivisionIDs = oModelRoles.subdivision_ids.observer;
									return 'MatchSome($elem/id, (' + ArrayMerge(arrSubdivisionIDs, 'This', ',') + '))';
								}
								case 'reject':
								{
									return '$elem/id = 0';
								}
								default:
								{
									return '$elem/id = 0';
								}
							}
						}
					"/>
					<CHECK SOURCE="Ps.hier_sub_select" TITLE-EXPR="ms_tools.get_const('0ee33c4ctr')" MULTILINE="1"/>
				</WITH>
			</PANEL>
		</IF>

	</PANEL>

</LINE>

<COMMAND-HANDLER CMD="Run" ACTION="

	if ( Ps.assessment_appraise_id.HasValue )
	{  
		task = new BackgroundTask;
		task.RunOnServer = true;
		task.ShowProgress = true;

		var curUserID = tools.cur_user_id;
		var sApplicationID = ( tools_app.get_cur_application() == null ? '' : tools_app.get_cur_application().id.Value );

		oRes = tools.call_code_library_method( 'libTaskAssessment', 'getAssessmentProgressReport', [ Ps, curUserID, sApplicationID ] );

		if ( oRes != null || oRes.error != 1 )
		{
			TopElem.count_arr = ArrayCount( oRes.persons );

			iMaxReportVisibleRows = tools_report.MaxReportVisibleRows();

			Ps.persons.Clear();
			for ( oPerson in oRes.persons )
			{
				oItem = Ps.persons.AddChild();
				oItem.id = oPerson.id;
				oItem.person_fullname = oPerson.person_fullname;
				oItem.person_position_name = oPerson.person_position_name;
				oItem.person_subdivision_name = oPerson.person_subdivision_name;
				oItem.person_org_name = oPerson.person_org_name;
				oItem.eval_task_count = oPerson.eval_task_count;
				oItem.current_mark = oPerson.current_mark;
			}

			if ( iMaxReportVisibleRows != 0 && TopElem.count_arr >= iMaxReportVisibleRows )
			{
				if ( ! Screen.MsgBox( StrReplace( StrReplace( 'Количество записей в отчете {PARAM1}. Оно превышает установленный лимит строк: {PARAM2}. Открыть отчет сейчас? При нажатии на &quot;Нет&quot; отчет будет выгружен в Excel.', '{PARAM1}', TopElem.count_arr ), '{PARAM2}', iMaxReportVisibleRows ), ms_tools.get_const('c_question'), 'question', 'yes,no' ) )
				{
					arrColumns = [
						{ 'name': 'person_fullname', 'title': ms_tools.get_const('c_coll') },
						{ 'name': 'person_position_name', 'title': ms_tools.get_const('c_position') },
						{ 'name': 'person_subdivision_name', 'title': ms_tools.get_const('c_subd') },
						{ 'name': 'person_org_name', 'title': ms_tools.get_const('c_org') },
						{ 'name': 'eval_task_count', 'title': 'Задач' },
						{ 'name': 'current_mark', 'title': 'Текущая оценка' },
					];

					_str = EvalCodePageUrl( 'x-local://components/task_assessment/spxml/templates/assessment_progress_report.html' );

					sReportFilePath = task.CallMethod( 'tools_report', 'save_report_to_file', [ _str, TopElem.report_name, TopElem.export_type, '', System.IsWebClient, EncodeJson( arrColumns ), oRes.persons ] );

					if ( ! System.IsWebClient )
					{
						sReportUrl = ObtainSessionTempFile( UrlPathSuffix( sReportFilePath ) );
						CopyUrl( sReportUrl, sReportFilePath );
						sReportFilePath = UrlToFilePath( sReportUrl );
					}

					ShellExecute( 'open', sReportFilePath );

				}
			}

		}
	} else {
		Screen.MsgBox( 'Не выбрана процедура оценки', ms_tools.get_const( 'c_error' ), 'error', 'ok' );
		Cancel();
	}
"/>

<COMMAND-HANDLER CMD="Export" ACTION="
	arrColumns = [
		{ 'name': 'person_fullname', 'title': ms_tools.get_const('c_coll') },
		{ 'name': 'person_position_name', 'title': ms_tools.get_const('c_position') },
		{ 'name': 'person_subdivision_name', 'title': ms_tools.get_const('c_subd') },
		{ 'name': 'person_org_name', 'title': ms_tools.get_const('c_org') },
		{ 'name': 'eval_task_count', 'title': 'Задач' },
		{ 'name': 'current_mark', 'title': 'Текущая оценка' },
	];

	task = new BackgroundTask;
	task.RunOnServer = true;
	task.ShowProgress = true;

	_str = EvalCodePageUrl( 'x-local://components/task_assessment/spxml/templates/assessment_progress_report.html' );

	sReportFilePath = task.CallMethod( 'tools_report', 'save_report_to_file', [ _str, TopElem.report_name, TopElem.export_type, '', System.IsWebClient, EncodeJson( arrColumns ), Ps.persons ] );

	if ( ! System.IsWebClient )
	{
		sReportUrl = ObtainSessionTempFile( UrlPathSuffix( sReportFilePath ) );
		CopyUrl( sReportUrl, sReportFilePath );
		sReportFilePath = UrlToFilePath( sReportUrl );
	}

	ShellExecute( 'open', sReportFilePath );
	
"/>

</SPXML-SCREEN>
