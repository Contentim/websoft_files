<?xml version="1.0" encoding="utf-8"?>
<SPXML-INLINE-FORM>

<tools_web>
	<!-- OLD TO TRASH start -->
	<put_query_string PROPERTY="1" PARAM="_param_str" PARAM="_page_name" EXPR="
			if ( _page_name == '' )
				return '/_wt/doc/doc_id/' + _param_str;
			else
				return tools_web.convert_mode_clean_url( _page_name + ( StrContains( _page_name, '?' ) ? '&amp;doc_id=' : '?doc_id=' ) + _param_str );
	"/>
	<!-- OLD TO TRASH finish -->


	<web_url TYPE="string" EXPR-INIT="UrlAppendPath( AppDirectoryPath(), '/wt/web' )"/>

	<doc_link PROPERTY="1" PARAM="oAttributesParam" EXPR="
			if ( oAttributesParam == null || oAttributesParam == undefined )
			{
				return '/_wt/doc/';
			}

			iID = OptInt( oAttributesParam );
			if ( iID == undefined )
			{
				iID = oAttributesParam.id.Value;
				if ( oAttributesParam.ChildExists( 'attributes' ) )
				{
					oAttributesParam = oAttributesParam.attributes;
				}
			}
			else
			{
				oAttributesParam = OpenDoc( UrlFromDocID( iID ) ).TopElem.attributes;
			}

			if ( oAttributesParam.is_link )
			{
				return oAttributesParam.link_href;
			}

			if ( oAttributesParam.template.HasValue )
			{
				return tools_web.get_clean_url_exc_query( oAttributesParam.template, 'doc_id', { doc_id: iID } );
			}
			else
			{
				return tools_web.get_mode_clean_url( null, iID, { doc_id: iID } );
			}
	"/>

	<get_object_link PROPERTY="1" PARAM="sObjectNameParam" PARAM="iObjectIDParam" PARAM="teObjectParam" PARAM="iDocIDParam" EXPR="
			switch ( sObjectNameParam )
			{
				case 'document':
					return tools_web.doc_link( teObjectParam );
					break;

				default:
					return '/_wt/' + iObjectIDParam + '/doc_id/' + iDocIDParam;
					break;
			}
	"/>

	<get_web_str PROPERTY="1" CALLER-ENV="1" PARAM="sNameParam" EXPR="
			fldConst = ArrayOptFindBySortedKey( curLngWeb, sNameParam, 'id' );
			return fldConst == undefined ? 'UNDEFINED - ' + sNameParam : fldConst.val.Value; // 'UNDEFINED'
	"/>

	<get_web_const PROPERTY="1" PARAM="sNameParam" PARAM="fldLngParam" EXPR="
			fldConst = ArrayOptFindBySortedKey( fldLngParam, sNameParam, 'id' );
			return fldConst == undefined ? 'UNDEFINED - ' + sNameParam : fldConst.val.Value; // 'UNDEFINED'
	"/>

	<eval_web_column_const PROPERTY="1" PARAM="sNameParam" PARAM="fldLngParam" EXPR="
			if ( StrBegins( sNameParam, '\'' ) )
				return eval( sNameParam );
			return tools_web.get_web_const( sNameParam, fldLngParam );
	"/>

	<get_web_desc PROPERTY="1" PARAM="sSourceHtml" PARAM="oUrl" PARAM="_path" PARAM="Env" EXPR="
			if ( StrContains( sSourceHtml, '&lt;compound-attc ' ) )
			{
				var sMode = 'compound';
				try
				{
					sMode = oUrl.GetOptProperty( 'mode', 'data' );
				}
				catch ( err )
				{
				}

				var arrCompound = [];
				var sUrlParams = '';
				if ( sMode == 'compound' )
				{
					var sUrl = '';
					var sPath = '';
					var Env = null;
					try
					{
						sUrl = oUrl.GetOptProperty( 'url', '' );
						sPath = oUrl.GetOptProperty( 'path', '' );
						Env = oUrl.GetOptProperty( 'Env', null );
					}
					catch ( e )
					{
						sUrl = oUrl;
						try
						{
							sPath = _path;
						}
						catch ( err )
						{
							sPath = '';
						}
						try
						{
							if ( Env == undefined )
								throw '';
						}
						catch ( err )
						{
							Env = null;
						}
					}
					if ( sPath == '' || sPath == null )
					{
						sUrlParams = 'url=' + UrlEncode( sUrl );
					}
					else
					{
						sUrlParams = 'doc_url=' + sUrl + '&elem_path=' + sPath;
					}
				}
				else
				{
					oReader = new TagReader( sSourceHtml );
					oReader.ReadNext();

					if ( sMode == 'message' )
					{
						fldSourceMessage = oUrl.GetProperty( 'message' );

						while ( oReader.SkipToTag( 'compound-attc', '', true ) )
						{
							sCid = 'cid:' + UniqueID();
							arrCompound.push({
								'path': oReader.GetAttr( 'path' ),
								'cid': sCid
							});

							fldAttachment = fldSourceMessage.attachments.AddChild();
							fldAttachment.name = sCid;
							fldAttachment.data = Base64Decode( oReader.GetAttr( 'data' ) );

							oReader.ReadNext();
						}
					}
					else
					{
						while ( oReader.SkipToTag( 'compound-attc', '', true ) )
						{
							arrCompound.push({
								'path': oReader.GetAttr( 'path' ),
								'data': oReader.GetAttr( 'data' )
							});
							oReader.ReadNext();
						}
					}
				}

				destStream = new BufStream;
				destStream.PrepareWriteSpace( StrLen( sSourceHtml ) );
				reader = new TagReader( sSourceHtml );

				while ( reader.ReadNext() )
				{
					tagName = StrLowerCase( reader.TagName );
					if ( tagName == 'img' )
					{
						sAttr = Trim( reader.GetAttr( 'src' ) );
						if ( sAttr != '' )
						{
							if ( StrBegins( sAttr, 'data:' ) )
							{
								continue;
							}

							if ( ! StrContains( sAttr, '/' ) )
							{
								if ( sMode == 'compound' )
								{
									sResUrl = '/xhttp_res?' + sUrlParams + '&res_id=' + StrReplace( sAttr, '[!MODULE_IMAGES]', '' );
									if ( Env != null )
										sResUrl = tools_web.set_base_url_path( sResUrl, Env );
									reader.SetAttr( 'src', sResUrl );
								}
								else
								{
									oCompound = ArrayOptFindByKey( arrCompound, sAttr, 'path' );
									if ( oCompound != undefined )
									{
										if ( sMode == 'message' )
										{
											reader.SetAttr( 'src', oCompound.cid );
										}
										else
										{
											sUrlSuffix = StrLowerCase( UrlPathSuffix( sAttr ) );
											if ( ! tools_web.content_types.HasValue )
											{
												tools_web.content_types = OpenDoc( 'x-local://wtv/MIME-types.xml', 'form=x-local://wtv/wtv_form_content_types.xmd' ).TopElem;
											}
											fldContentType = tools_web.content_types.Object.GetOptChildByKey( sUrlSuffix );
											if ( fldContentType == undefined )
											{
												sContentType = 'image/' + StrRightRangePos( sUrlSuffix, 1 );
											}
											else
											{
												sContentType = fldContentType.type.Value;
											}
											reader.SetAttr( 'src', ( 'data:' + sContentType + ';base64,' + oCompound.data ) );
										}
									}
								}
							}
						}
					}
					else if ( tagName == 'compound-attc' )
					{
						continue;
					}
					reader.ExportTag( destStream );
				}

				return destStream.DetachStr();
			}
			return sSourceHtml;
	"/>

	<get_sum_sid PROPERTY="1" PARAM="sIdParam" PARAM="iSessionIdParam" EXPR="
			if ( global_settings.settings.check_sid )
				return ( sIdParam == null || sIdParam == '' ? 0 : Int( sIdParam ) ) + Int(iSessionIdParam);
			else
				return sIdParam;
	"/>

	<check_sum_sid PROPERTY="1" PARAM="sIdParam" PARAM="sSumParam" PARAM="iSessionIdParam" EXPR="
			if ( global_settings.settings.check_sid )
				return ( ( Int( sSumParam ) - ( sIdParam == null || sIdParam == '' ? 0 : Int( sIdParam ) ) ) == iSessionIdParam );
			else
				return true;
	"/>


	<custom_elems_filling PROPERTY="1" PARAM="fldTarget" PARAM="oSourceParam" PARAM="arrCustomElemsParam" PARAM="oParams" EXPR="
			oRes = ({ 'error': 0, 'error_text': '', 'title': '', 'mandatory_fields': [], 'condition_fields': [] });
			try
			{
				if ( oParams == null )
					throw 'no_data';
			}
			catch ( err )
			{
				oParams = ({});
			}
			try
			{
				if ( arrCustomElemsParam == undefined )
					throw 'no_data';
			}
			catch ( err )
			{
				arrCustomElemsParam = null;
			}

			if ( arrCustomElemsParam == null )
			{
				iObjectID = oParams.GetOptProperty( 'iObjectID' );
				if ( iObjectID == undefined )
					iObjectID = fldTarget.id.Value;

				fldCustomTemplate = tools.get_custom_template( oParams.GetOptProperty( 'sCatalogName', fldTarget.Name ), iObjectID, fldTarget );
				if ( fldCustomTemplate == null )
					return oRes;

				arrCustomElemsParam = fldCustomTemplate.fields;
			}

			bCheckMandatory = oParams.GetOptProperty( 'bCheckMandatory', false );
			bCheckCondition = oParams.GetOptProperty( 'bCheckCondition', false );

			if ( ObjectType( oSourceParam ) == 'JsArray' )
			{
				var oTemp = new Object;
				for( oFieldElem in oSourceParam )
				{
					oTemp.SetProperty( oFieldElem.name, oFieldElem.value );
				}
				oSourceParam = oTemp;
			}

			if(oSourceParam.HasProperty( 'files_fo_delete' ))
			{
				arrFilesToDelete = String(oSourceParam.GetProperty( 'files_fo_delete' )).split(';');;
				for(sFileToDeleteId in arrFilesToDelete)
				{
					if(fldTarget.custom_elems.ChildByKeyExists(sFileToDeleteId))
					{
						try
						{
							docFile = OpenDoc( UrlFromDocID( Int(fldTarget.custom_elems.GetChildByKey(sFileToDeleteId).value) ) )
							docFile.TopElem.del_counter(fldTarget);
							docFile.Save();
						}
						catch(x)
						{
							alert(x);
						}
						fldTarget.custom_elems.DeleteChildByKey(sFileToDeleteId);
					}
				}
			}

			for ( fldCustomElem in arrCustomElemsParam )
			{
				try
				{
					if ( ! fldCustomElem.disp_web || fldCustomElem.type == 'title' )
					{
						continue;
					}

					if ( bCheckCondition &amp;&amp; fldCustomElem.view.conditions.ChildNum != 0 )
					{
						if ( ! tools.safe_execution( tools.create_filter_javascript( fldCustomElem.view.conditions, null, 'fldTarget.' ) ) )
						{
							continue;
						}
					}

					if ( oSourceParam.HasProperty( fldCustomElem.name ) || fldCustomElem.type == 'bool' )
					{
						oValue = oSourceParam.GetOptProperty( fldCustomElem.name );
						if ( fldCustomElem.type == 'file' )
						{
							if ( OptInt( oValue ) == undefined )
							{
								if ( Trim( oValue ) != '' &amp;&amp; ! oValue.FileName.HasValue )
								{
									docResource = OpenNewDoc( '//wtv/wtv_resource.xmd' );
									docResource.BindToDb( DefaultDb );
									docResource.TopElem.put_str( oValue, oValue.FileName, fldTarget );
									oValue = docResource.DocID;
								}
							}
						}
						else if ( fldCustomElem.type == 'date' )
						{
							try
							{
								oValue = Date( oValue );
								if ( Hour( oValue ) == undefined )
									oValue = DateNewTime( oValue, 0, 0, 0 );
								oValue = StrXmlDate( oValue );
							}
							catch ( e )
							{
							}
						}
						else if ( fldCustomElem.type == 'list' &amp;&amp; oSourceParam.HasProperty( fldCustomElem.name + 'IsObject' ) )
						{
							oValue = ArrayMerge( ArraySelectByKey( oValue, true, 'checked' ), 'value', ';' );
						}
						else if ( oValue == '#empty#' )
						{
							oValue = '';
						}
						if ( bCheckMandatory &amp;&amp; fldCustomElem.is_required &amp;&amp; ( oValue == '' || oValue == null || oValue == undefined ) )
						{
							oRes.error++;
							oRes.mandatory_fields.push( fldCustomElem );
							if ( oRes.title == '' )
								oRes.title = fldCustomElem.title.Value;
						}
						if ( bCheckCondition &amp;&amp; fldCustomElem.condition_eval.HasValue )
						{
							if ( ! tools.safe_execution( fldCustomElem.condition_eval ) )
							{
								oRes.error++;
								oRes.condition_fields.push( fldCustomElem );
							}
						}
					}
					else
					{
						continue;
					}
					if ( fldCustomElem.type == 'bool' )
					{
						oValue = tools_web.is_true( StrLowerCase( oSourceParam.GetOptProperty( fldCustomElem.name, 'false' ) ) );
					}
					fldTarget.custom_elems.ObtainChildByKey( fldCustomElem.name ).value = oValue;
				}
				catch ( ee )
				{
					alert( ee )	;
				}
			}

			return oRes;
	"/>

	<web_custom_elems_filling PROPERTY="1" PARAM="_catalog" PARAM="_top_id" PARAM="_source" PARAM="_request_form" PARAM="_value_flag" PARAM="sCharsetParam" PARAM="arrFields" EXPR="
			try
			{
				_value_flag = _value_flag == true;
			}
			catch ( err )
			{
				_value_flag = false;
			}
			try
			{
				if ( arrFields == '' || arrFields == undefined )
					throw 'no_data';
			}
			catch ( err )
			{
				arrFields = null;
			}

			oRes = tools_web.custom_elems_filling( _source, _request_form, arrFields, ({
				'sCatalogName': _catalog,
				'iObjectID': _top_id,
				'bCheckMandatory': _value_flag,
				'bCheckCondition': _value_flag
			}) );
			if ( oRes.error == 0 )
				return true;
			else
				return oRes;
	"/>

	<update_object_from_context  PROPERTY="1" PARAM="docObjectParam" PARAM="oContextParam" PARAM="arrFieldNamesParam" PARAM="sPrefixParam" EXPR="
		try
		{
			if( arrFieldNamesParam == null )
				throw 'no_array';
			else
				arrFieldNames = arrFieldNamesParam;
		}
		catch(x)
		{
			arrFieldNames = oContextParam;
		}
		try
		{
			sPrefixParam;
		}
		catch(x)
		{
			sPrefixParam = '';
		}

		for(sElemName in arrFieldNames)
		{
			sContextFieldName = sElemName;
			if(sPrefixParam != '')
			{
				if(!StrBegins(sElemName, sPrefixParam, false))
				{
					continue;
				}
				else
				{
					sObjectFieldName = StrReplaceOne(sElemName, sPrefixParam, '');
				}
			}
			else
			{
				sObjectFieldName = sElemName;
			}

			if(!oContextParam.HasProperty(sContextFieldName))
				continue;

			sElemValue = oContextParam.GetProperty(sContextFieldName);
			try
			{
				if(docObjectParam.TopElem.ChildExists( sObjectFieldName ))
				{
					fldObjectField = docObjectParam.TopElem.Child( sObjectFieldName );
					sContextFieldValue = String(oContextParam.GetProperty( sContextFieldName ));

					switch ( fldObjectField.Type )
					{
						case 'bool':
							fldObjectField.Value = ( sContextFieldValue=='true' || sContextFieldValue=='on' ||  sContextFieldValue=='1');
							break;

						case 'integer':
							if ( sContextFieldValue != '' )
								fldObjectField.Value = Int( sContextFieldValue );
							else
								fldObjectField.Clear();
							break;

						case 'date':
							if ( String(sContextFieldValue) != '' )
							{
								fldObjectField.Value = Date( sContextFieldValue );
							}
							else
								fldObjectField.Clear();
							break;

						default:
							fldObjectField.Value = sContextFieldValue;
							break;
					}
				}
			}
			catch ( e )
			{
				alert( 'update_object_from_context: filling field \'' + sContextFieldName + '\' error. ' + e );
			}
		}
		try
		{
			tools_web.web_custom_elems_filling( docObjectParam.TopElem.Name, docObjectParam.DocID, docObjectParam.TopElem, oContextParam );
		}
		catch ( e )
		{
			alert( e );
		}
	"/>

	<get_query_string_from_url PROPERTY="1" PARAM="sUrlParam" PARAM="_flag" PARAM="_params" EXPR="
			_params = StrContains( _params, '=' ) ? ArrayExtract( String( _params ).split( '&amp;' ), 'This.split(&quot;=&quot;)[0]' ) : String( _params ).split( ';' );

			if ( StrContains( sUrlParam, '_wt/' ) )
			{
				oUrlQuery = tools_web.get_url_query( sUrlParam );
				_temp_query_string = _flag ? '/view_doc.html?' : '';
			}
			else
			{
				oUrlQuery = UrlQuery( sUrlParam );
				_temp_query_string = _flag ? UrlFileName( sUrlParam ) + '?' : '';
			}
			for ( _temp_elem in oUrlQuery )
			{
				if ( _temp_elem != '' &amp;&amp; ArrayOptFind( _params, 'StrLowerCase(This)==' + CodeLiteral( _temp_elem ) ) == undefined )
				{
					_temp_query_string += UrlEncode( _temp_elem ) + '=' + UrlEncode( oUrlQuery.GetProperty( _temp_elem ) ) + '&amp;';
				}
			}

			return _temp_query_string;
	"/>
	<get_query_string PROPERTY="1" CALLER-ENV="1" PARAM="_flag" PARAM="_params" EXPR="
			try
			{
				if ( _flag != false )
					_flag = true;
			}
			catch ( ee )
			{
				_flag = true;
			}
			try
			{
				_params;
			}
			catch ( ee )
			{
				_params = '';
			}

			return get_query_string_from_url( Request.Url, _flag, _params );
	"/>


	<get_url_protocol PROPERTY="1" PARAM="_url" EXPR="
			return StrBegins( _url, 'https:/', true ) ? 'https://' : ( String( _url ).indexOf( ':443/' ) == 0-1 ? 'http://' : 'https://' );
	"/>
	<set_url_protocol PROPERTY="1" PARAM="sUrlParam" EXPR="
			if ( sUrlParam == tools.lds_address )
			{
				return tools.get_server_protocol + '://' + tools.lds_address;
			}
			return StrContains( sUrlParam, '://' ) ? sUrlParam : ( StrContains( sUrlParam, ':443/' ) || StrEnds( sUrlParam, ':443' ) ? 'https://' + sUrlParam : 'http://' + sUrlParam );
	"/>

	<get_cur_lng_name PROPERTY="1" PARAM="sTextParam" PARAM="sShortIDParam" EXPR="
			sShortIDParam += '=';
			iShortIDParaLen = StrLen( sShortIDParam );
			for ( _name in String( sTextParam ).split( ';' ) )
			{
				_name = Trim( _name );
				if ( StrBegins( _name, sShortIDParam, true ) )
					return StrRightRangePos( _name, iShortIDParaLen );
			}
			return sTextParam;
	"/>

	<check_access PROPERTY="1" PARAM="_source_doc" PARAM="personDocID" PARAM="personDoc" PARAM="Session" EXPR="
			iSourceDocID = OptInt( _source_doc );
			if ( iSourceDocID != undefined )
			{
				try
				{
					_source_doc = OpenDoc( UrlFromDocID( iSourceDocID ), 'form=x-local://wtv/wtv_form_doc_access.xmd;ignore-top-elem-name=1' ).TopElem;
				}
				catch( _no_doc_ )
				{
					return false;
				}
			}

			if ( _source_doc.ChildExists( 'access' ) &amp;&amp; _source_doc.access.ChildExists( 'access_roles' ) )
				_source_doc = _source_doc.access;
			else if ( ! _source_doc.ChildExists( 'access_roles' ) )
				return true;

			if ( personDocID == null )
				return _source_doc.enable_anonymous_access == true;

			flagFirstBlock = true;
			try
			{
				if ( IsEmptyValue( personDoc ) )
					throw 'no_doc';
			}
			catch ( err )
			{
				personDoc = OpenDoc( UrlFromDocID( personDocID ) ).TopElem;
			}
			try
			{
				oEnv = Session.Env;
			}
			catch ( err )
			{
				oEnv = ({});
			}

			if ( _source_doc.access_host_id.HasValue )
			{
				curHostID = oEnv.GetOptProperty( 'curHostID', null );
				flagFirstBlock = _source_doc.access_host_id == curHostID;
			}
			if ( flagFirstBlock )
			{
				if ( personDoc.access.access_level &lt; _source_doc.access_level )
				{
					flagFirstBlock = false;
				}
				else if ( _source_doc.access_org_id.HasValue &amp;&amp; _source_doc.access_org_id != personDoc.org_id )
				{
					flagFirstBlock = false;
				}
				else if ( _source_doc.access_site_id.HasValue &amp;&amp; _source_doc.access_site_id != oEnv.GetOptProperty( 'curSiteID' ) )
				{
					flagFirstBlock = false;
				}
				else if ( ArrayCount( _source_doc.access_roles ) != 0 &amp;&amp; ! _source_doc.access_roles.ChildByKeyExists( personDoc.access.access_role ) )
				{
					flagFirstBlock = false;
				}
				else if ( ArrayCount( _source_doc.access_groups ) != 0 )
				{
					sCacheID = 'user_groups_' + personDocID;
					curUserGroups = tools_web.get_user_data( sCacheID );
					if ( curUserGroups == null )
					{
						curUserGroups = ArrayExtract( XQuery( 'for $elem in group_collaborators where $elem/collaborator_id = ' + personDocID + ' return $elem/Fields(\'group_id\')' ), 'This.group_id.Value' );
						tools_web.set_user_data( sCacheID, curUserGroups, 300 );
					}
					if ( ArrayOptFind( curUserGroups, '_source_doc.access_groups.ChildByKeyExists(This)' ) == undefined )
					{
						flagFirstBlock = false;
					}
				}
			}

			if ( ArrayCount( _source_doc.conditions ) == 0 )
				return flagFirstBlock;

			if ( flagFirstBlock &amp;&amp; _source_doc.operator == 'or' )
				return true;

			if ( ! flagFirstBlock &amp;&amp; _source_doc.operator != 'or' )
				return false;

			if( ArrayOptFirstElem( XQuery( tools.create_xquery( 'collaborator', '$elem/id = ' + personDocID, tools.create_filter_xquery( _source_doc.conditions ), '', '' ) ) ) != undefined )
				return true;

			return false;
	"/>

	<get_web_param PROPERTY="1" CALLER-ENV="1" PARAM="listParamsTarget" PARAM="sParamNameParam" PARAM="sDefaultValueParam" PARAM="bEmptyFlagParam" PARAM="sOverrideWebTemplateID" EXPR="
			var iOWTId = null;
			try
			{
				iOWTId = Int(sOverrideWebTemplateID);
			}
			catch ( err ) {}
			if( iOWTId == null )
			{
				try
				{
					if ( curOverrideWebTemplateID == '' || curOverrideWebTemplateID == undefined )
						throw 'no_data';
					iOWTId = curOverrideWebTemplateID;
				}
				catch ( err )
				{
					iOWTId = null;
				}
			}
			var sParam = undefined;
			if ( iOWTId == null )
			{
				try
				{
					listParamsTarget.Name;
					sParam = listParamsTarget.GetOptChildByKey( sParamNameParam );
					if ( sParam != undefined )
						sParam = sParam.value.Value;
				}
				catch ( err )
				{
					sParam = listParamsTarget.GetOptProperty( sParamNameParam );
				}
			}
			else
			{
				sParamNameFull = 'owt_' + iOWTId + '.' + sParamNameParam;
				try
				{
					listParamsTarget.Name;
					for ( fldParamElem in listParamsTarget )
					{
						sParamElemValue = fldParamElem.PrimaryKey.Value;
						if ( StrBegins( sParamElemValue, 'owt_' ) )
						{
							if ( sParamElemValue == sParamNameFull )
							{
								sParam = fldParamElem.value.Value;
								break;
							}
						}
						else if ( sParamNameElem == sParamNameParam )
						{
							sParam = fldParamElem.value.Value;
						}
					}
				}
				catch ( err )
				{
					for ( sParamNameElem in listParamsTarget )
					{
						if ( StrBegins( sParamNameElem, 'owt_' ) )
						{
							if ( sParamNameElem == sParamNameFull )
							{
								sParam = listParamsTarget.GetProperty( sParamNameElem );
								break;
							}
						}
						else if ( sParamNameElem == sParamNameParam )
						{
							sParam = listParamsTarget.GetProperty( sParamNameElem );
						}
					}
				}
			}
/*
			if ( sParam == undefined )
			{
				try
				{
					sParam = listParamsTarget.GetOptChildByKey( sParamNameParam );
					if ( sParam != undefined )
						sParam = sParam.value.Value;
				}
				catch ( err )
				{
					sParam = listParamsTarget.GetOptProperty( sParamNameParam );
				}
			}
*/
			if ( sParam == undefined )
				sParam = '';
			if ( sParam == '' &amp;&amp; bEmptyFlagParam )
			{
				return sDefaultValueParam;
			}
			else
			{
				if ( ObjectType( sDefaultValueParam ) == 'JsArray' || ObjectType( sDefaultValueParam ) == 'JsObject' )
				{
					if ( StrBegins( sParam, '[' ) || StrBegins( sParam, '{' ) )
						return ParseJson( sParam );
					else
						return sParam.split( ';' );
				}
				else
				{
					if ( StrBegins( sParam, '[' ) || StrBegins( sParam, '{' ) )
					{
						try
						{
							arrParams = ParseJson( sParam );
						}
						catch ( err )
						{
							return sParam;
						}
						oFirstElem = ArrayOptFirstElem( arrParams );
						if ( oFirstElem == undefined || ObjectType( oFirstElem ) != 'JsObject' || oFirstElem.GetOptProperty( '__value' ) == undefined )
							return sParam;

						return ArrayMerge( arrParams, 'ObjectType(This)==\'JsObject\'?This.GetOptProperty(\'__value\'):This', ';' );
					}
					else
					{
						if ( StrBegins( sParam, '=' ) )
						{
							try
							{
								return SafeEval( StrRightRangePos( sParam, 1 ), [ {
									'curObject': curObject,
									'curObjectID': curObjectID,
									'curUser': curUser,
									'curDoc': curDoc,
									'curSite': curSite
								} ] );
							}
							catch ( err )
							{
								alert( err );
							}
						}
						return sParam;
					}
				}
			}
	"/>
	<set_web_params PROPERTY="1" CALLER-ENV="1" PARAM="listParamsTarget" PARAM="listWvarsParam" PARAM="bRewriteFlagParam" PARAM="iOverrideWebTemplateIDParam" EXPR="
			try
			{
				if ( iOverrideWebTemplateIDParam == '' || iOverrideWebTemplateIDParam == undefined )
					throw 'no_data';
			}
			catch ( err )
			{
				iOverrideWebTemplateIDParam = null;
			}

			try
			{
				listParamsTarget.Name;
				try
				{
					ArrayFirstElem( listWvarsParam ).PrimaryKey;
					for ( fldWvarElem in listWvarsParam )
					{
						if ( bRewriteFlagParam )
						{
							listParamsTarget.ObtainChildByKey( fldWvarElem.PrimaryKey ).AssignElem( fldWvarElem );
						}
						else if ( ! listParamsTarget.ChildByKeyExists( fldWvarElem.PrimaryKey ) )
						{
							listParamsTarget.AddChild().AssignElem( fldWvarElem );
						}
					}
				}
				catch ( ee )
				{
					for ( oWvarElem in listWvarsParam )
					{
						if ( bRewriteFlagParam )
						{
							fldWvarChild = listParamsTarget.ObtainChildByKey( oWvarElem.name );
							fldWvarChild.value = oWvarElem.value;
						}
						else if ( ! listParamsTarget.ChildByKeyExists( oWvarElem.name ) )
						{
							fldWvarChild = listParamsTarget.AddChild();
							fldWvarChild.name = oWvarElem.name;
							fldWvarChild.value = oWvarElem.value;
						}
					}
				}

/*
				for ( fldWvarElem in listWvarsParam )
				{
					sPrimaryKey = ( iOverrideWebTemplateIDParam == null ? '' : 'owt_' + iOverrideWebTemplateIDParam + '.' ) + fldWvarElem.PrimaryKey;
					if ( bRewriteFlagParam )
					{
						if ( iOverrideWebTemplateIDParam == null )
						{
							for ( fldParamNameTargetElem in listParamsTarget )
							{
								sParamNameTargetElem = fldParamNameTargetElem.PrimaryKey.Value;
								if ( StrBegins( sParamNameTargetElem, 'owt_' ) &amp;&amp; StrRightRangePos( sParamNameTargetElem, sParamNameTargetElem.indexOf( '.' ) + 1 ) == fldWvarElem.PrimaryKey )
								{
									fldParamNameTargetElem.AssignElem( fldWvarElem );
								}
							}
						}

						fldParamChild = listParamsTarget.GetOptChildByKey( sPrimaryKey );
						if ( fldParamChild == undefined )
						{
							fldParamChild = listParamsTarget.AddChild();
						}
						fldParamChild.AssignElem( fldWvarElem );
					}
					else if ( fldWvarElem.value.HasValue &amp;&amp; ! listParamsTarget.ChildByKeyExists( sPrimaryKey ) )
					{
						listParamsTarget.AddChild().AssignElem( fldWvarElem );
					}
				}
*/
			}
			catch ( err )
			{
				for ( fldWvarElem in listWvarsParam )
				{
					if ( fldWvarElem.type == 'heading' )
						continue;

					sPrimaryKey = ( iOverrideWebTemplateIDParam == null ? '' : 'owt_' + iOverrideWebTemplateIDParam + '.' ) + fldWvarElem.PrimaryKey;
					if ( bRewriteFlagParam )
					{
						if ( iOverrideWebTemplateIDParam == null )
						{
							for ( sParamNameTargetElem in listParamsTarget )
							{
								if ( StrBegins( sParamNameTargetElem, 'owt_' ) &amp;&amp; StrRightRangePos( sParamNameTargetElem, sParamNameTargetElem.indexOf( '.' ) + 1 ) == fldWvarElem.PrimaryKey )
								{
									listParamsTarget.SetProperty( sParamNameTargetElem, fldWvarElem.value.Value );
								}
							}
						}

						//oParam = listParamsTarget.GetOptProperty( sPrimaryKey );
						//if ( oParam != undefined || fldWvarElem.value.HasValue )
						listParamsTarget.SetProperty( sPrimaryKey, fldWvarElem.value.Value );
					}
					else if ( fldWvarElem.value.HasValue &amp;&amp; ! listParamsTarget.HasProperty( sPrimaryKey ) )
					{
						listParamsTarget.SetProperty( sPrimaryKey, fldWvarElem.value.Value );
					}
				}
			}
/*
			try
			{
				listParamsTarget.Name;
				for ( fldWvarElem in listWvarsParam )
					if ( bRewriteFlagParam )
						listParamsTarget.ObtainChildByKey( fldWvarElem.PrimaryKey ).value = fldWvarElem.value;
					else if ( ! listParamsTarget.ChildByKeyExists( fldWvarElem.PrimaryKey ) )
						listParamsTarget.AddChild().AssignElem( fldWvarElem );
			}
			catch ( err )
			{
				for ( fldWvarElem in listWvarsParam )
					if ( bRewriteFlagParam )
						listParamsTarget.SetProperty( fldWvarElem.PrimaryKey, fldWvarElem.value.Value );
					else if ( ! listParamsTarget.HasProperty( fldWvarElem.PrimaryKey ) )
						listParamsTarget.SetProperty( fldWvarElem.PrimaryKey, fldWvarElem.value.Value );
			}
*/
	"/>

	<write_custom_web_template PROPERTY="1" CALLER-ENV="1" PARAM="oCustomWebTemplateParam" EXPR="
			try
			{
				iCustomWebTemplateID_write_custom_web_template = oCustomWebTemplateParam.id.Value;
				teCustomWebTemplate_write_custom_web_template = oCustomWebTemplateParam;
			}
			catch ( err )
			{
				iCustomWebTemplateID_write_custom_web_template = oCustomWebTemplateParam;
				teCustomWebTemplate_write_custom_web_template = null;
			}
			Response.Write( tools_web.insert_custom_code( iCustomWebTemplateID_write_custom_web_template, teCustomWebTemplate_write_custom_web_template, true, false, 0, null, true ) );
			return true;
	"/>


	<get_override_web_template PROPERTY="1" PARAM="iOverrideWebTemplateIDParam" PARAM="Session" PARAM="curUserID" PARAM="curUser" PARAM="curAnonymousAccess" PARAM="teActiveWebTemplateParam" PARAM="bAddingParam" EXPR="
			temp_teOverrideWebTemplate = undefined;
			sTemplateCacheType = teActiveWebTemplateParam == null ? '' : global_settings.settings.template_cache_type.Value;
			switch ( sTemplateCacheType )
			{
				case 'object':
				case 'object_placeholder':
					temp_teOverrideWebTemplate = teActiveWebTemplateParam.override_web_templates.GetOptChildByKey( iOverrideWebTemplateIDParam );
					if ( temp_teOverrideWebTemplate == undefined )
					{
						if ( bAddingParam )
						{
							temp_teOverrideWebTemplate = teActiveWebTemplateParam.override_web_templates.AddChild();
							temp_teOverrideWebTemplate.override_web_template_id = iOverrideWebTemplateIDParam;

							teOverrideWebTemplate_temp = OpenDoc( UrlFromDocID( iOverrideWebTemplateIDParam ) ).TopElem;
							temp_teOverrideWebTemplate.custom_web_template_id = teOverrideWebTemplate_temp.custom_web_template_id;
							temp_teOverrideWebTemplate.zone = teOverrideWebTemplate_temp.zone;
							temp_teOverrideWebTemplate.wvars.AssignElem( teOverrideWebTemplate_temp.wvars );
							for ( temp_fldOverrideWebTemplateElem in temp_teOverrideWebTemplate.wvars )
							{
								for ( temp_fldOverrideWebTemplateFieldElem in temp_fldOverrideWebTemplateElem )
								{
									if ( temp_fldOverrideWebTemplateFieldElem.Name != 'name' &amp;&amp; temp_fldOverrideWebTemplateFieldElem.Name != 'value' )
									{
										temp_fldOverrideWebTemplateFieldElem.Clear();
									}
								}
							}

							fldAccess_temp = teOverrideWebTemplate_temp.access;
							if ( curUserID == null )
								temp_teOverrideWebTemplate.access_mode = fldAccess_temp.enable_anonymous_access ? 'valid' : 'invalid';
							else if ( curUser != null &amp;&amp; fldAccess_temp.access_groups.ChildNum == 0 &amp;&amp; ( fldAccess_temp.conditions.ChildNum == 0 || fldAccess_temp.operator == 'or' ) )
								temp_teOverrideWebTemplate.access_mode = fldAccess_temp.access_level &lt;= curUser.access.access_level &amp;&amp; ( fldAccess_temp.access_roles.ChildNum == 0 || fldAccess_temp.access_roles.ChildByKeyExists( curUser.access.access_role ) ) ? 'valid' : 'invalid';

							if ( ! temp_teOverrideWebTemplate.access_mode.HasValue )
							{
								temp_teOverrideWebTemplate.access.AssignElem( fldAccess_temp );
								if ( ! tools_web.check_access( teOverrideWebTemplate_temp, curUserID, curUser, Session ) )
									return undefined;
							}
							else if ( temp_teOverrideWebTemplate.access_mode == 'invalid' )
							{
								temp_teOverrideWebTemplate.wvars.Clear();
								return undefined;
							}
						}
					}
					else
					{
						if ( ! temp_teOverrideWebTemplate.access_mode.HasValue )
						{
							if ( ! tools_web.check_access( temp_teOverrideWebTemplate, curUserID, curUser, Session ) )
								return undefined;
						}
						else if ( temp_teOverrideWebTemplate.access_mode == 'invalid' )
						{
							return undefined;
						}
					}
					break;

				default:
					temp_teOverrideWebTemplate = OpenDoc( UrlFromDocID( iOverrideWebTemplateIDParam ) ).TopElem;
					if ( ! tools_web.check_access( temp_teOverrideWebTemplate, curUserID, curUser, Session ) )
						return undefined;
					break;
			}
			return temp_teOverrideWebTemplate;
	"/>


	<get_override_web_templates PROPERTY="1" PARAM="Session" PARAM="oZoneParam" PARAM="curActiveWebTemplate" PARAM="bAddWebTemplate" EXPR="
			arrRes = [];
			Env = Session.Env;
			xarrOverrideWebTemplates = XQuery( 'for $elem in override_web_templates where' + ( oZoneParam == null ? '' : ( IsArray( oZoneParam ) ? ' MatchSome( $elem/zone, (' + ArrayMerge( oZoneParam, 'XQueryLiteral(This)', ',' ) + ') )' : ' $elem/zone = ' + XQueryLiteral( oZoneParam ) ) + ' and' ) + ' ( $elem/mode = ' + XQueryLiteral( Env.curMode ) + ' or $elem/mode = \'\' ) and ( $elem/web_design_id = ' + XQueryLiteral( Env.curWebDesignID ) + ' or $elem/web_design_id = null() ) and ( $elem/site_id = ' + XQueryLiteral( Env.curSiteID ) + ' or $elem/site_id = null() ) and $elem/parent_id = null() and $elem/is_enabled = true() order by $elem/weight return $elem/Fields(\'id\',\'custom_web_template_id\',\'mode_exception\')' );
			for ( catOverrideWebTemplateElem in xarrOverrideWebTemplates )
			{
				if ( ! catOverrideWebTemplateElem.custom_web_template_id.HasValue || ( catOverrideWebTemplateElem.mode_exception.HasValue &amp;&amp; ArrayOptFind( catOverrideWebTemplateElem.mode_exception.Value.split( ';' ), 'This==' + CodeLiteral( Env.curMode ) ) != undefined ) )
					continue;

				temp_teOverrideWebTemplate = tools_web.get_override_web_template( catOverrideWebTemplateElem.id, Session, Env.GetOptProperty( 'curUserID', null ), Env.GetOptProperty( 'curUser', null ), Env.curAnonymousAccess, curActiveWebTemplate, bAddWebTemplate );
				if ( temp_teOverrideWebTemplate != undefined )
					arrRes.push( temp_teOverrideWebTemplate );
			}
			return arrRes;
	"/>

	<place_zone PROPERTY="1" CALLER-ENV="1" PARAM="sZoneParam" PARAM="bCreateFCache" PARAM="bLPEPreview" EXPR="
			var bCompiler = false;
			try { bCompiler = bCreateFCache == true; } catch( err ){}
			var bEditorPreview = false;
			try { bEditorPreview = bLPEPreview == true; } catch( err ){}
			var oResStream_place_zone = new BufStream;

			var bUseLpapi_place_zone = sZoneParam == 'main' &amp;&amp; curWebMode != null &amp;&amp; curWebMode.use_lpapi();
			var bUseFCache_place_zone = ! bCompiler &amp;&amp; ! bEditorPreview &amp;&amp; bUseLpapi_place_zone &amp;&amp; curWebMode.use_fcache;
			var arrAllContainers;
			var oInContainer = new Object;
			var teContainer;
			var arrFirstLevelOWTs;
			if ( bUseFCache_place_zone )
			{
				sTemplateCache_place_zone = tools_lp.get_template_cache( curWebMode );
				if ( sTemplateCache_place_zone == null )
				{
					curCreateFCache = true;
					arrAllContainers = tools.xquery( 'for $elem in override_web_templates where $elem/mode = ' + XQueryLiteral( curWebMode.code.Value ) + ' and $elem/custom_web_template_id = 6948821390703945323 return $elem/id' );
					for ( oContainer in arrAllContainers )
					{
						teContainer = OpenDoc( UrlFromDocID( oContainer.id ) ).TopElem;
						oInContainer[ teContainer.wvars.ObtainChildByKey( 'block_container.owt_id' ).value ] = true;
					}
					arrFirstLevelOWTs = tools_web.get_override_web_templates( Session, 'main', null, false );
					for ( curOverrideWebTemplate in arrFirstLevelOWTs )
					{
						curOverrideWebTemplateID = curOverrideWebTemplate.id.Value;
						if( oInContainer.HasProperty( curOverrideWebTemplateID ) )
						{
							continue;
						}
						tools_web.set_web_params( curParams, curOverrideWebTemplate.wvars, true, curOverrideWebTemplateID );
						oResStream_place_zone.WriteStr( tools_web.insert_custom_code( curOverrideWebTemplate.custom_web_template_id, null, {
							'bEval': true,
							'bNaked': false,
							'iDepth': 0,
							'aOfFldNativeParamsArr': null,
							'bExternalEnvelope': true,
							'bNoCache': true
						} ) );
						curOverrideWebTemplateID = null;
						curOverrideWebTemplate = null;
					}
					curCreateFCache = false;
					sTemplateCache_place_zone = oResStream_place_zone.DetachStr();
					sTemplateCache_place_zone = tools_lp.collect_all_subs( sTemplateCache_place_zone );
					tools_lp.save_template_cache( curWebMode, sTemplateCache_place_zone );
				}
				return tools_lp.replace_template_cache( curWebMode, sTemplateCache_place_zone, Request );
			}

			if ( global_settings.settings.template_cache_type == 'object_placeholder' &amp;&amp; curActiveWebTemplate != null &amp;&amp; ! bUseLpapi_place_zone )
			{
				if ( ArrayCount( ArraySelectByKey( curActiveWebTemplate.override_web_templates, sZoneParam, 'zone' ) ) == 0 )
				{
					tools_web.get_override_web_templates( Session, ( '' + sZoneParam ), curActiveWebTemplate, true );
				}
				for ( curOverrideWebTemplate in ArraySelectByKey( curActiveWebTemplate.override_web_templates, sZoneParam, 'zone' ) )
				{
					if ( ! curOverrideWebTemplate.access_mode.HasValue )
					{
						if ( ! tools_web.check_access( curOverrideWebTemplate, curUserID, curUser, Session ) )
							continue;
					}
					else if ( curOverrideWebTemplate.access_mode == 'invalid' )
					{
						continue;
					}
					curOverrideWebTemplateID = curOverrideWebTemplate.override_web_template_id.Value;
					if (!bCompiler &amp;&amp; !tools_lp.check_web_mode_disp( curWebMode, curOverrideWebTemplateID, Env ) )
					{
						continue;
					}
					tools_web.set_web_params( curParams, curOverrideWebTemplate.wvars, true, curOverrideWebTemplateID );
					oResStream_place_zone.WriteStr( tools_web.insert_custom_code( curOverrideWebTemplate.custom_web_template_id, null, {
						'bEval': true,
						'bNaked': false,
						'iDepth': 0,
						'aOfFldNativeParamsArr': null,
						'bExternalEnvelope': true,
						'bNoCache': false
					} ) );
					curOverrideWebTemplateID = null;
				}
			}
			else
			{
				if ( bUseLpapi_place_zone )
				{
					arrAllContainers = tools.xquery( 'for $elem in override_web_templates where $elem/mode=' + XQueryLiteral(curWebMode.code.Value) + ' and $elem/custom_web_template_id=6948821390703945323 return $elem/id' );
					for ( oContainer in arrAllContainers )
					{
						teContainer = OpenDoc( UrlFromDocID( oContainer.id ) ).TopElem;
						oInContainer[ teContainer.wvars.ObtainChildByKey( 'block_container.owt_id' ).value ] = true;
					}
				}
				arrFirstLevelOWTs = tools_web.get_override_web_templates( Session, ( '' + sZoneParam ), null, true );
				for ( curOverrideWebTemplate in arrFirstLevelOWTs )
				{
					curOverrideWebTemplateID = curOverrideWebTemplate.ChildExists( 'override_web_template_id' ) ? curOverrideWebTemplate.override_web_template_id.Value : curOverrideWebTemplate.id.Value;
					if (!bCompiler &amp;&amp; !tools_lp.check_web_mode_disp( curWebMode, curOverrideWebTemplateID, Env ) )
					{
						continue;
					}
					if( oInContainer.HasProperty( curOverrideWebTemplateID ) )
					{
						continue;
					}
					tools_web.set_web_params( curParams, curOverrideWebTemplate.wvars, true, curOverrideWebTemplateID );
					oResStream_place_zone.WriteStr( tools_web.insert_custom_code( curOverrideWebTemplate.custom_web_template_id, null, {
						'bEval': true,
						'bNaked': false,
						'iDepth': 0,
						'aOfFldNativeParamsArr': null,
						'bExternalEnvelope': true,
						'bNoCache': bUseLpapi_place_zone
					} ) );
					curOverrideWebTemplateID = null;
					curOverrideWebTemplate = null;
				}
			}
			return oResStream_place_zone.DetachStr();
	"/>

	<place_override_web_template PROPERTY="1" CALLER-ENV="1" PARAM="iOverrideWebTemplateIDParam" PARAM="oInsertCustomCodeParams" EXPR="
			oInsertCustomCodeParams_place_override_web_template = {
				bEval: true,
				bNaked: false,
				iDepth: 0,
				aOfFldNativeParamsArr: null,
				bExternalEnvelope: true,
				bNoCache: false
			};
			try
			{
				for ( sParamNameElem_temp in oInsertCustomCodeParams )
				{
					oInsertCustomCodeParams_place_override_web_template.SetProperty( sParamNameElem_temp, oInsertCustomCodeParams.GetProperty( sParamNameElem_temp ) );
				}
			}
			catch ( err )
			{
			}

			curOverrideWebTemplateID = iOverrideWebTemplateIDParam;
			temp_teOverrideWebTemplate = OpenDoc( UrlFromDocID( curOverrideWebTemplateID ) ).TopElem;
			tools_web.set_web_params( curParams, temp_teOverrideWebTemplate.wvars, true, curOverrideWebTemplateID );
			sRes_temp = tools_web.insert_custom_code( temp_teOverrideWebTemplate.custom_web_template_id, null, oInsertCustomCodeParams_place_override_web_template );
			curOverrideWebTemplateID = null;
			return sRes_temp;
	"/>


	<get_operation_script PROPERTY="1" PARAM="OPERATION_ID" PARAM="S_SCRIPT_TYPE" PARAM="O_PARAMS" EXPR="
			try
			{
				OPERATION_ID = Int(OPERATION_ID);
				teOperation = OpenDoc(UrlFromDocID(OPERATION_ID)).TopElem;
			}
			catch(_err_)
			{
				return '&quot;' + _err_ + '&quot;';
			}

			try
			{
				S_SCRIPT_TYPE = StrLowerCase(S_SCRIPT_TYPE);
			}
			catch(_br_)
			{
				return '&quot;Operation script type not defined&quot;';;
			}
			var S_OPERATION_TYPE, A_APPLICABLE_CATALOGS, spxmlCodeLib;
			try
			{
				O_PARAMS.HasProperty('x');
			}
			catch(_br_)
			{
				O_PARAMS = ({});
			}
			S_OPERATION_TYPE = teOperation.action.Value;

			var _RC = '';
			if ( S_OPERATION_TYPE != '' )
			{
				A_APPLICABLE_CATALOGS = teOperation.operation_catalog_list.Value.split(',');

				spxmlCodeLib = OpenCodeLib('x-local://wtv/wtv_operations_script.js');
				var aFunctionParameters = Array(O_PARAMS, A_APPLICABLE_CATALOGS, S_OPERATION_TYPE, S_SCRIPT_TYPE, OPERATION_ID);
				_RC = CallObjectMethod(spxmlCodeLib, S_OPERATION_TYPE + '_' + S_SCRIPT_TYPE + '_script', aFunctionParameters);
			}

			if (S_SCRIPT_TYPE == 'bs')
				_RC += '\n' + teOperation.post_code;
			else
				_RC += '\n' + teOperation.script;

			return _RC;
	"/>

	<eval_operation_script PROPERTY="1" CALLER-ENV="1" PARAM="OPERATION_ID" PARAM="S_SCRIPT_TYPE" PARAM="O_PARAMS" EXPR="
			var temp_sScript = '';
			var temp_sParams = '';
			try
			{
				O_PARAMS.HasProperty( 'x' );
			}
			catch( err )
			{
				O_PARAMS = ({});
			}
			temp_sScript = get_operation_script( OPERATION_ID, S_SCRIPT_TYPE, O_PARAMS );
			for ( temp_ParamElem in O_PARAMS )
				temp_sParams += temp_ParamElem + '=O_PARAMS.GetProperty(\'' + temp_ParamElem + '\');';

			if ( S_SCRIPT_TYPE == 'bs' )
				eval( temp_sParams + '\n' + temp_sScript );
			else
				return EvalCodePage( '&lt;%' + temp_sParams + '%&gt;' + temp_sScript );
	"/>

<!-- Made by Alexander Balashov -->

	<is_moderator_forum PROPERTY="1" PARAM="iForumIDParam" PARAM="iUserIDParam" PARAM="teForumParam" EXPR="
			try
			{
				if ( teForumParam == null || teForumParam == '' )
					throw 'no_param';
			}
			catch ( err )
			{
				teForumParam = OpenDoc( UrlFromDocID( iForumIDParam ) ).TopElem;
			}
			return ArrayOptFindByKey( teForumParam.moderators, iUserIDParam, 'moderator_id' ) != undefined;
	"/>

	<is_privilege_collaborator PROPERTY="1" PARAM="iForumEntryIDParam" PARAM="teUserParam" PARAM="iUserIDParam" PARAM="teForumEntryParam" EXPR="
			if ( teUserParam.access.access_role == 'admin' )
				return true;

			try
			{
				if ( teForumEntryParam == null || teForumEntryParam == '' )
					thow 'not_param';
			}
			catch ( err )
			{
				teForumEntryParam = OpenDoc( UrlFromDocID( iForumEntryIDParam ) ).TopElem;
			}
			if ( ArrayCount( teForumEntryParam.privilege_collaborators ) == 0 )
				return true;

			return ArrayOptFindByKey( teForumEntryParam.privilege_collaborators, iUserIDParam, 'collaborator_id' ) != undefined;
	"/>

	<is_forum_readed PROPERTY="1" PARAM="_forum_id" PARAM="_user_id" EXPR="
			// узнать прочитан ли форум
			readArray = XQuery( 'for $read in forum_theme_read_by_collaborators where $read/person_id = ' + _user_id + ' and $read/forum_id = ' + _forum_id + ' return $read' );
			themeArray = XQuery( 'for $theme in forum_entrys where $theme/forum_id = ' + _forum_id + ' and $theme/parent_forum_entry_id = null() return $theme' );
			unRead = false;
			for ( theme in themeArray )
				if ( ArrayOptFind( readArray, 'forum_theme_id==' + theme.id ) == undefined )
				{
					unRead = true;
					break;
				}

			return unRead;
	"/>

	<check_forum_entry_access PROPERTY="1" PARAM="catForumEntryParam" PARAM="teUserParam" PARAM="iUserIDParam" PARAM="teForumParam" EXPR="
			if ( teUserParam.access.access_role == 'admin' || catForumEntryParam.user_id == iUserIDParam )
				return true;

			try
			{
				if ( teForumParam == null || teForumParam == '' )
					throw 'no_param';
			}
			catch ( err )
			{
				teForumParam = OpenDoc( UrlFromDocID( catForumEntryParam.forum_id ) ).TopElem;
			}
			return tools_web.is_moderator_forum( catForumEntryParam.forum_id, iUserIDParam, teForumParam );
	"/>

	<remove_forum_entry PROPERTY="1" PARAM="iForumEntryIDParam" EXPR="
			try
			{
				removedArray = tools.xquery( 'for $elem in forum_entrys where IsHierChild( $elem/id, ' + iForumEntryIDParam + ' ) order by $elem/Hier() return $elem/id' );
				for ( entry in removedArray )
					DeleteDoc( UrlFromDocID( entry.id ) );

				readArray = XQuery( 'for $elem in forum_theme_read_by_collaborators where $elem/forum_theme_id = ' + iForumEntryIDParam + ' return $elem' );
				for ( read in readArray )
					DeleteDoc( UrlFromDocID( read.id ), ! global_settings.settings.save_deleted_in_trash );

				DeleteDoc( UrlFromDocID( iForumEntryIDParam ) );
				return true;
			}
			catch ( err )
			{
				alert( err );
			}
			return false;
	"/>

	<close_forum_entry PROPERTY="1" PARAM="iForumEntryIDParam" EXPR="
			try
			{
				if ( docForumEntryParam == null || docForumEntryParam == '' )
					throw 'no_param';
			}
			catch ( err )
			{
				docForumEntryParam = OpenDoc( UrlFromDocID( iForumEntryIDParam ) );
			}
			try
			{
				closedArray = tools.xquery( 'for $elem in forum_entrys where IsHierChild( $elem/id, ' + iForumEntryIDParam + ' ) order by $elem/Hier() return $elem/id' );
				for ( entry in closedArray )
				{
					entryDoc = OpenDoc( UrlFromDocID( entry.id ) );
					entryDoc.TopElem.closed = true;
					entryDoc.Save();
				}
				docForumEntryParam.TopElem.closed = true;
				docForumEntryParam.Save();
				return true;
			}
			catch ( err )
			{
				alert( err );
			}
			return false;
	"/>

	<draw_calendar PROPERTY="1" CALLER-ENV="1" PARAM="_object_name" PARAM="_object_value"  PARAM="format" EXPR="
		var linkId = _object_name + '_link';
		if(format.split(' ').length > 1)
			_field_width = 90;
		else
			_field_width = 60;
		var str='&lt;a id=&quot;' + linkId + '&quot; href=&quot;javascript: CreateCalendar(\'' + linkId + '\', \'' + _object_name + '\', \'' + format + '\')&quot;&gt;
  &lt;img src=&quot;/scripts/calendar/calendar.gif&quot; width=&quot;24&quot; height=&quot;22&quot; border=&quot;0&quot;/&gt;';
		var text = '&lt;table cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; border=&quot;0&quot;&gt;&lt;tr&gt;
					&lt;td&gt;&lt;input type=&quot;test&quot; readonly=&quot;readonly&quot; name=&quot;' + _object_name + '&quot;
					id=&quot;' + _object_name + '&quot; value=&quot;' + _object_value + '&quot;
					class=&quot;inputEdit&quot; style=&quot;width:' + _field_width + '&quot;/&gt;&lt;/td&gt;&lt;td&gt;' + str + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';
		return text;
	"/>


	<web_files_process PROPERTY="1" CALLER-ENV="1" PARAM="_source_files_doc" EXPR="
			try
			{
				if ( _source_files_doc == null || _source_files_doc == '' )
					throw 'net_source';
			}
			catch ( e )
			{
				_source_files_doc = curObject.Doc;
			}

			tools_soc.obtain_files_from_request( Request, _source_files_doc );
			return;
	"/>

	<convert_xhttp_res PROPERTY="1" PARAM="_text_area"  PARAM="_source_desc" EXPR="
			if ( StrContains( _text_area, '&quot;/xhttp_res?' ) || StrContains( _text_area, '&quot;data:image/' ) || StrContains( _text_area, 'download_file.html' ) )
			{
				newHtmlStr = '';
				reader = new TagReader( _text_area );
				reader.ReadNext();
				compoundArray = [];
				arrImgData = [];
				while ( ! reader.EOF )
				{
					if ( reader.TagName == 'img' )
					{
						attr = Trim( reader.GetAttr( 'src' ) );
						if ( attr != '' )
						{
							if ( StrBegins( attr, '/xhttp_res?' ) )
							{
								_url_query = UrlQuery( attr );
								reader.SetAttr( 'src', _url_query.res_id );
								compoundArray.push( _url_query.res_id );
							}
							else if ( StrBegins( attr, 'data:image/' ) )
							{
								iIndex = attr.indexOf( ';base64,' );
								if ( iIndex &gt; 0 )
								{
									sType = StrRangePos( attr, 11, iIndex );
									sData = StrRightRangePos( attr, iIndex + 8 );
									sImgName = tools.random_string( 6 ) + '.' + sType;
									arrImgData.push( '&lt;compound-attc path=&quot;' + sImgName + '&quot; data=&quot;' + sData + '&quot;/&gt;' );
									reader.SetAttr( 'src', sImgName );
								}
							}
							else if ( StrContains( attr, 'download_file.html' ) )
							{
								oUrlQuery = UrlQuery( attr );
								iFileID = OptInt( oUrlQuery.GetOptProperty( 'file_id' ) );
								if( iFileID != undefined )
								{
									docResource = tools.open_doc( iFileID );
									if( docResource != undefined )
									{

										sTempUrl = ObtainTempFile( docResource.TopElem.file_name );
										docResource.TopElem.get_data( sTempUrl );
										sData = Base64Encode( LoadUrlData( sTempUrl ) );
										sImgName = tools.random_string( 6 ) + UrlPathSuffix( docResource.TopElem.file_name );
										arrImgData.push( '&lt;compound-attc path=&quot;' + sImgName + '&quot; data=&quot;' + sData + '&quot;/&gt;' );
										reader.SetAttr( 'src', sImgName );
									}
								}
							}
						}
					}

					newHtmlStr += reader.GetTagStr();
					reader.ReadNext();
				}
				for ( sImdDataElem in arrImgData )
				{
					newHtmlStr += sImdDataElem;
				}
				if ( ArrayCount( compoundArray ) != 0 )
				{
					reader = new TagReader( _source_desc );
					reader.ReadNext();
					while ( reader.SkipToTag( 'compound-attc', '', true ) )
					{
						if ( ArrayOptFind( compoundArray, 'This==' + CodeLiteral( reader.GetAttr( 'path' ) ) ) != undefined )
							newHtmlStr += reader.GetTagStr();

						reader.ReadNext();
					}
				}
				return newHtmlStr;
			}
			return _text_area;
	"/>

	<get_my_person_object_link_card PROPERTY="1" PARAM="CATALOG" PARAM="USER_ID" PARAM="DOC_HIMSELF" PARAM="MAKE_NEW_ON_ABSENCE" EXPR="
			try {__catalog = String(CATALOG);} catch(_x_) {return undefined;}
			try {_user_id = Int(USER_ID);} catch(_x_) {return undefined;}
			if (common.exchange_object_types.GetOptChildByKey(__catalog) == undefined) return undefined;
			_card = ArrayOptFirstElem(XQuery('for $elem in person_object_links where $elem/person_id = ' + XQueryLiteral(USER_ID) + ' and $elem/object_catalog = ' + XQueryLiteral(__catalog) +' return $elem/Fields(\'id\')'));

			try{MAKE_NEW_ON_ABSENCE = (MAKE_NEW_ON_ABSENCE == true);} catch(_x_) {MAKE_NEW_ON_ABSENCE = false;}

			if (_card != undefined || MAKE_NEW_ON_ABSENCE)
			{
				try{DOC_HIMSELF = (DOC_HIMSELF == true);} catch(_x_) {DOC_HIMSELF = false;}
				if (_card == undefined)
				{
					_catUser = ArrayOptFirstElem(XQuery('for $elem in collaborators where $elem/id = ' + XQueryLiteral(USER_ID) + ' return $elem/Fields(\'id\',\'fullname\')'));
					if (_catUser == undefined)
						return undefined;
					_docCard = OpenNewDoc('x-local://wtv/wtv_person_object_link.xmd');
					_docCard.BindToDb(DefaultDb);

					_docCard.TopElem.person_id = _catUser.PrimaryKey;
					_docCard.TopElem.person_fullname = _catUser.fullname;
					_docCard.TopElem.object_catalog = CATALOG;

					if (!DOC_HIMSELF)
						_docCard.Save();
				}
				else
					_docCard = OpenDoc(UrlFromDocID(_card.PrimaryKey));

				if (DOC_HIMSELF)
					return _docCard;
				else
					return _docCard.TopElem;
			}
			else
				return undefined;
	"/>

	<get_person_object_info PROPERTY="1" PARAM="sCatalogPARAM" PARAM="iUserIDPARAM" PARAM="teUserPARAM" EXPR="
			try
			{
				if (teUserPARAM.Name != 'collaborator')
					throw 'Not a person';
			}
			catch(_X_)
			{
				teUserPARAM = OpenDoc(UrlFromDocID(iUserIDPARAM)).TopElem;
			}

			var oAccess = ({'can_create': false, 'can_edit': false, 'can_delete': false, 'max_amount': null, 'max_total_size': null, 'max_object_size' : null});

			var aObjects = Array();
			var fldCatalogPart, teProfile, catProfileElem, xarrProfiles = ArraySelect(QueryCatalogByKeys('person_object_profiles', 'id', ArrayExtract(teUserPARAM.person_object_profiles, 'This.PrimaryKey')), 'ArrayOptFind(This.object_catalog, &quot;This.Value == \'' +sCatalogPARAM+ '\'&quot;) != undefined');
			for (catProfileElem in xarrProfiles)
			{
				teProfile = OpenDoc(UrlFromDocID(catProfileElem.PrimaryKey)).TopElem;
				fldCatalogPart = ArrayOptFind(teProfile.person_object_links, 'This.PrimaryKey == ' + CodeLiteral(sCatalogPARAM));
				if (fldCatalogPart != undefined)
				{
					oAccess.can_create = fldCatalogPart.all_can_create.Value;
					oAccess.can_edit = fldCatalogPart.all_can_edit.Value;
					oAccess.can_delete = fldCatalogPart.all_can_delete.Value;
					if (fldCatalogPart.max_amount.HasValue)
						oAccess.max_amount = fldCatalogPart.max_amount.Value;
					if (fldCatalogPart.max_total_size.HasValue)
						oAccess.max_total_size = fldCatalogPart.max_total_size.Value;
					if (fldCatalogPart.max_object_size.HasValue)
						oAccess.max_object_size = fldCatalogPart.max_object_size.Value;

					aObjects = ArrayUnion(fldCatalogPart.objects, aObjects);
				}
			}

			var tePersonObjectLink, catPersonObjectLink = ArrayOptFirstElem(tools.xquery('for $elem in person_object_links where $elem/person_id = ' + iUserIDPARAM + ' and $elem/object_catalog = ' + XQueryLiteral(sCatalogPARAM) +' return $elem/id,$elem/__data'));
			if (catPersonObjectLink != undefined)
			{
				tePersonObjectLink = OpenDoc(UrlFromDocID(catPersonObjectLink.PrimaryKey)).TopElem;
				oAccess.can_create = tePersonObjectLink.all_can_create.Value;
				oAccess.can_edit = tePersonObjectLink.all_can_edit.Value;
				oAccess.can_delete = tePersonObjectLink.all_can_delete.Value;
				aObjects = ArrayUnion(tePersonObjectLink.objects, aObjects);
			}

			oAccess.objects = ArrayExtract(ArraySelectDistinct(aObjects, 'This.PrimaryKey'), '({&quot;object_id&quot;: This.object_id, &quot;can_edit&quot;: This.can_edit, &quot;can_delete&quot;: This.can_delete})');

			return oAccess;
	"/>

	<set_person_object_info PROPERTY="1" PARAM="sCatalogPARAM" PARAM="iUserIDPARAM" PARAM="teUserPARAM" PARAM="aObjectsMetaPARAM" EXPR="
			var docPersonObjectLink, catPersonObjectLink = ArrayOptFirstElem(tools.xquery('for $elem in person_object_links where $elem/person_id = ' + iUserIDPARAM + ' and $elem/object_catalog = ' + XQueryLiteral(sCatalogPARAM) +' return $elem/id,$elem/__data'));

			if (catPersonObjectLink != undefined)
				docPersonObjectLink = OpenDoc(UrlFromDocID(catPersonObjectLink.id));
			else
			{
				try
				{
					teUserPARAM.fullname;
				}
				catch(_X_)
				{
					teUserPARAM = OpenDoc(UrlFromDocID(iUserIDPARAM)).TopElem;
				}
				docPersonObjectLink = OpenNewDoc('x-local://wtv/wtv_person_object_link.xmd');
				docPersonObjectLink.TopElem.person_id = iUserIDPARAM;
				docPersonObjectLink.TopElem.person_fullname = teUserPARAM.fullname;

				docPersonObjectLink.TopElem.object_catalog = sCatalogPARAM;

				docPersonObjectLink.BindToDb(DefaultDb);


				tools.set_default_content(docPersonObjectLink.TopElem, teUserPARAM);

			}
			var oObjectMetaElem, fldObject, catObject;
			for (oObjectMetaElem in aObjectsMetaPARAM)
			{
				fldObject = docPersonObjectLink.TopElem.objects.ObtainChildByKey(oObjectMetaElem.id);
				if (oObjectMetaElem.GetOptProperty('delete') == true)
				{
					fldObject.Delete();
				}
				else
				{
					if (oObjectMetaElem.HasProperty('name'))
						fldObject.object_name = oObjectMetaElem.name;
					else
					{
						catObject = ArrayOptFirstElem(XQuery('for $elem in ' + sCatalogPARAM + 's where $elem/id = ' + XQueryLiteral(oObjectMetaElem.id) + ' return $elem/Fields(\'name\')'));
						if (catObject != undefined)
							fldObject.object_name = catObject.name;
						else
							fldObject.object_name = '???';
					}
					if (oObjectMetaElem.HasProperty('can_edit'))
						fldObject.can_edit = (oObjectMetaElem.can_edit == true);
					if (oObjectMetaElem.HasProperty('can_delete'))
						fldObject.can_delete = (oObjectMetaElem.can_delete == true);
				}
			}

			docPersonObjectLink.Save();
	"/>

	<get_object_owners PROPERTY="1" PARAM="iObjectIDPARAM" PARAM="sCatalog" EXPR="
			var catEntry, aLinksEntryList = XQuery(&quot;for $elem in person_object_link_objects where $elem/object_id = &quot; + iObjectIDPARAM + &quot; and $elem/person_object_type = 'person_object_link' return $elem&quot;);

			var oEntry, aReturnInfo = Array();
			for (catEntry in aLinksEntryList)
			{
				oEntry = ({'person_id': catEntry.person_id.Value, 'can_edit' : catEntry.can_edit.Value, 'can_delete': catEntry.can_delete.Value});
				aReturnInfo.push(oEntry);
			}

			aLinksEntryList = XQuery('for $elem in person_object_links where $elem/object_catalog = ' + XQueryLiteral(sCatalog) + ' and ($elem/all_can_edit = true() or $elem/all_can_delete = true()) return $elem')
			for (catEntry in aLinksEntryList)
			{
				oEntry = ArrayOptFind(aReturnInfo, 'This.person_id == ' + XQueryLiteral(catEntry.person_id));
				if (oEntry == undefined)
				{
					oEntry = ({'person_id': catEntry.person_id.Value, 'can_edit': false, 'can_delete': false});
					aReturnInfo.push(oEntry);
				}
				oEntry.can_edit = (oEntry.can_edit || catEntry.all_can_edit.Value);
				oEntry.can_delete = (oEntry.can_delete || catEntry.all_can_delete.Value);
			}

			var xarrPeople, oObjectRights, fldPOLDesc, aProfilesEntryList = XQuery('for $elem in person_object_profiles where MatchSome($elem/object_catalog, ( ' +XQueryLiteral(sCatalog)+ ' )) return $elem');

			for (catProfile in aProfilesEntryList)
			{
				fldPOLDesc = OpenDoc(UrlFromDocID(catProfile.PrimaryKey)).TopElem.person_object_links.GetOptChildByKey(sCatalog);
				if (fldPOLDesc != undefined)
				{
					oObjectRights = ({'can_edit': fldPOLDesc.all_can_edit.Value, 'can_delete': fldPOLDesc.all_can_delete.Value});
					oEntry = fldPOLDesc.objects.GetOptChildByKey(iObjectIDPARAM);
					if (oEntry != undefined)
					{
						oObjectRights.can_edit = (oEntry.can_edit.Value || oObjectRights.can_edit);
						oObjectRights.can_delete = (oEntry.can_delete.Value || oObjectRights.can_delete);
					}
					xarrPeople = XQuery('for $elem in collaborators where MatchSome($elem/person_object_profile_id, ( ' +XQueryLiteral(catProfile.PrimaryKey)+ ' )) return $elem');

					for (catEntry in xarrPeople)
					{
						oEntry = ArrayOptFind(aReturnInfo, 'This.person_id == ' + XQueryLiteral(catEntry.PrimaryKey));
						if (oEntry == undefined)
						{
							oEntry = ({'person_id': catEntry.PrimaryKey.Value, 'can_edit': false, 'can_delete': false});
							aReturnInfo.push(oEntry);
						}
						oEntry.can_edit = (oEntry.can_edit || oObjectRights.can_edit);
						oEntry.can_delete = (oEntry.can_delete || oObjectRights.can_delete);

					}
				}
			}

			return aReturnInfo;
	"/>


	<insert_custom_code PROPERTY="1" PARAM="iCustomWebTemplateID_PARAM" PARAM="teCustomWebTemplate_PARAM" PARAM="bEval_PARAM" PARAM="bNaked_PARAM" PARAM="iDepth_PARAM" PARAM="aOfFldNativeParamsArr_PARAM" PARAM="bExternalEnvelope_PARAM" CALLER-ENV="1" EXPR="
		/*
			iCustomWebTemplateID_PARAM - ID или code настраиваемого шаблона
			teCustomWebTemplate_PARAM - TopElem настраиваемого шаблона (опционально)
			bEval_PARAM[true] - ДА: вычислять шаблон. НЕТ: вернуть содержимое как есть.
			bNaked_PARAM[false] - НЕТ: шаблон предполагает использование ASP вставок. ДА: шаблон с чистым BScript
			iDepth_PARAM[0] - всегда нужно передавать 0. Всегда.
			aOfFldNativeParamsArr_PARAM[null] - массив параметров, которые сольются с параметрами шаблона
			bExternalEnvelope_PARAM[true] - для шаблонов типов [XAML]. ДА: возвращать код проигрывателя. НЕТ: возвращать код шаблона.
		*/

		var _sRenderedData842956, teCustomWebTemplate0666 = undefined;
		var iCustomWebTemplateID0013 = undefined;
		try
		{
			if (Trim(iCustomWebTemplateID_PARAM) == '') throw 'FRAUD!!!';
		}
		catch(_p_)
		{
			return '';
		}

		var oInsertCustomCodeParams_temp = ({
			'bEval': true,
			'bNaked': false,
			'iDepth': 0,
			'aOfFldNativeParamsArr': null,
			'bExternalEnvelope': true,
			'bNoCache': false
		});
		try
		{
			bEval_PARAM;
			try
			{
				bEval_PARAM.GetOptProperty( 'iIsObject' );
				for ( sParamNameElem_temp in bEval_PARAM )
					oInsertCustomCodeParams_temp.SetProperty( sParamNameElem_temp, bEval_PARAM.GetProperty( sParamNameElem_temp ) );
			}
			catch ( err )
			{
				oInsertCustomCodeParams_temp.bEval = bEval_PARAM != false;
				try
				{
					oInsertCustomCodeParams_temp.bNaked = bNaked_PARAM != false;
				}
				catch( err )
				{
				}
				try
				{
					oInsertCustomCodeParams_temp.iDepth = Int( iDepth_PARAM );
					if ( oInsertCustomCodeParams_temp.iDepth &lt; 0 )
						oInsertCustomCodeParams_temp.iDepth = 0;

					if ( oInsertCustomCodeParams_temp.iDepth &gt; 5 )
					{
						alert('CUSTOM WEB TEMPLATE: '+iCustomWebTemplateID0013+'. DEPTH LEVEL EXCEEDED.');
						if ( oInsertCustomCodeParams_temp.bNaked )
							return '';
						else
							return '&lt;!-- CUSTOM WEB TEMPLATE: '+iCustomWebTemplateID0013+'. DEPTH LEVEL EXCEEDED. --&gt;';
					}
				}
				catch( err )
				{
				}
				try
				{
					if ( aOfFldNativeParamsArr_PARAM != undefined )
						oInsertCustomCodeParams_temp.aOfFldNativeParamsArr = aOfFldNativeParamsArr_PARAM;
				}
				catch ( err )
				{
				}
				try
				{
					oInsertCustomCodeParams_temp.bExternalEnvelope = bExternalEnvelope_PARAM != false;
				}
				catch( err )
				{
				}
			}
		}
		catch( err )
		{
		}

		iCustomWebTemplateID0013 = OptInt(iCustomWebTemplateID_PARAM, String(iCustomWebTemplateID_PARAM));
		if (DataType(iCustomWebTemplateID0013) == 'integer')
		{
			try
			{
				teCustomWebTemplate0666 = teCustomWebTemplate_PARAM;
				teCustomWebTemplate0666.Name;
				iCustomWebTemplateID0013 = Int(iCustomWebTemplateID0013);
				if (teCustomWebTemplate0666.Name != 'custom_web_template') return alert('Invalid CUSTOM WEB TEMPLATE: '+iCustomWebTemplateID0013);
			}
			catch(_podsunuli_lazhu_)
			{
				try
				{
					iCustomWebTemplateID0013 = Int(iCustomWebTemplateID0013);
					teCustomWebTemplate0666 = undefined;
				}
				catch(_x_)
				{
				}
			}
		}
		else
		{
			try
			{
				iCustomWebTemplateID0013 = ArrayFirstElem(XQuery('for $elem in custom_web_templates where $elem/code =' + XQueryLiteral(Trim(iCustomWebTemplateID0013)) +' return $elem')).id.Value;
			}
			catch(_opyat_ne_dali_)
			{
				alert('CUSTOM WEB TEMPLATE: '+iCustomWebTemplateID0013+'. NOT FOUND.');
				if ( oInsertCustomCodeParams_temp.bNaked )
					return '';
				else
					return '&lt;!-- CUSTOM WEB TEMPLATE: '+iCustomWebTemplateID0013+'. NOT FOUND. --&gt;';
			}
		}

		try
		{
			curActiveWebTemplate;
		}
		catch ( err )
		{
//alert('INIT curActiveWebTemplate = '+iCustomWebTemplateID0013)
			curActiveWebTemplate = null;
			curActiveWebTemplateDoc = tools_web.init_cur_active_web_template( Session.GetOptProperty( 'Env' ), false );
			if ( curActiveWebTemplateDoc != null )
				curActiveWebTemplate = curActiveWebTemplateDoc.TopElem;
		}
		sTemplateCacheType = curActiveWebTemplate == null ? '' : global_settings.settings.template_cache_type.Value;

//alert('OPEN cwt = '+iCustomWebTemplateID0013)

		var temp_curTemplateSourceStackCount = 0;
		var temp_curTemplateSourceParentID = null;
		try
		{
			temp_curTemplateSourceStackCount = ArrayCount( curTemplateSourceStack ) - 1;
			temp_curTemplateSourceParentID = temp_curTemplateSourceStackCount &lt; 0 ? null : curTemplateSourceStack[ temp_curTemplateSourceStackCount ].id.Value
		}
		catch ( err )
		{
		}
		var temp_sProfilingRecordID = tools_web.start_profiling_record( {
				'template_id': iCustomWebTemplateID0013,
				'parent_template_id': temp_curTemplateSourceParentID
			} );
		function return_res( sRes, sProfilingRecordID )
		{
			tools_web.finish_profiling_record( sProfilingRecordID );
			return sRes;
		}

		var oCachTemplate = undefined;
		var fldCustomWebTemplate_temp = null;
		var bSaved_temp = false;
		var bNotSaved_temp = false;
		var bIsWebPage = ! oInsertCustomCodeParams_temp.bNaked &amp;&amp; oInsertCustomCodeParams_temp.bEval;
		var oTemplateSource_temp = undefined;
		switch ( sTemplateCacheType )
		{
			case 'object':
			case 'object_placeholder':
				if ( oInsertCustomCodeParams_temp.bNoCache )
				{
//alert('bNoCache = TRUE !!!');
					if ( teCustomWebTemplate0666 == undefined )
						teCustomWebTemplate0666 = OpenDoc( UrlFromDocID( iCustomWebTemplateID0013 ) ).TopElem;
					oTemplateSource_temp = teCustomWebTemplate0666;
				}
				else
				{
					fldCustomWebTemplate_temp = curActiveWebTemplate.custom_web_templates.GetOptChildByKey( iCustomWebTemplateID0013 );
					if ( fldCustomWebTemplate_temp == undefined )
					{
//alert('ADD cwt');
						if ( teCustomWebTemplate0666 == undefined )
							teCustomWebTemplate0666 = OpenDoc( UrlFromDocID( iCustomWebTemplateID0013 ) ).TopElem;

						fldCustomWebTemplate_temp = curActiveWebTemplate.custom_web_templates.AddChild();
						fldCustomWebTemplate_temp.custom_web_template_id = iCustomWebTemplateID0013;
						tools.assign_elems( fldCustomWebTemplate_temp, teCustomWebTemplate0666, ['use_session_cache','out_type','cwt_type','zones'] );
						tools_web.set_web_params( fldCustomWebTemplate_temp.wvars, teCustomWebTemplate0666.wvars, false );
					}
					bSaved_temp = fldCustomWebTemplate_temp.saved.Value;
					bNotSaved_temp = ! bSaved_temp;
					if ( bNotSaved_temp &amp;&amp; teCustomWebTemplate0666 == undefined )
						teCustomWebTemplate0666 = OpenDoc( UrlFromDocID( iCustomWebTemplateID0013 ) ).TopElem;

					oTemplateSource_temp = fldCustomWebTemplate_temp;
				}
				break;

			default:
				if ( teCustomWebTemplate0666 == undefined )
				{
					teCustomWebTemplate0666 = OpenDoc( UrlFromDocID( iCustomWebTemplateID0013 ) ).TopElem;
				}
				oTemplateSource_temp = teCustomWebTemplate0666;
				break;
		}
/*
		if ( sTemplateCacheType == 'object_placeholder' &amp;&amp; bNotSaved_temp &amp;&amp; oTemplateSource_temp.cwt_type == 'placeholder' )
			tools_web.get_override_web_templates( Session, ArrayExtract( teCustomWebTemplate0666.zones, 'name' ), curActiveWebTemplate, true );
*/
		curTemplateSource = oTemplateSource_temp;
		try
		{
			curTemplateSourceStack.push( curTemplateSource );
		}
		catch ( err )
		{
		}
		function template_source_pop()
		{
			try
			{
				curTemplateSourceStackCount = ArrayCount( curTemplateSourceStack ) - 1;
				if ( curTemplateSourceStackCount &gt; 0 )
				{
					curTemplateSource = curTemplateSourceStack[ curTemplateSourceStackCount - 1 ];
					curTemplateSourceStack = ArrayRange( curTemplateSourceStack, 0, curTemplateSourceStackCount );
				}
				else if ( curTemplateSourceStackCount &lt;= 0 )
				{
					curTemplateSource = null;
					curTemplateSourceStack = [];
				}
			}
			catch ( err )
			{
			}
		}
		function template_source_get_web_page()
		{
			_sRenderedData842956 = '';
			var sTemplateUrl_temp = StrBegins( teCustomWebTemplate0666.url, '//' ) || StrBegins( teCustomWebTemplate0666.url, 'x-local://' ) ? teCustomWebTemplate0666.url.Value : UrlAppendPath( global_settings.web_path, teCustomWebTemplate0666.url );
			if ( teCustomWebTemplate0666.url.HasValue &amp;&amp; bIsWebPage )
			{
				if ( bNotSaved_temp )
				{
//alert('teCustomWebTemplate0666.url.Value = '+teCustomWebTemplate0666.url.Value)
					fldCustomWebTemplate_temp.web_page = _sRenderedData842956 = LoadUrlText( sTemplateUrl_temp );
					fldCustomWebTemplate_temp.saved = true;
				}
			}
			else
			{
				var _includeCWT;
				if ( oInsertCustomCodeParams_temp.bNaked )
				{
					_sRenderedData842956 += tools.wvars_to_script( aParamsZ1313, true );
				}
				else
				{
					_sRenderedData842956 += '&lt;% ' + tools.wvars_to_script( aParamsZ1313, true ) + '%&gt;';
				}

				for ( _includeCWT in teCustomWebTemplate0666.include_custom_web_templates )
				{
					_sRenderedData842956 += tools_web.insert_custom_code( _includeCWT.PrimaryKey, null, false, oInsertCustomCodeParams_temp.bNaked, oInsertCustomCodeParams_temp.iDepth, aParamsZ1313 );
				}

				if ( teCustomWebTemplate0666.url.HasValue )
				{
					_sRenderedData842956 += LoadUrlText( sTemplateUrl_temp );
				}
				else
				{
					_sRenderedData842956 += teCustomWebTemplate0666.html.Value;
				}

				if ( bNotSaved_temp )
				{
					fldCustomWebTemplate_temp.web_page = _sRenderedData842956;
					fldCustomWebTemplate_temp.saved = true;
				}
			}
			return _sRenderedData842956;
		}

		aParamsZ1313 = oTemplateSource_temp.wvars;
		if ( oTemplateSource_temp.out_type == 'xaml' &amp;&amp; oInsertCustomCodeParams_temp.bExternalEnvelope )
		{
			try
			{
				curUserID;
			}
			catch(_X_)
			{
				curUserID = null;
			}
			try
			{
				curWebDesign;
			}
			catch(_X_)
			{
				curWebDesign = null;
			}
			try
			{
				Request;
			}
			catch(_X_)
			{
				Request = null;
			}
			try
			{
				curOverrideWebTemplateID;
			}
			catch(_X_)
			{
				curOverrideWebTemplateID = null;
			}

			if ( bNotSaved_temp )
			{
//alert( 'XAML WEB PAGE = ' + iCustomWebTemplateID0013 );
				template_source_get_web_page();
			}

			return return_res( tools_web.place_xaml_player(iCustomWebTemplateID0013, curWebDesign, Request, ({'bHardSource': (global_settings.settings.external_web_players.ext_hardcore_source.Value), 'bXLiteDataGrid': (global_settings.settings.external_web_players.ext_x_lite_grid.Value), 'iParentTemplateID': curOverrideWebTemplateID})), temp_sProfilingRecordID );
		}
//alert('bSaved_temp = '+bSaved_temp)

		if ( oInsertCustomCodeParams_temp.aOfFldNativeParamsArr != null )
			aParamsZ1313 = ArraySelectDistinct( ArrayUnion( oInsertCustomCodeParams_temp.aOfFldNativeParamsArr, aParamsZ1313 ), 'name' );

		if ( bIsWebPage )
		{
			try
			{
				if ( curParams == undefined )
					throw 'no_data';
			}
			catch ( err )
			{
				curParams = new SafeObject;
			}
			tools_web.set_web_params( curParams, aParamsZ1313, false );
			if ( bSaved_temp &amp;&amp; fldCustomWebTemplate_temp.use_session_cache )
				return return_res( fldCustomWebTemplate_temp.html, temp_sProfilingRecordID );
		}

		if ( bSaved_temp )
		{
//alert('SAVED return = '+fldCustomWebTemplate_temp.PrimaryKey)
			if ( oInsertCustomCodeParams_temp.bEval )
			{
				if ( oInsertCustomCodeParams_temp.bNaked )
					_sRenderedData842956 = eval( fldCustomWebTemplate_temp.web_page );
				else
					_sRenderedData842956 = EvalCodePage( fldCustomWebTemplate_temp.web_page );
			}
			else
			{
				_sRenderedData842956 = fldCustomWebTemplate_temp.web_page;
			}
			template_source_pop();
			return return_res( _sRenderedData842956, temp_sProfilingRecordID );
		}


		_sRenderedData842956 = template_source_get_web_page();
		if ( teCustomWebTemplate0666.url.HasValue &amp;&amp; bIsWebPage )
		{
			if ( bNotSaved_temp )
			{
//alert('teCustomWebTemplate0666.url.Value = '+teCustomWebTemplate0666.url.Value)
				_sRenderedData842956 = EvalCodePage( _sRenderedData842956 );
				curActiveWebTemplate.counter_saved_return++;
			}
			else
			{
				var sTemplateUrl_temp = StrBegins( teCustomWebTemplate0666.url, '//' ) || StrBegins( teCustomWebTemplate0666.url, 'x-local://' ) ? teCustomWebTemplate0666.url.Value : UrlAppendPath( global_settings.web_path, teCustomWebTemplate0666.url );
				_sRenderedData842956 = EvalCodePageUrl( sTemplateUrl_temp );
			}
		}
		else
		{
			if ( oInsertCustomCodeParams_temp.bEval )
			{
				if ( oInsertCustomCodeParams_temp.bNaked )
					_sRenderedData842956 = eval( _sRenderedData842956 );
				else
					_sRenderedData842956 = EvalCodePage( _sRenderedData842956 );
			}
			if ( curActiveWebTemplate != null )
				curActiveWebTemplate.counter_saved_return++;
		}
		template_source_pop();

		if ( bNotSaved_temp )
		{
			if ( fldCustomWebTemplate_temp.use_session_cache )
				fldCustomWebTemplate_temp.html = bIsWebPage ? _sRenderedData842956 : EvalCodePage( fldCustomWebTemplate_temp.web_page );
		}
		else if ( oCachTemplate != undefined &amp;&amp; teCustomWebTemplate0666.use_session_cache )
		{
			oCachTemplate.html = bIsWebPage ? _sRenderedData842956 : EvalCodePage( _sRenderedData842956 );
		}

		return return_res( _sRenderedData842956, temp_sProfilingRecordID );
	"/>
	<place_xaml PROPERTY="1" CALLER-ENV="1" PARAM="iCustomWebTemplateID_PARAM" PARAM="teCWebTemplate_PARAM" PARAM="oPlaceXamlParams_PARAM" EXPR="
		try
		{
			teCWebTemplate_PARAM_temp = teCWebTemplate_PARAM;
		}
		catch( err )
		{
			teCWebTemplate_PARAM_temp = null;
		}
		try
		{
			oPlaceXamlParams_PARAM;
		}
		catch( err )
		{
			oPlaceXamlParams_PARAM = new Object;
		}
		return tools_web.insert_custom_code( iCustomWebTemplateID_PARAM, teCWebTemplate_PARAM_temp, { 'bExternalEnvelope': false, 'bNoCache': oPlaceXamlParams_PARAM.GetOptProperty( 'bNoCache', false ) } );
	"/>

	<place_xaml_player PROPERTY="1" PARAM="iCustomWebTemplatePARAM" PARAM="curWebDesignPARAM" PARAM="Request" PARAM="oPlaceXamlParams_PARAM" EXPR="
			try
			{
				oPlaceXamlParams_PARAM;
			}
			catch( err )
			{
				oPlaceXamlParams_PARAM = new Object;
			}
			var _fldPlayer = null;
			var CCSS_URL = null;
			if (curWebDesignPARAM != null)
			{
				try
				{
					if (curWebDesignPARAM.xaml_interpreter_css_template_id.HasValue)
						CCSS_URL = tools_web.get_object_source_url( 'custom_web_template', curWebDesignPARAM.xaml_interpreter_css_template_id );

					_fldPlayer = common.xaml_interpreters.GetChildByKey(curWebDesignPARAM.xaml_interpreter_id.Value);
				}
				catch(_X_)
				{}
			}

			if (_fldPlayer == null)
				_fldPlayer = ArrayFirstElem(common.xaml_interpreters);

			var NO_CACHE = oPlaceXamlParams_PARAM.GetOptProperty( 'bNoCache', false ) == true;
			var IS_HARDCORE_SOURCE = oPlaceXamlParams_PARAM.GetOptProperty( 'bHardSource', false ) == true;
			var X_LITE_DATAGRID = oPlaceXamlParams_PARAM.GetOptProperty( 'bXLiteDataGrid', false ) == true;
			var XAML_TEMPLATE_ID = OptInt(iCustomWebTemplatePARAM);
			var PARENT_TEMPLATE_ID = OptInt( oPlaceXamlParams_PARAM.GetOptProperty( 'iParentTemplateID' ), null );
			var PLAYER_ID = _fldPlayer.id.Value;
			return EvalCodePageUrl(_fldPlayer.url.Value);
	"/>

	<convert_xss PROPERTY="1" PARAM="sTextParam" PARAM="sTypeParam" EXPR="

			arrReplace = [
				'&amp;#10;', '\n',
				'\&\amp;ndash;', '&amp;ndash;',
				'\&\amp;laquo;', '&amp;laquo;',
				'\&\amp;raquo;', '&amp;raquo;'
			];
			sRes = XmlAttrEncode( sTextParam );
			for ( i=0; i &lt; ArrayCount( arrReplace ); i += 2 )
				sRes = StrReplace( sRes, arrReplace[ i ], arrReplace[ i + 1 ] );

			return sRes;

/*			commented 181005 due to blog html conversion error
			iLastIndex = 0;
			sTextParam = String( sTextParam );
			iIndex = sTextParam.indexOf( '&lt;script' );
			if ( iIndex == 0-1 )
				return sTextParam;

			oText = new BufStream;
			oText.PrepareWriteSpace( StrLen( sTextParam ) );
			do
			{
				oText.WriteStr( StrRangePos( sTextParam, iLastIndex, iIndex ) );
				oText.WriteStr( '&amp;lt;' );
				iLastIndex = iIndex + 1;
				iIndex = sTextParam.indexOf( '&lt;script', iLastIndex );
			} while ( iIndex != 0-1 );

			oText.WriteStr( StrRangePos( sTextParam, iLastIndex, StrLen( sTextParam ) ) );
			return oText.DetachStr(); */
	"/>


	<reg_exp_init PROPERTY="1" EXPR="
			var oLib = tools.get_object_assembly( 'RegExp' );
			oLib.Global = true;
			oLib.IgnoreCase = true;
			oLib.MultiLine = true;
			return oLib;
	"/>


	<convert_bbcode_to_html ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="sMessageSource" PARAM="objRegExp" EXPR="
			if ( sMessageSource == '' )
				return '';

			try
			{
				objRegExp.Pattern;
			}
			catch ( err )
			{
				objRegExp = tools_web.reg_exp_init();
			}

			objRegExp.Pattern = '\\[indent\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '<p>');
			objRegExp.Pattern = '\\[/indent\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '</p>');
			objRegExp.Pattern = '\\[b\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '<b>');
			objRegExp.Pattern = '\\[/b\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '</b>');
			objRegExp.Pattern = '\\[i\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '<i>');
			objRegExp.Pattern = '\\[/i\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '</i>');
			objRegExp.Pattern = '\\[u\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '<span style=&quot;text-decoration: underline;&quot;>');
			objRegExp.Pattern = '\\[/u\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '</span>');
			objRegExp.Pattern = '\\[s\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '<span style=&quot;text-decoration: line-through;&quot;>');
			objRegExp.Pattern = '\\[/s\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '</span>');
			objRegExp.Pattern = '(\\[quote\\])';
			sMessageSource = objRegExp.Replace(sMessageSource, '<blockquote>');
			objRegExp.Pattern = '(\\[/quote\\])';
			sMessageSource = objRegExp.Replace(sMessageSource, '</blockquote>');
			objRegExp.Pattern = '\\[code\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '<code>');
			objRegExp.Pattern = '\\[/code\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '</code>');
			var aParts;
			if(StrContains(sMessageSource, '[list=')) // ordered lists processing - before unordered
			{
				aParts = sMessageSource.split('[list=');
				var iIdx = 1;
				var sStart = 1;
				var iIndex = -1;
				for(iIdx=1; iIdx &lt; aParts.length; iIdx++)
				{
					iIndex = aParts[iIdx].indexOf(']');
					if(iIndex!=-1)
					{
						sStart = StrLeftRange(aParts[iIdx], iIndex);
						aParts[iIdx] = '<ol start=&quot;' + sStart + '&quot;>' + StrRightRangePos(aParts[iIdx], iIndex+1);
						aParts[iIdx] = StrReplaceOne(aParts[iIdx], '[/list]', '</ol>');
					}
					else
					{
						aParts[iIdx] = '[list=' + aParts[iIdx];
					}
				}
				sMessageSource = aParts.join('');
			}
			objRegExp.Pattern = '\\[list\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '<ul>');
			objRegExp.Pattern = '\\[/list\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '</ul>');
			objRegExp.Pattern = '\\[\\*\\](.*?)(\\n|\\r\\n?)';
			sMessageSource = objRegExp.Replace(sMessageSource, '<li>$1</li>');

			objRegExp.Pattern = '\\[size=\\s*([0-9]*px|[0-9]*pt|[0-9]*%)\\s*\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '<span style=&quot;font-size: $1;&quot;>');
			objRegExp.Pattern = '\\[size=\\s*([0-9]*)s*\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '<span style=&quot;font-size: $1%;&quot;>');
			objRegExp.Pattern = '\\[/size\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '</span>');

			objRegExp.Pattern = '\\[color=(.*?)\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '<span style=&quot;color: $1;&quot;>');
			objRegExp.Pattern = '\\[/color\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '</span>');

/*CONT*/	objRegExp.Pattern = '\\[url\\]([А-Яа-я\\-%:/\\\\\\w\\.?&amp;=@;]*?)\\[/url\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '<a href=&quot;$1&quot;>$1</a>');
/*CONT*/	objRegExp.Pattern = '\\[url=([А-Яа-я\\-%:/\\\\\\w\\.?&amp;=@;]*?)\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '<a href=&quot;$1&quot;>');
/*CONT*/	objRegExp.Pattern = '\\[/url\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '</a>');

/*CONT*/	objRegExp.Pattern = '\\[img\\]([А-Яа-я\\-%:/\\\\\\w\\.?&amp;=@;]*?)\\[/img\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '<img src=&quot;$1&quot; alt=&quot;&quot;/>');

			objRegExp.Pattern = '\\[img\\](data:.+)\\[/img\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '<img src=&quot;$1&quot; alt=&quot;&quot;/>');

			aParts = sMessageSource.split('&lt;compound-attc');
			var aChunks;
			for(i=0; i&lt;aParts.length; i++)
			{
				if(i%2==0) continue;
				aChunks = aParts[i].split('&gt;');
				objRegExp.Pattern = '\r\n';
				aChunks[0] = objRegExp.Replace(aChunks[0], '');
				objRegExp.Pattern = '\n';
				aChunks[0] = objRegExp.Replace(aChunks[0], '');
				objRegExp.Pattern = '\r';
				aChunks[0] = objRegExp.Replace(aChunks[0], '');
				objRegExp.Pattern = '\&\#13\;\&\#10\;';
				aChunks[0] = objRegExp.Replace(aChunks[0], '');
				objRegExp.Pattern = '\&\#10\;';
				aChunks[0] = objRegExp.Replace(aChunks[0], '');
				objRegExp.Pattern = '\&\#13\;';
				aChunks[0] = objRegExp.Replace(aChunks[0], '');
				aParts[i] = aChunks.join('&gt;');
			}
			sMessageSource = aParts.join('&lt;compound-attc');

			objRegExp.Pattern = '\r\n';
			sMessageSource = objRegExp.Replace(sMessageSource, '<br/>');
			objRegExp.Pattern = '\n';
			sMessageSource = objRegExp.Replace(sMessageSource, '<br/>');
			objRegExp.Pattern = '\r';
			sMessageSource = objRegExp.Replace(sMessageSource, '<br/>');
			objRegExp.Pattern = '\&\#13\;\&\#10\;';
			sMessageSource = objRegExp.Replace(sMessageSource, '<br/>');
			objRegExp.Pattern = '\&\#10\;';
			sMessageSource = objRegExp.Replace(sMessageSource, '<br/>');
			objRegExp.Pattern = '\&\#13\;';
			sMessageSource = objRegExp.Replace(sMessageSource, '<br/>');

			return sMessageSource;
	"/>
	<convert_html_to_bbcode ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PROPERTY="1" PARAM="sMessageSource" PARAM="objRegExp" EXPR="
			if ( sMessageSource == '' )
				return '';

			try
			{
				objRegExp.Pattern;
			}
			catch ( err )
			{
				objRegExp = tools_web.reg_exp_init();
			}

			objRegExp.Pattern = '<b>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[b]');
			objRegExp.Pattern = '<b [^>]*>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[b]');
			objRegExp.Pattern = '</b>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[/b]');
			objRegExp.Pattern = '<p>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[indent]');
			objRegExp.Pattern = '<p [^>]*>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[indent]');
			objRegExp.Pattern = '</p>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[/indent]');
			objRegExp.Pattern = '<strong>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[b]');
			objRegExp.Pattern = '<strong [^>]*>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[b]');
			objRegExp.Pattern = '</strong>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[/b]');

			objRegExp.Pattern = '<i>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[i]');
			objRegExp.Pattern = '<i [^>]*>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[i]');
			objRegExp.Pattern = '</i>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[/i]');
			objRegExp.Pattern = '<em>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[i]');
			objRegExp.Pattern = '<em [^>]*>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[i]');
			objRegExp.Pattern = '</em>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[/i]');

			objRegExp.Pattern = '<u>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[i]');
			objRegExp.Pattern = '<u [^>]*>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[i]');
			objRegExp.Pattern = '</u>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[/i]');

			objRegExp.Pattern = '<blockquote>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[quote]');
			objRegExp.Pattern = '</blockquote>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[/quote]');

			objRegExp.Pattern = '<code>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[code]');
			objRegExp.Pattern = '</code>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[/code]');
			objRegExp.Pattern = '<pre>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[code]');
			objRegExp.Pattern = '</pre>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[/code]');

			objRegExp.Pattern = '<ol start=&quot;(.*?)&quot;>(.*?)</ol>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[list=$1]$2[/list]');
			objRegExp.Pattern = '<ol>(.*?)</ol>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[list=1]$1[/list]');

			objRegExp.Pattern = '<ul>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[list]');
			objRegExp.Pattern = '</ul>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[/list]');
			objRegExp.Pattern = '<li>(.*?)</li>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[*]$1\n');

			objRegExp.Pattern = '<a href=&quot;(.*?)&quot;>(.*?)</a>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[url=$1]$2[/url]');
			objRegExp.Pattern = '<img src=&quot;(.*?)&quot; alt=&quot;&quot;/>';
			sMessageSource = objRegExp.Replace(sMessageSource, '[img]$1[/img]');

			objRegExp.Pattern = '<span style=&quot;text-decoration: underline;&quot;>(.*?)</span>';

// clean up span intersections/recursions
			if(StrContains(sMessageSource,'<span ', true))
			{
				iRepeat = 20;
				while(iRepeat>0 && StrContains(sMessageSource,'<span ', true))
				{
					bStartSpan = (sMessageSource.indexOf('<span ')==0);
					aParts = sMessageSource.split('<span ');
					for(i=0; i<aParts.length; i++)
					{
						if(aParts[i].indexOf('</span>')!=-1)
						{
							aChunks = aParts[i].split('</span>');
							if(aChunks.length>=2)
							{
								sString = '<span ' + aParts[i];
						objRegExp.Pattern = '<span style=&quot;text-decoration: underline;&quot;>(.*?)</span>';
						sString = objRegExp.Replace(sString, '[u]$1[/u]');
						objRegExp.Pattern = '<span style=&quot;text-decoration: line-through;&quot;>(.*?)</span>';
						sString = objRegExp.Replace(sString, '[s]$1[/s]');
						objRegExp.Pattern = '<span style=&quot;font-size: (.*?)%;&quot;>(.*?)</span>';
						sString = objRegExp.Replace(sString, '[size=$1]$2[/size]');
						objRegExp.Pattern = '<span style=&quot;color: (.*?);&quot;>(.*?)</span>';
						sString = objRegExp.Replace(sString, '[color=$1]$2[/color]');
								aParts[i] = '$$$REPLACED$$$' + sString;
							}
						}
					}
					sMessageSource = '';
					for(i=0; i<aParts.length; i++)
					{
						if(i==0 && bStartSpan)
						{
							sMessageSource = sMessageSource + aParts[i];
					}
						else if(StrBegins(aParts[i],'$$$REPLACED$$$'))
						{
							sMessageSource = sMessageSource + StrReplace(aParts[i],'$$$REPLACED$$$', '');
						}
						else if(aParts[i]!='')
						{
							sMessageSource = sMessageSource + '<span ' + aParts[i];
						}
						else
						{
							sMessageSource = sMessageSource + aParts[i];
						}
					}
					if(sMessageSource.indexOf('<span ')!=-1 && sMessageSource.indexOf('</span>')==-1)
					{
						sMessageSource = StrReplace(sMessageSource, '<span ', '');
				}
				iRepeat--;
			}
			}

			objRegExp.Pattern = '<br *[\/]?>';
			sMessageSource = objRegExp.Replace(sMessageSource, '\n');

			return sMessageSource;
	"/>

	<convert_bbtags_to_html PROPERTY="1" PARAM="sMessageSource" PARAM="objRegExp" EXPR="
			if ( sMessageSource == '' )
				return '';

			try
			{
				objRegExp;
			}
			catch ( err )
			{
				objRegExp = tools_web.reg_exp_init();
			}

/*CONT*/	objRegExp.Pattern = '\\[user=([0-9хA-F]*?)\\](.*?)\\[/user\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '<a user_id=&quot;$1&quot; class=&quot;user-link&quot; href=&quot;/_wt/$1&quot;>$2</a>');
/*CONT*/	objRegExp.Pattern = '\\[tag=([0-9хA-F]*?)\\](.*?)\\[/tag\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '<a tag_id=&quot;$1&quot; class=&quot;tag-link&quot; href=&quot;/_wt/$1&quot;>$2</a>');

			objRegExp.Pattern = '\r\n';
			sMessageSource = objRegExp.Replace(sMessageSource, '<br/>');
			objRegExp.Pattern = '\n';
			sMessageSource = objRegExp.Replace(sMessageSource, '<br/>');
			objRegExp.Pattern = '\r';
			sMessageSource = objRegExp.Replace(sMessageSource, '<br/>');
			objRegExp.Pattern = '\&\#13\;\&\#10\;';
			sMessageSource = objRegExp.Replace(sMessageSource, '<br/>');
			objRegExp.Pattern = '\&\#10\;';
			sMessageSource = objRegExp.Replace(sMessageSource, '<br/>');
			objRegExp.Pattern = '\&\#13\;';
			sMessageSource = objRegExp.Replace(sMessageSource, '<br/>');

			return sMessageSource;
	"/>


	<get_bbcode_tag_ids PROPERTY="1" PARAM="sMessageSource" PARAM="objRegExp" EXPR="
			try
			{
				objRegExp;
			}
			catch ( err )
			{
				objRegExp = tools_web.reg_exp_init();
			}

			var arrTags = [
/*CONT*/		{ 'item': 'users', 'pattern': '\\[user=([0-9xA-F]*?)\\](.*?)\\[/user\\]' },
/*CONT*/		{ 'item': 'tags', 'pattern': '\\[tag=([0-9xA-F]*?)\\](.*?)\\[/tag\\]' }
			];
			oRes = ({});

			for ( oTagElem in arrTags )
			{
				objRegExp.Pattern = oTagElem.pattern;
				oTagsExpr = objRegExp.Execute( sMessageSource );
				arrTags = [];
				for ( i = 0; i < oTagsExpr.Count; i++ )
				{
					oTagExpr = oTagsExpr.Item( i );
					if ( oTagExpr.SubMatches.Count == 0 )
						continue;
					iTagID = OptInt( oTagExpr.SubMatches( 0 ) );
					if ( iTagID != undefined )
						arrTags.push( iTagID );
				}
				oRes.SetProperty( oTagElem.item, arrTags );
			}
			return oRes;
	"/>

	<clear_bbcode_from_html ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="sMessageSource" PARAM="objRegExp" EXPR="
			if ( sMessageSource == '' )
				return '';

			try
			{
				objRegExp.Pattern;
			}
			catch ( err )
			{
				objRegExp = tools_web.reg_exp_init();
			}

			objRegExp.Pattern = '\\[b\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\\[/b\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\\[i\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\\[/i\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\\[u\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\\[/u\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\\[s\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\\[/s\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '(\\[quote\\])';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '(\\[/quote\\])';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\\[code\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\\[/code\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			var aParts;
			if(StrContains(sMessageSource, '[list=')) // ordered lists processing - before unordered
			{
				aParts = sMessageSource.split('[list=');
				var iIdx = 1;
				var sStart = 1;
				var iIndex = -1;
				for(iIdx=1; iIdx &lt; aParts.length; iIdx++)
				{
					iIndex = aParts[iIdx].indexOf(']');
					if(iIndex!=-1)
					{
						sStart = StrLeftRange(aParts[iIdx], iIndex);
						aParts[iIdx] = '' + StrRightRangePos(aParts[iIdx], iIndex+1);
						aParts[iIdx] = StrReplaceOne(aParts[iIdx], '[/list]', '');
					}
					else
					{
						aParts[iIdx] = '[list=' + aParts[iIdx];
					}
				}
				sMessageSource = aParts.join('');
			}
			objRegExp.Pattern = '\\[list\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\\[/list\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\\[\\*\\](.*?)(\\n|\\r\\n?)';
			sMessageSource = objRegExp.Replace(sMessageSource, '$1');

			objRegExp.Pattern = '\\[size=\\s*([0-9]*px|[0-9]*pt|[0-9]*%)\\s*\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\\[size=\\s*([0-9]*)s*\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\\[/size\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');

			objRegExp.Pattern = '\\[color=(.*?)\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\\[/color\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');

/*CONT*/	objRegExp.Pattern = '\\[url\\]([А-Яа-я\\-%:/\\\\\\w\\.?&amp;=@;]*?)\\[/url\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '$1');
/*CONT*/	objRegExp.Pattern = '\\[url=([А-Яа-я\\-%:/\\\\\\w\\.?&amp;=@;]*?)\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '$1');
/*CONT*/	objRegExp.Pattern = '\\[/url\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '');

/*CONT*/	objRegExp.Pattern = '\\[img\\]([А-Яа-я\\-%:/\\\\\\w\\.?&amp;=@;]*?)\\[/img\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '$1');

			objRegExp.Pattern = '\\[img\\](data:.+)\\[/img\\]';
			sMessageSource = objRegExp.Replace(sMessageSource, '$1');

			aParts = sMessageSource.split('&lt;compound-attc');
			var aChunks;
			for(i=0; i&lt;aParts.length; i++)
			{
				if(i%2==0) continue;
				aChunks = aParts[i].split('&gt;');
				objRegExp.Pattern = '\r\n';
				aChunks[0] = objRegExp.Replace(aChunks[0], '');
				objRegExp.Pattern = '\n';
				aChunks[0] = objRegExp.Replace(aChunks[0], '');
				objRegExp.Pattern = '\r';
				aChunks[0] = objRegExp.Replace(aChunks[0], '');
				objRegExp.Pattern = '\&\#13\;\&\#10\;';
				aChunks[0] = objRegExp.Replace(aChunks[0], '');
				objRegExp.Pattern = '\&\#10\;';
				aChunks[0] = objRegExp.Replace(aChunks[0], '');
				objRegExp.Pattern = '\&\#13\;';
				aChunks[0] = objRegExp.Replace(aChunks[0], '');
				aParts[i] = aChunks.join('&gt;');
			}
			sMessageSource = aParts.join('&lt;compound-attc');

			objRegExp.Pattern = '\r\n';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\n';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\r';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\&\#13\;\&\#10\;';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\&\#10\;';
			sMessageSource = objRegExp.Replace(sMessageSource, '');
			objRegExp.Pattern = '\&\#13\;';
			sMessageSource = objRegExp.Replace(sMessageSource, '');

			return sMessageSource;
	"/>

	<get_new_request_by_query PROPERTY="1" CALLER-ENV="1" EXPR="
			tempObject = OpenNewDoc( 'x-local://wtv/wtv_request.xmd' ).TopElem;

			if ( Request.Query.HasProperty( 'request_type_id' ) && Request.Query.request_type_id != '' )
			{
				curRequestTypeID = Int( Request.Query.request_type_id );
			}
			else if ( Request.Query.HasProperty( 'request_type_code' ) && Request.Query.request_type_code != '' )
			{
				requestTypeArray = XQuery( 'for $elem in request_types where $elem/code = ' + XQueryLiteral( String( Request.Query.request_type_code ) ) + ' return $elem' );
				requestTypeArrayFirstElem = ArrayOptFirstElem( requestTypeArray );
				if ( requestTypeArrayFirstElem != undefined )
					curRequestTypeID = requestTypeArrayFirstElem.id;
			}
			if ( curRequestTypeID != null )
			{
				curRequestType = OpenDoc( UrlFromDocID( curRequestTypeID ) ).TopElem;
				tools.common_filling( 'request_type', tempObject, curRequestTypeID, curRequestType );
			}

			if ( curRequestObjectType == null && Request.Query.HasProperty( 'type' ) && Request.Query.type != '' )
			{
				curRequestObjectType = String( Request.Query.type );
				tempObject.type = curRequestObjectType;
				dispRequestTypeSelector = true;
			}

			if ( Request.Query.HasProperty( 'disp_type_selector' ) && Request.Query.disp_type_selector != '' )
				dispRequestTypeSelector = ( Request.Query.disp_type_selector == '1' );

			if ( Request.Query.HasProperty( 'request_object_id' ) && Request.Query.request_object_id != '' )
			{
				curRequestObjectID = Int( Request.Query.request_object_id );
				curRequestObject = OpenDoc( UrlFromDocID( curRequestObjectID ) ).TopElem;
				curRequestObjectType = curRequestObject.Name;
				tempObject.object_id = curRequestObjectID;
				tempObject.type = curRequestObjectType;
			}

			if ( Request.Query.HasProperty( 'source_request_id' ) && Request.Query.source_request_id != '' )
			{
				curSourceRequestID = Int( Request.Query.source_request_id );
				curSourceRequest = OpenDoc( UrlFromDocID( curSourceRequestID ) ).TopElem;
				tempObject.custom_elems.AssignElem( curSourceRequest.custom_elems );
				for ( _custom_elem in ArraySelect( tempObject.custom_elems, 'StrContains(name,\'$clear\')' ) )
					_custom_elem.Delete();
			}
			return tempObject;
	"/>

	<update_community_authors PROPERTY="1" PARAM="iObjectIDPARAM" PARAM="vAuthorsPARAM" PARAM="nbDeletePARAM" EXPR="
		try{if (nbDeletePARAM != null) nbDeletePARAM = (nbDeletePARAM == true);}catch(_X_){nbDeletePARAM = false;}
		iObjectIDPARAM = OptInt(iObjectIDPARAM); if (iObjectIDPARAM == undefined) return false;
		var _vElem, _vAuthorElem;

		if (IsArray(vAuthorsPARAM))
		{
			_vElem = ArrayOptFirstElem(vAuthorsPARAM);
			if (_vElem == undefined) return false;
			if (DataType(_vElem) == 'object')
			{
				vAuthorsPARAM = ArrayExtract(vAuthorsPARAM, 'OptInt(This.PrimaryKey,0)');
			}
			else
			{
				vAuthorsPARAM = ArrayExtract(vAuthorsPARAM, 'OptInt(This,0)');
			}
		}
		else if (OptInt(vAuthorsPARAM) != undefined)
		{
			vAuthorsPARAM = [Int(vAuthorsPARAM)];
		}
		else
			vAuthorsPARAM = [];

		if (ArrayOptFirstElem(vAuthorsPARAM) == undefined && nbDeletePARAM != null) return false;

		var bChanges, docTargetDocument,catTargetDocElem, xarrTargetDocuments = XQuery('for $elem in documents where $elem/parent_object_id = ' + iObjectIDPARAM + ' return $elem');
		for (catTargetDocElem in xarrTargetDocuments)
		{
			docTargetDocument = OpenDoc(UrlFromDocID(catTargetDocElem.PrimaryKey));
			if (nbDeletePARAM == null)
			{
				bChanges = true;
				docTargetDocument.TopElem.document_persons.Clear();
			}
			else
				bChanges = false;
			for (_vElem in QueryCatalogByKeys('collaborators','id', vAuthorsPARAM))
			{
				_vAuthorElem = docTargetDocument.TopElem.document_persons.GetOptChildByKey(_vElem.PrimaryKey);
				if (_vAuthorElem != undefined &amp;&amp; nbDeletePARAM == true)
				{
					_vAuthorElem.Delete(); bChanges = true;
				}
				else if (_vAuthorElem == undefined &amp;&amp; nbDeletePARAM != true)
				{
					docTargetDocument.TopElem.document_persons.ObtainChildByKey(_vElem.PrimaryKey).person_fullname = _vElem.fullname;
					bChanges = true;
				}
			}
			if (bChanges)
				docTargetDocument.Save();
		}

		return true;
	"/>
	<evaluate_remote_action PROPERTY="1" PARAM="vRemoteActionDoc" PARAM="Request" EXPR="
		try
		{
			if(!vRemoteActionDoc.IsTopElem) throw 'Not topelem';
			if (vRemoteActionDoc.ChildExists('id'))
				vRemoteActionDoc = OpenDoc(UrlFromDocID(vRemoteActionDoc.PrimaryKey)).TopElem;
		}
		catch(_x_)
		{
			try
			{
				vRemoteActionDoc = OpenDoc(UrlFromDocID(Int(vRemoteActionDoc))).TopElem;
			}
			catch(_o_)
			{
				vRemoteActionDoc = String(vRemoteActionDoc);
				if (vRemoteActionDoc != '')
				{
					vRemoteActionDoc = ArrayOptFirstElem(XQuery('for $elem in remote_actions where $elem/code = ' + XQueryLiteral(vRemoteActionDoc) +  ' return $elem'));
					if (vRemoteActionDoc != undefined)
						vRemoteActionDoc = OpenDoc(UrlFromDocID(vRemoteActionDoc.PrimaryKey)).TopElem;
				}
				else
					vRemoteActionDoc = undefined;
			}
		}
		var oResulter;
		if (vRemoteActionDoc == undefined || vRemoteActionDoc.Name != 'remote_action')
		{
			oResulter = new Object;
			oResulter.error = 1;
			oResulter.messageText = 'Invalid remote action document';
			oResulter.result='';
		}
		else
		{
			oResulter = vRemoteActionDoc.evaluate( 'raw', Request );
		}

		return oResulter;
	"/>



	<Unsqueeze PROPERTY="1" PARAM="sTxt" PARAM="iIdx" EXPR="
			sInput = StrRangePos( sTxt, 0, iIdx );
			sIds = StrRangePos( sTxt, iIdx+5, sTxt.length );
			aIds = sIds.split('.');
			aTerms =
			[
				'&lt;scoreboards&gt;', '@A', '&lt;/scoreboards&gt;', '@a',
				'&lt;scoreboard id=&quot;total&quot;&gt;', '@0', '&lt;scoreboard id=&quot;total_integer&quot;&gt;', '@1', '&lt;/scoreboard&gt;', '@2',
				' answered=&quot;n&quot;', '$A',
				' answered=&quot;a&quot;', '$a',
				' completed=&quot;n&quot;', '$B',
				' completed=&quot;i&quot;', '$b',
				' completed=&quot;c&quot;', '$C',
				' feedbackswitch=&quot;0&quot;', '$c',
				' feedbackswitch=&quot;1&quot;', '$D',
				' hintswitch=&quot;0&quot;', '$d',
				' hintswitch=&quot;1&quot;', '$E',
				' solutionswitch=&quot;0&quot;', '$e',
				' solutionswitch=&quot;1&quot;', '$F',
				' lastattemptswitch=&quot;0&quot;', '$f',
				' lastattemptswitch=&quot;1&quot;', '$G',
				' ident=&quot;', '$g',
				' id=&quot;', '$H',
				' viewed=&quot;n&quot;', '$h',
				' viewed=&quot;v&quot;', '$I',
				' max=&quot;', '$i',
				' value=&quot;', '$J',
				' status=&quot;', '$j',
				' type=&quot;', '$K',
				' itemnumber=&quot;', '$k',
				' shuffle=&quot;0&quot;', '$L',
				' shuffle=&quot;1&quot;', '$l',
				' scoring=&quot;', '$M',
				' timestamp=&quot;', '$m',
				' timevalue=&quot;', '$N',
				' latency=&quot;', '$n',
				' latencyvalue=&quot;', '$O',
				' num=&quot;', '$o',
				' select=&quot;all&quot;', '$P',
				' layout=&quot;', '$p',
				' secnum=&quot;', '$Q',
				' scored=&quot;yes&quot;', '$q',
				' screen=&quot;1&quot;', '$R',
				' qtype=&quot;', '$r',
				' state=&quot;', '$S',
				' correct=&quot;0&quot;', '$s',
				' correct=&quot;1&quot;', '$T',

				'&lt;data&gt;', '@B', '&lt;/data&gt;', '@b',
				'&lt;assessment', '@C', '&lt;/assessment&gt;', '@c',
				'&lt;timestamp/&gt;', '@D', '&lt;timestamp', '@d', '&lt;/timestamp&gt;', '@E',
				'&lt;latency/&gt;', '@e', '&lt;latency', '@F', '&lt;/latency&gt;', '@f',
				'&lt;sections&gt;', '@G', '&lt;/sections&gt;', '@g',
				'&lt;sectionitem', '@H',
				'&lt;section', '@h', '&lt;/section&gt;', '@I',
				'&lt;itemlist&gt;', '@i', '&lt;/itemlist&gt;', '@J',
				'&lt;items&gt;', '@j', '&lt;/items&gt;', '@K',
				'&lt;item', '@k', '&lt;/item&gt;', '@L',
				'&lt;attemptslast&gt;', '@l', '&lt;/attemptslast&gt;', '@M',
				'&lt;attempts', '@m', '&lt;/attempts&gt;', '@N',
				'&lt;attempt', '@n', '&lt;/attempt&gt;', '@O',
				'&lt;weight/&gt;', '@o', '&lt;weight&gt;', '@P', '&lt;/weight&gt;', '@p',
				'&lt;objectives&gt;', '@Q', '&lt;/objectives&gt;', '@q',
				'&lt;objective', '@R',
				'&lt;objects&gt;', '@r', '&lt;/objects&gt;', '@S',
				'&lt;object', '@s', '&lt;/object&gt;', '@T',
				'&lt;objtype&gt;qti&lt;/objtype&gt;', '@3',
				'&lt;obj', '@t',
				'&lt;responses/&gt;', '@U', '&lt;responses&gt;', '@u', '&lt;/responses&gt;', '@V',
				'&lt;last_state/&gt;', '@v', '&lt;last_state&gt;', '@W', '&lt;/last_state&gt;', '@w',
				'&lt;active', '@X', '&lt;/active&gt;', '@x',
				'&lt;task', '@Y',
				'&lt;sequence', '@Z', '&lt;/sequence&gt;', '@z',
				'&lt;file&gt;', '@4', 'qti_return.html', '@5', '&amp;code=', '@6', '&lt;/file&gt;', '@7',
				'&lt;screen', '@8', '&lt;/screen&gt;', '@9',
				'&lt;annals&gt;', '*0', '&lt;/annals&gt;', '*1',
				'&lt;modified/&gt;', '*4', '&lt;modified&gt;', '*5', '&lt;/modified&gt;', '*6',
				'&lt;settings&gt;', '*7', '&lt;/settings&gt;', '*8',
				'&lt;sound&gt;false&lt;/sound&gt;', '*9',
				'&lt;trackvisited&gt;false&lt;/trackvisited&gt;', '*A',
				'&lt;aicc&gt;', '*B', '&lt;/aicc&gt;', '*b',
				'&lt;putmethod&gt;q&lt;/putmethod&gt;', '*a',
				'&lt;puttimer/&gt;', '*C', '&lt;puttimer&gt;', '*c', '&lt;/puttimer&gt;', '*D',
				'&lt;history&gt;', '*d', '&lt;/history&gt;', '*E',
				'&lt;visits/&gt;', '*e', '&lt;visits&gt;', '*F', '&lt;/visits&gt;', '*f',
				'&lt;title/&gt;', '*G',
				'&lt;scoring&gt;', '*g','&lt;/scoring&gt;', '*H',
				'&lt;scoringtype&gt;straight&lt;/scoringtype&gt;', '*h',
				'&lt;cutvalue/&gt;', '*I', '&lt;cutvalue&gt;', '*i', '&lt;/cutvalue&gt;', '*J',
				'&lt;elapsed/&gt;', '*j', '&lt;elapsed&gt;', '*K', '&lt;/elapsed&gt;', '*k',
				'&lt;state/&gt;', '*L', '&lt;state&gt;', '*l', '&lt;/state&gt;', '*M',
				'&lt;question', '*m', '&lt;/question&gt;', '*N',
				'&lt;maxattempts&gt;', '*n', '&lt;/maxattempts&gt;', '*O',
				'&lt;maxweight/&gt;', '*o', '&lt;maxweight&gt;', '*P', '&lt;/maxweight&gt;', '*p',
				'&lt;points/&gt;', '*Q', '&lt;points&gt;', '*q', '&lt;/points&gt;', '*R',
				'&lt;variant', '*r', '&lt;/variant&gt;', '*S',
				'&lt;au&gt;', '*2', '&lt;/au&gt;', '*3',

				'item&quot;', '*s',
				'result&quot;', '*T',
				'Decimal&quot;', '*t',
				'Integer&quot;', '*U',
				'single&quot;', '*u',
				'multiple&quot;', '*V',
				'order&quot;', '*v',
				'match&quot;', '*w',
				'RAWSCORE&quot;', '*X',
				'SCORE&quot;', '*x',
				'exhausted&quot;', '*y',
				'choice&quot;', '*Z',
				'select&quot;', '*z',
				'range&quot;', '*Y',
				'numeric&quot;', '*W',
				'PT0H0M', '$U',
				'&quot;/&gt;', '$u'
			];
			for(i=aTerms.length-1; i &gt;= 0; i=i-2)
			{
				sInput = StrReplace( sInput, aTerms[i], aTerms[i-1] );
			}
			for(i=0; i &lt; aIds.length; i++)
			{
				sInput = StrReplace( sInput, '#'+i+'#', aIds[i] );
			}
			return sInput;
	"/>



	<get_collection_param PROPERTY="1" EXPR="
			return ({
				'catalog_name': '',
				'xquery_qual': '',
				'view_type': '',
				'external_eval': '',
				'check_access': true,
				'open_doc' : false,

				'disp_array': false,
				'array': '',
				'array_selected': '',

				'list_columns': '',
				'list_headers': '',
				'col_headers': '',
				'col_cells': '',

				'disp_sort': true,
				'sort_index': null,
				'sort_direct': '+',

				'disp_link': 'false',
				'link_field_index': 0,
				'link_object_field': 'PrimaryKey',
				'link_action': '',
				'link_mode': '',
				'link_prop': '',

				'disp_check_box': false,
				'is_data_grid': false,

				'filter_id': '',
				'filter_conditions': '',
				'search': ''
			});
	"/>



	<external_eval PROPERTY="1" PARAM="sCommandParam" PARAM="oParams" PARAM="Env" EXPR="
			oRes = ({ 'do_sort': oParams.GetOptProperty( 'disp_sort', true ), 'do_paging': oParams.GetOptProperty( 'disp_paging', true ), 'array': [] });
			arrParams = oParams.GetOptProperty( 'ext_param_str', '' ).split( ';' );
			switch ( sCommandParam )
			{
				case 'edu_method_events':
					_date_str = arrParams[0] == '1' || arrParams[0] == 'true' ? ' and $elem/start_date > date(\'' + CurDate + '\')' : '';
					oRes.array = XQuery( 'for $elem in events where $elem/education_method_id = ' + Env.curObjectID + _date_str + ' return $elem' );
					if ( Env.curUser.access.access_role != 'admin' )
					{
						curUserEventArray = XQuery( 'for $elem in event_collaborators where $elem/collaborator_id = ' + Env.curUserID + _date_str + ' return $elem' );
						curLectorEventArray = XQuery( 'for $elem in event_lectors where $elem/person_id = ' + Env.curUserID + _date_str + ' return $elem' );
						oRes.array = ArraySelect( oRes.array, 'is_public || ArrayOptFind(curUserEventArray,\'event_id==\'+PrimaryKey)!=undefined || ArrayOptFind(curLectorEventArray,\'event_id==\'+PrimaryKey)!=undefined' );
					}
					oRes.total = ArrayCount( oRes.array );
					break;

				case 'workflow_condition_project_participants':
				case 'workflow_condition_interval_schedules':
				case 'workflow_condition_requests':
					InPlaceEval( tools_web.env_to_script( Env ) );

					curFilterCond = oParams.GetOptProperty( 'filter_condition', '' );
					sSearch = oParams.GetOptProperty( 'search', '' );
					sOrder = oParams.GetOptProperty( 'order', '' );
					sXqueryQual = oParams.GetOptProperty( 'xquery_qual', '' );
					sXqueryQual += ( sXqueryQual == '' ? '' : ' and ' ) + '$elem/workflow_id != null() and ( MatchSome( $elem/workflow_person_id, (' + Env.curUserID + ') ) or IsEmpty( $elem/workflow_person_id ) = true() )';

					sQuery = oRes.do_sort ? tools.create_xquery( ( sCommandParam == 'workflow_condition_requests' ? 'request' : sCommandParam == 'workflow_condition_project_participants' ? 'project_participant' : 'interval_schedule' ), sXqueryQual, curFilterCond, sSearch, sOrder, oParams.GetOptProperty( 'direct', '+' ) ) : tools.create_xquery( ( sCommandParam == 'workflow_condition_requests' ? 'request' : sCommandParam == 'workflow_condition_project_participants' ? 'project_participant' : 'interval_schedule' ), sXqueryQual, curFilterCond, sSearch );
					sQuery += '/__a, $elem/__data';
					xarrAllRequests = tools.xquery( sQuery );

					iCounter = 0;
					iContinueCounter = 0;
					xarrWorkflows = [];
					iPageSize = OptInt( oParams.GetOptProperty( 'paging_size', 100 ), 100 );
					iMinCount = OptInt( oParams.GetOptProperty( 'paging_index', 0 ), 0 ) * iPageSize;
					iMaxCount = iMinCount + iPageSize;
//alert('iPageSize = '+iPageSize)
//alert('iMinCount = '+iMinCount)
//alert('iMaxCount = '+iMaxCount)
					for ( catRequestElem in xarrAllRequests )
						try
						{
							if ( catRequestElem.workflow_matching_type != 'condition_eval' &amp;&amp; ArrayCount( catRequestElem.workflow_person_id ) != 0 )
							{
								oRes.array.push( catRequestElem );
								iCounter++;
								continue;
							}

							if ( oRes.do_paging &amp;&amp; iCounter &gt;= iMaxCount )
								break;
//alert('11111 = '+ catRequestElem.id)
							curObjectID = catRequestElem.id.Value;
							curObject = OpenDoc( UrlFromDocID( catRequestElem.id ) ).TopElem;

							sCustomEval = '';
							for ( fldCustomStateElem in curObject.workflow_custom_states )
								sCustomEval += ( fldCustomStateElem.ChildIndex == 0 ? '' : '||' ) + '(curObject.workflow_state==' + CodeLiteral( fldCustomStateElem.code ) + ( fldCustomStateElem.condition_eval_str.HasValue ? '&amp;&amp;(' + fldCustomStateElem.condition_eval_str + ')' : '' ) + ')';

							catWorkflow = ArrayOptFindByKey( xarrWorkflows, curObject.workflow_id, 'id' );
							if ( catWorkflow == undefined )
							{
								catWorkflow = curObject.workflow_id.ForeignElem;
								xarrWorkflows.push( catWorkflow );
							}
							if ( sCustomEval == '' )
								sCustomEval = catWorkflow.condition_eval_str.Value;
							else
								sCustomEval += '||(' + catWorkflow.condition_eval_str.Value + ')';

							if ( sCustomEval == '' || eval( sCustomEval ) )
							{
								if ( iCounter &gt;= iMinCount )
								{
									oRes.array.push( catRequestElem );
								}
								iCounter++;
							}
							else
							{
								iContinueCounter++;
//alert('CONTINUE');
							}
						}
						catch ( err )
						{
							iContinueCounter++;
							if ( global_settings.debug )
								alert( err );
						}
/*  IF LAST PAGE IS EMPTY, NEED RETURN ENPTY ROW
					iTotal = ArrayCount( xarrAllRequests ) - iContinueCounter;
					if ( iMinCount &gt;= iTotal )
						iTotal++;
*/
					oRes.total = oRes.do_paging ? ( ArrayCount( xarrAllRequests ) - iContinueCounter ) : 0;
					oRes.do_sort = false;
					oRes.do_paging = false;

					break;
			}
			return oRes;
	"/>




	<env_to_script PROPERTY="1" PARAM="oEnvParam" EXPR="
			var sRes = ';';
			for ( sElem in oEnvParam )
				sRes += sElem + '=Env.GetOptProperty(\'' + sElem + '\',null);';

			curObjectDoc = oEnvParam.GetOptProperty( 'curObjectDoc' );
			if ( curObjectDoc != undefined )
				sRes += curObjectDoc == null ? 'curObject=null;' : 'curObject=curObjectDoc.TopElem;';

			if ( ! oEnvParam.HasProperty( 'curLng' ) )
			{
				curLngID = oEnvParam.GetOptProperty( 'curLngID', null );
				if ( curLngID == null )
					sRes += 'curLngID=null;';
				else
					sRes += 'curLngID=\'' + curLngID + '\';curLng=lngs.GetChildByKey(curLngID);curLngWeb=curLng.items;curLngCommon=(curLng.common_url.HasValue?FetchDoc(curLng.common_url).TopElem:common);';
			}
			return sRes;
	"/>




	<object_init PROPERTY="1" PARAM="oSessionTarget" PARAM="oQueryParam" PARAM="bObjectEnvSaveParam" EXPR="
			try
			{
				if ( bObjectEnvSaveParam != true )
					throw 'no_data';
				Env = oSessionTarget.Env;
			}
			catch ( err )
			{
				Env = new Object;
			}
			curObjectInitErrorText = '';

			curDocID = oQueryParam.GetOptProperty( 'doc_id', '' );
			if ( curDocID == '' )
			{
				curDocCode = oQueryParam.GetOptProperty( 'doc_code', '' );
				if ( curDocCode == '' )
				{
					curDocID = null;
					Env.SetProperty( 'curDoc', null );
				}
				else
				{
					curDocCodeArrayFirstElem = ArrayOptFirstElem( XQuery( 'for $elem in documents where $elem/code = ' + XQueryLiteral( curDocCode ) + ' return $elem/Fields(\'id\')' ) );
					if ( curDocCodeArrayFirstElem == undefined )
					{
						if ( global_settings.debug )
						{
							alert( 'Document with code &quot;' + curDocCode + '&quot; not found. File: include/access_init.html' );
						}
						curDocID = null;
						Env.SetProperty( 'curDoc', null );
					}
					else
					{
						curDocID = curDocCodeArrayFirstElem.id.Value;
						curDoc = OpenDoc( UrlFromDocID( curDocID ) ).TopElem;
						if ( (tools.sys_db_capability & tools.UNI_CAP_CLUSTER) != 0 )
							curDoc.text_area.Clear();
						Env.SetProperty( 'curDoc', curDoc );
					}
				}
			}
			else
			{
				curDocID = Int( curDocID );
				curDoc = OpenDoc( UrlFromDocID( curDocID ) ).TopElem;
				if ( (tools.sys_db_capability & tools.UNI_CAP_CLUSTER) != 0 )
					curDoc.text_area.Clear();
				Env.SetProperty( 'curDoc', curDoc );
			}
			Env.SetProperty( 'curDocID', curDocID );
			Env.SetProperty( 'curDocSid', tools_web.get_sum_sid( curDocID, oSessionTarget.GetOptProperty( 'sid', 0 ) ) );

			curMode = oQueryParam.GetOptProperty( 'mode', '' );
			for ( iCharCodeElem in StrToCharCodesArray( curMode ) )
			{
				if ( ( iCharCodeElem &lt; 48 || iCharCodeElem &gt; 57 ) &amp;&amp; ( iCharCodeElem &lt; 97 || iCharCodeElem &gt; 122 ) &amp;&amp; ( iCharCodeElem &lt; 65 || iCharCodeElem &gt; 90 ) &amp;&amp; iCharCodeElem != 45 &amp;&amp; iCharCodeElem != 95 &amp;&amp; iCharCodeElem != 46 )
				{
					curMode = StrReplace( curMode, String.fromCharCode( iCharCodeElem ), '_' );
				}
			}
			if ( Env.GetOptProperty( 'curWebModeID', null ) != null &amp;&amp; Env.GetOptProperty( 'curWebModeExecFlag' ) != true )
			{
				curMode = Env.GetOptProperty( 'curMode', curMode );
			}

			try
			{
				curObjectID = oQueryParam.GetOptProperty( 'object_id', '' );
				if ( curObjectID == '' )
				{
					curObjectCode = oQueryParam.GetOptProperty( 'object_code', '' );
					curObjectType = oQueryParam.GetOptProperty( 'object_type', '' );
					if ( curObjectCode != '' &amp;&amp; curObjectType != '' )
					{
						curObjectCodeArrayFirstElem = ArrayOptFirstElem( XQuery( 'for $elem in ' + curObjectType + 's where $elem/code = ' + XQueryLiteral( curObjectCode ) + ' return $elem/Fields(\'id\')' ) );
						if ( curObjectCodeArrayFirstElem == undefined )
						{
							alert( curObjectInitErrorText = 'Object with code &quot;' + curObjectCode + '&quot; and type &quot;' + curObjectType + '&quot; not found. File: include/access_init.html' );
						}
						else
						{
							curObjectID = curObjectCodeArrayFirstElem.id.Value;
							curObjectDoc = OpenDoc( UrlFromDocID( curObjectID ) );
							curObject = curObjectDoc.TopElem;
						}
					}
					else
					{
						curOldObjectID = oQueryParam.GetOptProperty( 'old_object_id', '' );
						if ( curOldObjectID != '' )
						{
							switch ( curMode )
							{
								case 'learning_proc':
								case 'test_learning_proc':
									curObjectID = OptInt( curOldObjectID );
									try
									{
										curObjectDoc = OpenDoc( UrlFromDocID( curObjectID ) );
										curObject = curObjectDoc.TopElem;
									}
									catch ( e )
									{
										curObjectID = null;
										curObject = null;
										curObjectDoc = null;
									}
									break;

								default:
									curObjectID = null;
									curObject = null;
									curObjectDoc = null;
									break;
							}
						}
						else
						{
							curObjectID = null;
							curObject = null;
							curObjectDoc = null;
						}
					}
				}
				else
				{
					curObjectID = OptInt( oQueryParam.object_id );
					curObjectDoc = OpenDoc( UrlFromDocID( curObjectID ) );
					curObject = curObjectDoc.TopElem;
				}
			}
			catch ( err )
			{
				if ( curObjectID == undefined )
					alert( curObjectInitErrorText = 'Incorrect object_id parameter. File: include/access_init.html' );
				else
					alert( curObjectInitErrorText = 'Object with ID &quot;' + curObjectID + '&quot; not found. File: include/access_init.html' );

				curObjectID = null;
				curObject = null;
				curObjectDoc = null;
			}
			Env.SetProperty( 'curObjectID', curObjectID );
			Env.SetProperty( 'curObjectDoc', curObjectDoc );
			Env.SetProperty( 'curObject', ( curObjectDoc == null ? null : curObjectDoc.TopElem ) );
			Env.SetProperty( 'curObjectInitErrorText', curObjectInitErrorText );

			if ( curMode == '' &amp;&amp; curObjectID == null )
			{
				if ( curDocID != null )
				{
					curMode = 'doc';
				}
				else
				{
					curMode = 'home';
				}
			}
			Env.SetProperty( 'curMode', XmlAttrEncode( curMode ) );

			return Env;
	"/>


	<get_column_width PROPERTY="1" PARAM="sTypeParam" PARAM="sModeParam" EXPR="
			var sWidth = sModeParam == 'px' ? '100' : '20zr';
			switch ( sTypeParam )
			{
				case 'title':
					sWidth = '100%';
					break;
				case 'name':
					sWidth = sModeParam == 'px' ? '200' : '30zr';
					break;
				case 'date':
					sWidth = sModeParam == 'px' ? '90' : '20zr';
					break;
				case 'date_time':
					sWidth = sModeParam == 'px' ? '140' : '24zr';
					break;
				case 'state':
					sWidth = sModeParam == 'px' ? '120' : '20zr';
					break;
				case 'score':
					sWidth = sModeParam == 'px' ? '100' : '20zr';
					break;
				case 'code':
					sWidth = sModeParam == 'px' ? '100' : '20zr';
					break;
				case 'number':
					sWidth = sModeParam == 'px' ? '80' : '10zr';
					break;
				case 'type':
					sWidth = sModeParam == 'px' ? '120' : '20zr';
					break;
				case 'cost':
					sWidth = sModeParam == 'px' ? '100' : '20zr';
					break;
			}
			return sWidth;
	"/>



		<get_catalog_list_arrays PROPERTY="1" PARAM="oCollectionParam" PARAM="Env" PARAM="EnvLngCommon" EXPR="
			dispSort = tools_web.is_true( oCollectionParam.GetOptProperty( 'disp_sort', '' ) );
			sortDirect = oCollectionParam.GetOptProperty( 'sort_direct', '+' );
			linkFieldIndex = OptInt( oCollectionParam.GetOptProperty( 'link_field_index' ), null );
			linkFieldName = oCollectionParam.GetOptProperty( 'link_field_name', '' );
			bDispOnly = tools_web.is_true( oCollectionParam.GetOptProperty( 'disp_only' ) );
			bDispFirstOnly = bDispOnly || tools_web.is_true( oCollectionParam.GetOptProperty( 'disp_first_only' ) );
			sViewType = oCollectionParam.GetOptProperty( 'view_type', '' );
			sViewCatalog = sViewType == '' ? oCollectionParam.catalog_name : sViewType;
			viewBaseOrig = view_types.GetChildByKey( sViewCatalog );
			viewBase = viewBaseOrig.Clone();
			sListColumns = oCollectionParam.GetOptProperty( 'list_columns', '' );

			if ( sListColumns == '' || bDispOnly )
			{
				viewBase.columns.DeleteChilds( 'is_default!=true' );
				arrColumns = viewBase.columns;
			}
			else
			{
				arrListColumns = sListColumns.split( ';' );
				viewBase.columns.DeleteChilds( 'This.type==\'tile\'||ArrayOptFind(arrListColumns,\'This==\'+CodeLiteral(order))==undefined' );
				arrColumns = [];
				for ( sColumnNameElem in arrListColumns )
				{
					fldViewColumn = viewBase.columns.GetOptChildByKey( sColumnNameElem, 'order' );
					if ( fldViewColumn != undefined )
						arrColumns.push( fldViewColumn );
				}
			}

			listHeaders = oCollectionParam.GetOptProperty( 'list_headers', '' );
			listHeaders = listHeaders == '' ? [] : listHeaders.split( ';' );
			listHeadersNum = listHeaders == '' ? 0 : ArrayCount( listHeaders );
			colHeaders = oCollectionParam.GetOptProperty( 'col_headers', '' );
			colHeaders = colHeaders == '' ? [] : colHeaders.split( ';' );

			dispLink = oCollectionParam.GetOptProperty( 'disp_link', '' );
			dispLink = dispLink != '' &amp;&amp; dispLink != false &amp;&amp; dispLink != 'false' &amp;&amp; dispLink != '0';
			sLinkAction = oCollectionParam.GetOptProperty( 'link_action', '' );
			sLinkMode = UrlEncode( oCollectionParam.GetOptProperty( 'link_mode', '' ) );
			if ( sLinkMode == '' )
				sLinkMode = oCollectionParam.catalog_name;
			sLinkOpen = oCollectionParam.GetOptProperty( 'link_open', '' );
			if ( sLinkOpen == '' )
				sLinkOpen = 'OPENURL';
			linkProp = Trim( oCollectionParam.GetOptProperty( 'link_prop', '' ) );
			linkPropFlag = StrBegins( linkProp, '=' );
			if ( linkPropFlag )
				linkProp = linkProp.slice( 1 );

			curDocID = Env.GetOptProperty( 'curDocID', '' );

			curSortColumn = undefined;
			sortDataField = oCollectionParam.GetOptProperty( 'sort_data_field', '' );
			iSortIndex = null;
			sortFieldName = oCollectionParam.GetOptProperty( 'sort_field_name', '' );
			sDispName = '';
			fldObjectType = common.exchange_object_types.GetOptChildByKey( sViewCatalog );
			if ( fldObjectType != undefined )
				sDispName = fldObjectType.disp_name.Value;
			iDispFieldIndex = null;

			if ( sortFieldName != '' )
			{
				curSortColumn = viewBaseOrig.columns.GetOptChildByKey( sortFieldName, 'order' );
			}
			columnArrayNum = 0;
			for ( fldColumnElem in arrColumns )
			{
				if ( fldColumnElem.order_field == 'login' )
					continue;

				if ( sDispName != '' &amp;&amp; sDispName == fldColumnElem.order_field )
					iDispFieldIndex = columnArrayNum;
				if ( linkFieldIndex == null &amp;&amp; ( ( linkFieldName != '' &amp;&amp; linkFieldName == fldColumnElem.order_field ) || fldColumnElem.is_link ) )
					linkFieldIndex = columnArrayNum;
				columnArrayNum++;
			}
			if ( linkFieldIndex == null )
				linkFieldIndex = iDispFieldIndex == null ? 0 : iDispFieldIndex;

			if ( bDispFirstOnly )
			{
				fldColumn = arrColumns[ linkFieldIndex ];
				arrColumns = [ fldColumn ];

				viewBase.columns.DeleteChilds( 'order_field!=' + CodeLiteral( fldColumn.order_field ) );
				viewBase.row_image_url.Clear();
				colHeaders = [];
				sortDataField = sortFieldName == '' ? 'd0' : '';
				linkFieldIndex = iDispFieldIndex = 0;
			}

			iColumnCount = ArrayCount( arrColumns );
			arrHeaders = Array();
			columnArrayNum = 0;
			bFirstPercentColumn = true;
			for ( fldColumnElem in arrColumns )
			{
				if ( fldColumnElem.order_field == 'login' )
					continue;

				sDataName = 'd' + columnArrayNum;
				oColumn = new Object;
				oColumn.data = sDataName;
				if ( listHeadersNum != 0 && columnArrayNum < listHeadersNum )
				{
					oColumn.title = '' + listHeaders[ columnArrayNum ];
				}
				else
				{
					oColumn.title = tools_web.eval_web_column_const( fldColumnElem.const, EnvLngCommon.curLngWeb );
				}

				if ( columnArrayNum == linkFieldIndex )
				{
					if ( dispLink )
					{
						oColumn.click = ( sLinkAction == '' ? sLinkOpen + '=' + tools_web.get_mode_clean_url( sLinkMode, '{id}', { doc_id: curDocID } ) : sLinkAction ) + ( linkPropFlag ? '{link}' : linkProp );
						oColumn.type = 'link';
					}
					else
					{
						oColumn.type = 'string';
					}
				}
				oColumn.editable = false;
				oColumn.colorsource = 'col';
				oColumn.sortable = dispSort;
				oColumn.multiline = bDispFirstOnly;

				bPercent = StrContains( fldColumnElem.width, '%' );
				if ( iColumnCount == 1 || fldColumnElem.type == 'title' || ( bFirstPercentColumn &amp;&amp; ( bPercent || fldColumnElem.type == 'name' ) ) )
				{
					oColumn.width = '100%';
					oColumn.minwidth = '100';
					bFirstPercentColumn = false;
				}
				else
				{
					if ( fldColumnElem.type.HasValue )
					{
						oColumn.width = tools_web.get_column_width( fldColumnElem.type, 'px' );
					}
					else
					{
						oColumn.width = bPercent ? '200' : Int( StrReplace( fldColumnElem.width, 'zr', '' ) ) * 6;
					}
				}

				arrHeaders[ columnArrayNum ] = oColumn;
				columnArrayNum++;

				if ( sDataName == sortDataField )
					curSortColumn = fldColumnElem;
			}
			for ( sColumnElem in colHeaders )
			{
				oColumn = new Object;
				oColumn.data = 'd' + columnArrayNum;
				oColumn.title = sColumnElem;
				oColumn.type = 'string';
				oColumn.editable = false;
				oColumn.sortable = false;
				oColumn.colorsource = 'col';

				arrHeaders[ columnArrayNum ] = oColumn;
				columnArrayNum++;
			}

			sArray = oCollectionParam.GetOptProperty( 'array', '' );
			dispArray = tools_web.is_true( oCollectionParam.GetOptProperty( 'disp_array', false ) ) || sArray != '';
			bAdmin = Env.GetOptProperty( 'curUser', null );
			bAdmin = bAdmin != null &amp;&amp; bAdmin.access.access_role == 'admin';
			bShowSub = ( ! tools_web.is_true( oCollectionParam.GetOptProperty( 'show_all' ) ) || ! global_settings.settings.show_all_persons ) &amp;&amp; ! bAdmin &amp;&amp; oCollectionParam.catalog_name == 'collaborator' &amp;&amp; Env.HasProperty( 'curUserID' );

			sExternalEval = oCollectionParam.GetOptProperty( 'external_eval', '' );
			sXqueryQual = oCollectionParam.GetOptProperty( 'xquery_qual', '' );
			sSearch = oCollectionParam.GetOptProperty( 'search', '' );

			curFilterID = oCollectionParam.GetOptProperty( 'filter_id', '' );
			curFilterID = curFilterID == '#empty#' ? '' : curFilterID;
			sFilterConditions = oCollectionParam.GetOptProperty( 'filter_conditions', '' );

			dispPaging = tools_web.is_true( oCollectionParam.GetOptProperty( 'disp_paging' ) );
			bDoPaging = tools_web.is_true( oCollectionParam.GetOptProperty( 'do_paging' ) );
			bDoPagingExt = true;
			iPageSize = OptInt( oCollectionParam.GetOptProperty( 'paging_size' ), 100 );
			iPageIndex = OptInt( oCollectionParam.GetOptProperty( 'paging_index' ), 0 );
			iDataTotalCount = 0;

			if ( dispSort )
			{
				if ( curSortColumn == undefined )
				{
					if ( iSortIndex == null )
					{
						iSortIndex = OptInt( oCollectionParam.GetOptProperty( 'sort_index' ), linkFieldIndex );
						if ( iSortIndex &gt;= ArrayCount( arrColumns ) )
							iSortIndex = 0;
					}
					curSortColumn = arrColumns[ iSortIndex ];
					sortDataField = arrHeaders[ iSortIndex ].data;
				}
			}

			curFilterCond = '';
			if ( curFilterID != '' )
			{
				curFilter = ArrayOptFind( lists.view_conditions_schemes, 'catalog==\'' + oCollectionParam.catalog_name + '\'&amp;&amp;disp_web&&PrimaryKey==\'' + curFilterID + '\'' );
				if ( curFilter != undefined )
					curFilterCond = tools.create_filter_xquery( curFilter.conditions );
			}
			else if ( sFilterConditions != '' )
			{
				fldFilterConditions = CreateElem( 'x-local://wtv/wtv_general.xmd', 'view_conditions_base.conditions' );
				fldFilterConditions.LoadData( sFilterConditions );
				fldFilterConditions.DeleteChilds( 'value==\'#empty#\'||(type==\'date\'&amp;&amp;value==\'null\')||(type==\'integer\'&amp;&amp;value==\'\')' );
				curFilterCond = tools.create_filter_xquery( fldFilterConditions );
			}

			function get_array_ids( sArrayParam )
			{
				if ( sArrayParam == '' || sArrayParam == '#empty#' )
					return [];
				if ( StrBegins( sArrayParam, '{' ) || StrBegins( sArrayParam, '[' ) )
					return ArrayExtract( tools.read_object( sArrayParam ), 'Int(id)' );
				if ( StrBegins( sArrayParam, '=' ) )
				{
					arrField = StrRightRangePos( sArrayParam, 1 ).split( '#' );
					sPath = arrField[ 0 ];
					iIndex = sPath.indexOf( '.' );
					sObjectName = StrLeftRange( sPath, iIndex );
					if ( sObjectName == 'curObject' )
					{
						oObject = Env.GetOptProperty( 'curObjectDoc' );
						if ( oObject == undefined )
							return [];
						oObject = oObject.TopElem;
					}
					else
					{
						oObject = Env.GetOptProperty( sObjectName );
						if ( oObject == undefined )
							return [];
					}
					sFieldName = ArrayCount( arrField ) &gt; 1 ? arrField[ 1 ] : 'PrimaryKey';
					return ArrayExtract( oObject.EvalPath( StrRightRangePos( sPath, iIndex + 1 ) ), 'Int(' + sFieldName + ')' );
				}
				if ( IsArray( sArrayParam ) )
				{
					oFirstElem = ArrayOptFirstElem( sArrayParam );
					if ( oFirstElem == undefined )
						return [];
					try
					{
						oFirstElem.Name;
						return ArrayExtract( sArrayParam, 'Int(PrimaryKey)' );
					}
					catch ( err )
					{
						try
						{
							oFirstElem.GetProperty( 'id' );
							return ArrayExtract( sArrayParam, 'Int(id)' );
						}
						catch ( err1 )
						{
							return sArrayParam;
						}
					}
				}
				return ArrayExtract( sArrayParam.split( ';' ), 'Int(This)' );
			}

			sQuery = '';
			if ( sExternalEval != '' )
			{
				arrExtCommand = sExternalEval.split( '=' );
				oRes = tools_web.external_eval( arrExtCommand[ 0 ], {
					'ext_param_str': ( ArrayCount( arrExtCommand ) == 1 ? '' : arrExtCommand[ 1 ] ),
					'disp_sort': dispSort,
					'order': RValue( curSortColumn.order ),
					'direct': sortDirect,
					'xquery_qual': sXqueryQual,
					'filter_condition': curFilterCond,
					'search': sSearch,
					'disp_paging': dispPaging,
					'paging_size': iPageSize,
					'paging_index': iPageIndex
				}, Env );
				curArray = oRes.array;
				bDoPagingExt = oRes.do_paging;
				iDataTotalCount = oRes.total;
				if ( dispSort &amp;&amp; oRes.do_sort )
					curArray = ArraySort( curArray, curSortColumn.order, sortDirect );
			}
			else if ( dispArray || bShowSub )
			{
				if ( dispArray )
				{
					sArraySelected = oCollectionParam.GetOptProperty( 'array_selected', '#empty#' );
					if ( sArraySelected == '#empty#' )
						arrID = get_array_ids( sArray );
					else
						arrID = ArraySelectDistinct( ArrayUnion( get_array_ids( sArray ), get_array_ids( sArraySelected ) ), 'This' );

					if ( bShowSub )
						arrID = ArrayIntersect( tools.get_sub_person_ids_by_func_manager_id( Env.curUserID ), arrID );
				}
				else
				{
					arrID = tools.get_sub_person_ids_by_func_manager_id( Env.curUserID )
				}

				if ( ArrayCount( arrID ) == 0 )
				{
					curArray = Array();
				}
				else
				{
					sArrayLinkField = oCollectionParam.GetOptProperty( 'array_link_field', 'id' );
					if ( sXqueryQual != '' || curFilterCond != '' || sSearch != '' )
					{
						sQuery = tools.create_xquery( oCollectionParam.catalog_name, sXqueryQual, curFilterCond, sSearch );
						curArray = XQuery( sQuery );
						curArray = ArrayIntersect( curArray, arrID, sArrayLinkField );
					}
					else
					{
						curArray = QueryCatalogByKeys( oCollectionParam.catalog_name + 's', sArrayLinkField, arrID );
					}
					if ( dispSort )
						curArray = ArraySort( curArray, curSortColumn.order, sortDirect );
				}
			}
			else
			{
				viewBase.data_fields += ( viewBase.data_fields.HasValue ? ',' : '' ) + oCollectionParam.GetOptProperty( 'data_fields', '' );
				sLinkObjectField = oCollectionParam.GetOptProperty( 'link_object_field', 'PrimaryKey' );
				if ( sLinkObjectField != 'PrimaryKey' )
					viewBase.data_fields += ( viewBase.data_fields.HasValue ? ',' : '' ) + sLinkObjectField;

				sQuery = tools.create_xquery( oCollectionParam.catalog_name, sXqueryQual, curFilterCond, sSearch, ( dispSort ? curSortColumn.order : null ), sortDirect, null, null, viewBase );
//alert('sQuery = '+sQuery)
				curArray = XQuery( sQuery );
			}

			if ( ( dispPaging || bDoPaging ) &amp;&amp; bDoPagingExt )
			{
				iDataTotalCount = ArrayCount( curArray );
				curArray = ArrayRange( curArray, iPageIndex * iPageSize, iPageSize );
			}

			return { 'arrData': curArray, 'arrColumns': arrColumns, 'arrHeaders': arrHeaders, 'iDataTotalCount': iDataTotalCount, 'iDispFieldIndex': iDispFieldIndex, 'iLinkFieldIndex': linkFieldIndex, 'sSortDataFieldName': sortDataField, 'sQuery': sQuery };
	"/>

	<check_session_user PROPERTY="1" PARAM="Request" PARAM="iUserIDParam" EXPR="
			dtDeltaDate = DateOffset( CurDate, 0 - 180 );
			return ArrayOptFind( Request.AllSessions, 'This.GetOptProperty(\'cur_user_id\')==' + iUserIDParam + '&amp;&amp;Date(This.GetOptProperty(\'cur_date\',\'01.01.2000\'))&gt;dtDeltaDate' ) != undefined;
	"/>

	<is_true PROPERTY="1" PARAM="oParam" EXPR="
		return oParam == true || oParam == 'true' || oParam == 1 || oParam == '1' || oParam == 'on';
	"/>



	<init_cur_active_web_template PROPERTY="1" PARAM="Env" PARAM="bCreateParam" EXPR="
			if ( Env == undefined )
			{
				return null;
			}

			var curActiveWebTemplateDoc = null;
			var curActiveWebTemplate = null;
			if ( global_settings.settings.template_cache_type == 'object' || global_settings.settings.template_cache_type == 'object_placeholder' )
			{
				curMode = Env.GetOptProperty( 'curMode' );
				curSiteID = Env.GetOptProperty( 'curSiteID' );
				curWebDesignID = Env.GetOptProperty( 'curWebDesignID' );
				if ( curMode == undefined || curSiteID == undefined || curWebDesignID == undefined )
					return null;

				curUser = Env.GetOptProperty( 'curUser', null );
				sConditionsHash = curUser == null ? tools_web.get_active_web_template_hash( curMode, null, '', curSiteID, curWebDesignID ) : tools_web.get_active_web_template_hash( curMode, curUser.access.access_level, curUser.access.access_role, curSiteID, curWebDesignID );
				catActiveWebTemplate = ArrayOptFirstElem( XQuery( 'for $elem in active_web_templates where $elem/hash = ' + XQueryLiteral( sConditionsHash ) + ' return $elem/Fields(\'id\')' ) );
				if ( catActiveWebTemplate != undefined )
				{
					try
					{
						curActiveWebTemplateDoc = OpenDoc( UrlFromDocID( catActiveWebTemplate.id, 'trash' ) );
						curActiveWebTemplate = curActiveWebTemplateDoc.TopElem;
					}
					catch ( err )
					{
						catActiveWebTemplate = undefined;
					}
				}
				if ( catActiveWebTemplate == undefined &amp;&amp; bCreateParam )
				{
					curActiveWebTemplateDoc = OpenNewDoc( 'x-local://wtv/wtv_active_web_template.xmd' );
					curActiveWebTemplate = curActiveWebTemplateDoc.TopElem;
					if ( curUser != null )
					{
						curActiveWebTemplate.access_level = Env.curUser.access.access_level;
						curActiveWebTemplate.access_role = Env.curUser.access.access_role;
					}
					curActiveWebTemplate.web_design_id = curWebDesignID;
					curActiveWebTemplate.site_id = curSiteID;
					curActiveWebTemplate.mode = curMode;
					curActiveWebTemplateDoc.BindToDb( 'trash' );
					curActiveWebTemplateDoc.Save();
				}
			}
			return curActiveWebTemplateDoc;
	"/>

	<save_cur_active_web_template PROPERTY="1" PARAM="teActiveWebTemplateDocParam" PARAM="bFinishSaveParam" EXPR="
			if ( teActiveWebTemplateDocParam != null &amp;&amp; ( global_settings.settings.template_cache_type == 'object' || global_settings.settings.template_cache_type == 'object_placeholder' ) )
			{
				teActiveWebTemplate = teActiveWebTemplateDocParam.TopElem;
				iCurTemplateCounter = teActiveWebTemplate.override_web_templates.ChildNum + teActiveWebTemplate.custom_web_templates.ChildNum;
				iCurSavedTemplateCounter = ArrayCount( ArraySelectByKey( teActiveWebTemplate.custom_web_templates, true, 'saved' ) );
				if ( teActiveWebTemplate.counter_template != iCurTemplateCounter || ( bFinishSaveParam &amp;&amp; teActiveWebTemplate.counter_saved_return &gt;= teActiveWebTemplate.custom_web_templates.ChildNum ) || ( ! bFinishSaveParam &amp;&amp; teActiveWebTemplate.counter_saved_template != iCurSavedTemplateCounter ) )
				{
					teActiveWebTemplate.counter_template = iCurTemplateCounter;
					teActiveWebTemplate.counter_saved_template = iCurSavedTemplateCounter;
					teActiveWebTemplateDocParam.Save();
//alert('MEGASAVE = '+teActiveWebTemplate.Xml)
					return true;
				}
			}
			return false;
	"/>

	<drop_active_web_templates PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools_web', 'drop_active_web_templates' );

			if ( (tools.sys_db_capability & tools.UNI_CAP_TEMP_OBJECTS_IN_MEMORY) != 0 )
			{
				tools.spxml_unibridge.Object.provider.ClearCache('$$temp_obj');
				return 0;
			}

			iDeleteCount = 0;
			for ( catActiveWebTemplateElem in ArraySelectAll( XQuery( 'active_web_templates' ) ) )
			{
				DeleteDoc( UrlFromDocID( catActiveWebTemplateElem.id, 'trash' ) );
				iDeleteCount++;
			}
			return iDeleteCount;
	"/>

	<get_session_lng PROPERTY="1" PARAM="Session" EXPR="
		var fldLocale = undefined;
		try
		{
			fldLocale = Session.Env.curLng;
			fldLocale.short_id;
		}
		catch(_X_)
		{
			fldLocale = lngs.GetOptChildByKey(global_settings.settings.default_lng.Value);
			if (fldLocale == undefined)
				fldLocale = ArrayFirstElem(lngs);
		}
		return fldLocale;
	"/>

	<check_site_access PROPERTY="1" PARAM="tePersonParam" PARAM="oSiteParam" EXPR="
			iSiteID = OptInt( oSiteParam );
			if ( iSiteID != undefined )
			{
				oSiteParam = FetchDoc( UrlFromDocID( iSiteID ) ).TopElem;
			}

			if ( ( tePersonParam.is_candidate &amp;&amp; ! oSiteParam.owner_candidate ) || ( tePersonParam.is_outstaff &amp;&amp; ! oSiteParam.owner_outstaff ) )
			{
				return false;
			}
			else if ( ! oSiteParam.owner_collaborator )
			{
				return false;
			}

			if ( oSiteParam.owner_objects.ChildNum == 0 )
			{
				return true;
			}

			for ( fldOwnerElem in oSiteParam.owner_objects )
			{
				if ( ( fldOwnerElem.catalog_name == 'collaborator' && tePersonParam.id == fldOwnerElem.object_id )
					||
					( fldOwnerElem.catalog_name == 'org' && tePersonParam.org_id == fldOwnerElem.object_id )
					||
					( fldOwnerElem.catalog_name == 'position' && tePersonParam.position_id == fldOwnerElem.object_id )
					||
					( fldOwnerElem.catalog_name == 'subdivision' && tePersonParam.position_parent_id == fldOwnerElem.object_id )
					||
					( fldOwnerElem.catalog_name == 'group' && ArrayOptFirstElem( XQuery( 'for $elem in group_collaborators where $elem/collaborator_id = ' + tePersonParam.id + ' and $elem/group_id = ' + fldOwnerElem.object_id + ' return $elem/Fields(\'id\')' ) ) != undefined ) )
				{
					return true;
				}
			}
			return false;
	"/>


<!-- OLD SCHOOL -->
	<get_resource_url PROPERTY="1" PARAM="iObjectIDParam" PARAM="Session" EXPR="
			try
			{
				Session;
			}
			catch ( err )
			{
				Session = null;
			}
			return tools_web.get_object_source_url( 'resource', iObjectIDParam, ({ 'Session': Session }) );
	"/>
	<get_custom_web_template_url PROPERTY="1" PARAM="iTemplateIDParam" EXPR="
			return tools_web.get_object_source_url( 'custom_web_template', iTemplateIDParam );
	"/>


	<get_object_source_url PROPERTY="1" PARAM="sCatalogTypeParam" PARAM="iObjectIDParam" PARAM="oParams" EXPR="
			iObjectIDParam = OptInt( iObjectIDParam );
			if ( iObjectIDParam == undefined )
				return '';

			sHostPath = '';
			try
			{
				oParams;
				if ( DataType( oParams ) == 'string' )
				{
					sTypeParam = String( oParams );
					Env = null;
					oParams = ({});
				}
				else
				{
					sTypeParam = oParams.GetOptProperty( 'type', '' );
					Env = oParams.GetOptProperty( 'Env', null );
					sHostPath = oParams.GetOptProperty( 'sHostPath' );
					if ( sHostPath == undefined )
						sHostPath = Env == null ? '' : tools_web.get_base_url_path( Env );
				}
			}
			catch ( err )
			{
				oParams = ({});
				sTypeParam = '';
				Env = null;
			}

			switch ( sCatalogTypeParam )
			{
				case 'custom_web_template':
					sOverride = '';
					sOverrideWebTemplateID = oParams.GetOptProperty( 'override_web_template_id' );
					if ( sOverrideWebTemplateID != undefined )
						sOverride = '&amp;override_web_template_id=' + sOverrideWebTemplateID;
					return sHostPath + '/custom_web_template.html?custom_web_template_id=' + iObjectIDParam + sOverride;
					breal;

				case 'person':
					if ( sTypeParam != '' )
						sTypeParam = '&amp;type=' + sTypeParam + ( StrContains( sTypeParam, 'x' ) ? '' : 'x' + sTypeParam );

					return sHostPath + '/person_icon.html?id=' + iObjectIDParam + sTypeParam;
					break;

				case 'social_avatar':
					return sHostPath + '/avatars/sa_' + iObjectIDParam + '_' + sTypeParam + '.png';
					break;

				case 'resource':
					try
					{
						sSid = '&amp;sid=' + tools_web.get_sum_sid( iObjectIDParam, oParams.Session.sid );
					}
					catch ( err )
					{
						try
						{
							sSid = '&amp;sid=' + tools_web.get_sum_sid( iObjectIDParam, oParams.sid );
						}
						catch ( err )
						{
							sSid = '';
						}
					}
					switch ( sTypeParam )
					{
						case 'library_material':
							return sHostPath + '/view_play_resource.html?object_id=' + iObjectIDParam + sSid;
							break;

						case 'icon':
							sIconType = oParams.GetOptProperty( 'icon_type', '' );
							return sHostPath + '/resource_icon.html?id=' + iObjectIDParam + ( sIconType == '' ? '' : '&amp;type=' + sIconType );
							break;

						case 'lds':
							sImageType = oParams.GetOptProperty( 'image_type', '' );
							return sHostPath + '/lds/get_resource_image.html?resource_id=' + iObjectIDParam + ( sImageType == '' ? '' : '&amp;image_type=' +sImageType );
							break;

						default:
							return sHostPath + '/download_file.html?file_id=' + iObjectIDParam + sSid;
							break;
					}
					break;

				case 'document':
					sTemplate = '';
					teDocument = OpenDoc( UrlFromDocID( iObjectIDParam ) ).TopElem;
					if ( teDocument.attributes.template.HasValue )
					{
						sTemplate = tools_web.doc_link( teDocument );
						oUrlQuery = tools_web.get_url_query( sTemplate );
						if ( oUrlQuery.GetOptProperty( 'mode' ) == 'doc' )
							sTemplate = '';
					}
					return sHostPath + ( sTemplate == '' ? '/view_doc_short.html?doc_id=' + iObjectIDParam : sTemplate );
					break;

				case 'library_material':
					teMaterial = OpenDoc( UrlFromDocID( iObjectIDParam )).TopElem;
					if (teMaterial.use_old_format.Value)
					{
						if(sTypeParam == '')
						{
							xarrFormats = QueryCatalogByKeys('library_material_formats','id',ArrayExtract( teMaterial.library_material_formats, 'PrimaryKey' ));
							if(ArrayOptFind(xarrFormats,'This.format_type_id==\'online_video\'') != undefined)
							{
								sTypeParam = 'online_video';
							}
							else if(ArrayOptFirstElem(teMaterial.unfolded_document.contents) != undefined || ArrayOptFirstElem(teMaterial.unfolded_document.pages) != undefined)
							{
								sTypeParam = 'ebook';
							}
							else if(teMaterial.file_name.HasValue && teMaterial.file_name != '' && teMaterial.allow_download)
							{
								sTypeParam = 'download';
							}
						}
						switch(sTypeParam)
						{
							case 'online_video':
								return sHostPath + '/library_video_player.html?object_id=' + iObjectIDParam;
								brea;
							case 'ebook':
								return sHostPath + '/pf_viewer.html?object_id=' + iObjectIDParam;
								brea;
							case 'download':
								return tools_web.get_object_source_url('resource',teMaterial.file_name,oParams);
								break;
						}
					}
					else
					{
						return sHostPath + '/view_play_resource.html?object_id=' + iObjectIDParam;
					}
					break;

				case 'event':
					if(sTypeParam != '')
					{
						if(sTypeParam == 'webinar_record')
							return sHostPath + '/vclass/vcplayer.html?cid=' + iObjectIDParam;
					}
					break;

				case 'cl_module':
					return sHostPath + '/courselab3/source/module/start.html?module_id=' + iObjectIDParam;
					break;
			}
			return '';
	"/>


	<GetTalentPoolObjectsList PROPERTY="1" PARAM="iPersonIdParam" PARAM="bAddFuncSubordinatesParam" PARAM="bHideDissmissedParam" PARAM="vBossTypeParam" PARAM="iCareerReserveTypeParam" EXPR="

		var arrResult =[]
		try
		{

			var iCareerReserveTypeID=null;
			var iBossTypeID=null
			var strWhere=''
			var strBossWhere=''
			var bShowWithSubordinate=false;

			if (iPersonIdParam!=null&&iPersonIdParam!=undefined)
			{
				try
				{
					switch (vBossTypeParam)
					{
						case false:
									strBossWhere=' and $elem/is_native=false()'
									break;
						case true:
									strBossWhere=' and $elem/is_native=true()'
									break;
						default:
									vBossTypeParam = OptInt(vBossTypeParam,null);
									if (vBossTypeParam != undefined&&vBossTypeParam!=null)
									{
										strBossWhere=' and $elem/boss_type_id='+vBossTypeParam
									}
									else
									{
										if (Trim(vBossTypeParam)!=''&&vBossTypeParam!=null&&vBossTypeParam!=undefined)
										{
											fldBossType=ArrayOptFirstElem(XQuery('for $elem in boss_types where $elem/code=\''+vBossTypeParam+'\' return $elem'))
											if (fldBossType!=undefined)
											{
												strBossWhere=' and $elem/boss_type_id='+fldBossType.id
											}
											else
											{
												return Array()
											}
										}
									}
					}
				}
				catch(ex)
				{
					vBossTypeParam=null;
				}

				try
				{
					if (iCareerReserveTypeParam!=null&&iCareerReserveTypeParam!=undefined)
					{
						iCareerReserveType=OptInt(iCareerReserveTypeParam,null)
					}
					else
					{
						throw 'no param'
					}
				}
				catch(ex)
				{
					iCareerReserveType=null
				}


				var strSinglePositionWhere=''
				var arrSelectedObjects=[]
				var xarrPersonnelReserves = []
				var xarrCareerReserveFuncManagers=XQuery('for $elem in talent_pool_func_managers where $elem/catalog=\'career_reserve_type\' and $elem/person_id=' + iPersonIdParam + strBossWhere +' return $elem')
				var isCareerReserveFuncManager=false
				var fldCareerReserveTypeManager=undefined;


				if (iCareerReserveTypeID != null)
				{
					fldCareerReserveTypeManager=ArrayOptFind(xarrCareerReserveFuncManagers,'This.object_id==' + iCareerReserveTypeID)
					if (fldCareerReserveTypeManager!=undefined)
					{
						strWhere = strWhere+(strWhere != ''?' and ':'where')+' $elem/career_reserve_type_id=' + iCareerReserveTypeID;
						isCareerReserveFuncManager=true;
					}
					strSinglePositionWhere=strSinglePositionWhere+(strSinglePositionWhere != ''?' and ':'where')+' $elem/career_reserve_type_id='+iCareerReserveTypeID
				}
				else
				{
					fldCareerReserveTypeManager=ArrayOptFirstElem(xarrCareerReserveFuncManagers)
					if (fldCareerReserveTypeManager!=undefined)
					{
						strWhere = strWhere+(strWhere != ''?' and ':'where')+' MatchSome( $elem/career_reserve_type_id, ('+ArrayMerge(xarrCareerReserveFuncManagers,'This.object_id',',')+' ) ) ' ;
					}
				}


				if (fldCareerReserveTypeManager!=undefined)
				{
					xarrPersonnelReserves = tools.xquery('for $elem in personnel_reserves '+strWhere+' return $elem')
				}

				if (!isCareerReserveFuncManager)
				{

					xarrPersonnelReserveFuncMangs = QueryCatalogByKeys('personnel_reserves','id',ArrayExtract(XQuery('for $elem in talent_pool_func_managers where $elem/catalog=\'personnel_reserve\' and $elem/person_id=' + iPersonIdParam + strBossWhere +' return $elem'),'object_id'));
					if (ArrayOptFirstElem(xarrPersonnelReserveFuncMangs)!=undefined)
					{
						strSinglePositionWhere=strSinglePositionWhere+(strSinglePositionWhere != ''?' and ':'where')+' MatchSome( $elem/id, ('+ArrayMerge(xarrPersonnelReserveFuncMangs,'This.id',',')+' ) )';
						xarrPersonnelReserveFuncMangs= tools.xquery('for $elem in personnel_reserves '+strSinglePositionWhere+' return $elem')
						xarrPersonnelReserves = ArraySelectDistinct(ArrayUnion(xarrPersonnelReserves,xarrPersonnelReserveFuncMangs),'This.id')
					}
				}

				xarrCareerReserveFuncMangs = QueryCatalogByKeys('career_reserves','id',ArrayExtract(XQuery('for $elem in talent_pool_func_managers where $elem/catalog=\'career_reserve\' and $elem/person_id=' + iPersonIdParam + strBossWhere +' return $elem'),'object_id'));
				if (ArrayOptFirstElem(xarrCareerReserveFuncMangs)!=undefined)
				{
					xarrPersonnelReserveCareers= QueryCatalogByKeys('personnel_reserves','id',ArrayExtract(xarrCareerReserveFuncMangs,'personnel_reserve_id'));
					xarrPersonnelReserves = ArraySelectDistinct(ArrayUnion(xarrPersonnelReserves,xarrPersonnelReserveCareers),'This.id')
				}

				if (bAddFuncSubordinatesParam)
				{
					arrSubordinates=tools.get_sub_persons_by_func_manager_id(iPersonIdParam,null,vBossTypeParam)
					if (bHideDissmissedParam)
					{
						arrSubordinates=ArraySelect(arrSubordinates,'This.is_dismiss!=true')
					}	xarrPersonnelReserves=ArraySelectDistinct(ArrayUnion(xarrPersonnelReserves,QueryCatalogByKeys('personnel_reserves','person_id',ArrayExtract(arrSubordinates,'id'))),'This.id')
				}

				xarrPersonnelReserves=ArraySelectDistinct(ArrayUnion(xarrPersonnelReserves,XQuery('for $elem in personnel_reserves where $elem/person_id='+iPersonIdParam+' return $elem')),'This.id')

				if ( global_settings.settings.check_access_on_lists )
				{
					for (fldPersonnelReserve in xarrPersonnelReserves)
					{
						try
						{
							if ( !tools_web.check_access(  OpenDoc( UrlFromDocID ( fldPersonnelReserve.id ), 'form=x-local://wtv/wtv_form_doc_access.xmd;ignore-top-elem-name=1' ).TopElem , iPersonIdParam, null, null ) )
								continue;
						}
						catch( err )
						{
							continue;
						}
						arrResult.push(fldPersonnelReserve)
					}
				}
				else
				{
					arrResult=xarrPersonnelReserves
				}
			}
		}
		catch ( err )
		{
			tools.log('GetTalentPoolObjectsList: ' + err, 'error');
		}
		return arrResult


	"/>

	<GetRequiredQualificationsList PROPERTY="1" PARAM="iPersonIDParam" PARAM="sSearchListParam" PARAM="bCatalogListParam" EXPR="
		arrResult =Array()
		try
		{
			strSearchList='subdivision_group;position_common;group;position_family'
			try
			{
				iPersonIDParam=Int(iPersonIDParam)
			}
			catch(ex)
			{
				throw 'No user id'
			}

			try
			{
				bCatalogList=(bCatalogListParam==true)
			}
			catch(ex)
			{
				bCatalogList=false;
			}

			fldCollaborator=ArrayOptFirstElem(XQuery('for $elem in collaborators where $elem/id='+iPersonIDParam+' return $elem'))

			if (fldCollaborator==undefined)
			{
				throw 'No user'
			}

			fldPosition=fldCollaborator.position_id.OptForeignElem
			fldSubdivision=fldCollaborator.position_parent_id.OptForeignElem
			try
			{
				if (Trim(sSearchListParam)!='')
				{
					strSearchList=sSearchListParam
				}
			}
			catch(ex)
			{
			}

			try
			{
				arrSearchObjects=strSearchList.split(';')
			}
			catch(ex)
			{
				arrSearchObjects=Array();
			}

			function fnBuildQualificationObject(fldQualificationParam,sObjectTypeParam)
			{
				oNewElem = new Object
				oNewElem.id=fldQualificationParam.id.Value
				oNewElem.name=fldQualificationParam.name.Value
				oNewElem.status=''
				oNewElem.expiration_date=''
				oNewElem.base=sObjectTypeParam;

				fldAssignedQualification=ArrayOptFirstElem(XQuery('for $elem in qualification_assignments where $elem/person_id='+iPersonIDParam+' and $elem/qualification_id='+fldQualificationParam.id.Value+' order by $elem/assignment_date descending return $elem'))
				if (fldAssignedQualification!=undefined)
				{
					oNewElem.status=fldAssignedQualification.status.ForeignElem.name.Value
					oNewElem.expiration_date=StrDate(fldAssignedQualification.expiration_date,false,false)
				}
				return oNewElem
			}

			arrObjectIDs=Array()

			fldPositionCommon=undefined
			if (ArrayOptFind(arrSearchObjects,'This==\'position_common\'')!=undefined)
			{
				if (fldPosition!=undefined)
				{
					fldPositionCommon=fldPosition.position_common_id.OptForeignElem
					if (fldPositionCommon!=undefined)
					{
						arrObjectIDs[ArrayCount(arrObjectIDs)]=fldPositionCommon.id.Value
					}
				}
			}
			if (ArrayOptFind(arrSearchObjects,'This==\'position_family\'')!=undefined)
			{
				arrPositionFamilys=Array()
				if (fldPositionCommon!=undefined)
				{
					arrPositionFamilys=QueryCatalogByKeys('position_familys','id',ArrayExtract(ArraySelect(String(fldPositionCommon.position_familys).split(';'),'OptInt(This,null)!=null'),'Int(This)'))
				}
				if (fldPosition!=undefined)
				{
					try
					{
						tePosition=OpenDoc( UrlFromDocID( fldPosition.id ) ).TopElem;
						if (tePosition.position_family_id.HasValue)
						{
							arrPositionFamilys=ArrayUnion(arrPositionFamilys,XQuery('for $elem in position_familys where $elem/id='+tePosition.position_family_id+' return $elem'))
						}
					}
					catch(ex)
					{
					}
				}

				arrObjectIDs=ArrayUnion(arrObjectIDs,ArrayExtract(arrPositionFamilys,'This.id'))
				if (ArrayOptFind(arrSearchObjects,'This==\'subdivision_group\'')!=undefined)
				{
					arrObjectIDs=ArrayUnion(arrObjectIDs,ArrayExtract(QueryCatalogByKeys('subdivision_groups','id',ArrayExtract(arrPositionFamilys,'This.subdivision_group_id')),'This.id'))
				}
			}
			if (ArrayOptFind(arrSearchObjects,'This==\'group\'')!=undefined)
			{
				arrObjectIDs=ArrayUnion(arrObjectIDs,ArrayExtract(QueryCatalogByKeys('groups','id',ArrayExtract(XQuery('for $elem in group_collaborators where $elem/collaborator_id='+iPersonIDParam+' return $elem'),'group_id')),'This.id'))
			}
			if (ArrayOptFind(arrSearchObjects,'This==\'subdivision_group\'')!=undefined&&fldSubdivision!=undefined)
			{
				arrObjectIDs=ArrayUnion(arrObjectIDs,ArrayExtract(QueryCatalogByKeys('subdivision_groups','id',ArrayExtract(XQuery('for $elem in subdivision_group_subdivisions where $elem/subdivision_id='+fldSubdivision.id+' return $elem'),'subdivision_group_id')),'This.id'))
			}

			iResultCounter=0
			arrObjectIDs=ArraySelectDistinct(arrObjectIDs,'This')
			for (iObjectID in arrObjectIDs)
			{
				try
				{
					teObject=OpenDoc( UrlFromDocID( iObjectID ) ).TopElem;
				}
				catch(ex)
				{
					continue
				}

				strObjectType=''
				switch(teObject.Name)
				{
					case 'position_common':
					{
						strObjectType=ms_tools.get_const('c_position_common')
						break;
					}
					case 'position_family':
					{
						strObjectType=ms_tools.get_const('re7n9mti11')
						break;
					}
					case 'group':
					{
						strObjectType=ms_tools.get_const('c_group')
						break;
					}
					case 'subdivision_group':
					{
						strObjectType=ms_tools.get_const('1akgrp8ook')
						break;
					}
				}

				arrQualifications=QueryCatalogByKeys('qualifications','id',ArrayExtract(teObject.qualifications,'qualification_id'))

				if (!bCatalogList)
				{
					for (fldQualification in arrQualifications)
					{
						curResult=ArrayOptFind(arrResult,'This.id=='+fldQualification.id.Value)
						if (curResult==undefined)
						{
							curResult=fnBuildQualificationObject(fldQualification,strObjectType+' &quot;'+teObject.name.Value+'&quot;')
							arrResult[iResultCounter]=curResult
							iResultCounter++
						}
					}
				}
				else
				{
					arrResult=ArrayUnion(arrResult,arrQualifications)
				}
			}

		}
		catch(ex)
		{
			alert('GetRequiredQualificationsList: '+ex)
		}
		return arrResult
	"/>

	<get_recommended_materials PROPERTY="1" PARAM="iPersonIDParam" PARAM="sSearchListParam" PARAM="bCatalogListParam" PARAM="iRootIDParam" EXPR="
		arrResult =[];
		try
		{
			strSearchList = 'subdivision_group;position_common;group;position_family';
			try
			{
				iPersonIDParam=Int(iPersonIDParam);
			}
			catch(ex)
			{
				throw 'No user id';
			}

			try
			{
				bCatalogList=(bCatalogListParam==true);
			}
			catch(ex)
			{
				bCatalogList=false;
			}

			fldCollaborator=ArrayOptFirstElem(XQuery('for $elem in collaborators where $elem/id='+iPersonIDParam+' return $elem'));

			if (fldCollaborator==undefined)
			{
				throw 'No user';
			}

			try
			{
				iRootID=OptInt(iRootIDParam,0);
			}
			catch(ex)
			{
				iRootID=0;
			}

			arrLibrarySections=Array();
			if (iRootID!=0)
			{
				arrLibrarySections=ArrayUnion(XQuery('for $elem in library_sections where $elem/id='+iRootID+' return $elem/Fields(\'id\')'),tools.xquery('for $elem in library_sections where IsHierChild( $elem/id, ' + iRootID + ' ) order by $elem/Hier() return $elem/id'));
			}


			fldPosition=fldCollaborator.position_id.OptForeignElem
			fldSubdivision=fldCollaborator.position_parent_id.OptForeignElem
			try
			{
				if (Trim(sSearchListParam)!='')
				{
					strSearchList=sSearchListParam;
				}
			}
			catch(ex)
			{
			}

			try
			{
				arrSearchObjects=strSearchList.split(';')
			}
			catch(ex)
			{
				arrSearchObjects=Array();
			}

			function fnBuildMaterialObject(fldMaterialParam,sObjectTypeParam)
			{
				oNewElem = {
				'id':fldMaterialParam.id.Value,
				'name':fldMaterialParam.name.Value,
				'status':'',
				'section_id':fldMaterialParam.section_id.Value,
				'last_viewing_date':'',
				'base':String(sObjectTypeParam)};

				fldAssignedMaterial=ArrayOptFirstElem(XQuery('for $elem in library_material_viewings where $elem/person_id='+iPersonIDParam+' and $elem/material_id='+fldMaterialParam.id.Value+' order by $elem/assignment_date descending return $elem'))
				if (fldAssignedMaterial!=undefined)
				{
					oNewElem.SetProperty('status',fldAssignedMaterial.state_id.ForeignElem.name.Value);
					oNewElem.SetProperty('last_viewing_date',StrDate(fldAssignedMaterial.last_viewing_date,false,false));
				}
				return oNewElem;
			}

			arrObjectIDs=Array();

			fldPositionCommon=undefined;
			if (ArrayOptFind(arrSearchObjects,'This==\'position_common\'')!=undefined)
			{
				if (fldPosition!=undefined)
				{
					fldPositionCommon=fldPosition.position_common_id.OptForeignElem;
					if (fldPositionCommon!=undefined)
					{
						arrObjectIDs[ArrayCount(arrObjectIDs)]=fldPositionCommon.id.Value;
					}
				}
			}
			if (ArrayOptFind(arrSearchObjects,'This==\'position_family\'')!=undefined)
			{
				arrPositionFamilys=Array();
				if (fldPositionCommon!=undefined)
				{
					arrPositionFamilys=QueryCatalogByKeys('position_familys','id',ArrayExtract(ArraySelect(String(fldPositionCommon.position_familys).split(';'),'OptInt(This,null)!=null'),'Int(This)'));
				}
				if (fldPosition!=undefined)
				{
					try
					{
						tePosition=OpenDoc( UrlFromDocID( fldPosition.id ) ).TopElem;
						if (tePosition.position_family_id.HasValue)
						{
							arrPositionFamilys=ArrayUnion(arrPositionFamilys,XQuery('for $elem in position_familys where $elem/id='+tePosition.position_family_id+' return $elem'));
						}
					}
					catch(ex)
					{
					}
				}

				arrObjectIDs=ArrayUnion(arrObjectIDs,ArrayExtract(arrPositionFamilys,'This.id'));
				if (ArrayOptFind(arrSearchObjects,'This==\'subdivision_group\'')!=undefined)
				{
					arrObjectIDs=ArrayUnion(arrObjectIDs,ArrayExtract(QueryCatalogByKeys('subdivision_groups','id',ArrayExtract(arrPositionFamilys,'This.subdivision_group_id')),'This.id'));
				}
			}
			if (ArrayOptFind(arrSearchObjects,'This==\'group\'')!=undefined)
			{
				arrObjectIDs=ArrayUnion(arrObjectIDs,ArrayExtract(QueryCatalogByKeys('groups','id',ArrayExtract(XQuery('for $elem in group_collaborators where $elem/collaborator_id='+iPersonIDParam+' return $elem'),'group_id')),'This.id'));
			}
			if (ArrayOptFind(arrSearchObjects,'This==\'subdivision_group\'')!=undefined&&fldSubdivision!=undefined)
			{
				arrObjectIDs=ArrayUnion(arrObjectIDs,ArrayExtract(QueryCatalogByKeys('subdivision_groups','id',ArrayExtract(XQuery('for $elem in subdivision_group_subdivisions where $elem/subdivision_id='+fldSubdivision.id+' return $elem'),'subdivision_group_id')),'This.id'));
			}

			arrObjectIDs=ArraySelectDistinct(arrObjectIDs,'This');
			for (iObjectID in arrObjectIDs)
			{
				try
				{
					teObject=OpenDoc( UrlFromDocID( iObjectID ) ).TopElem;
				}
				catch(ex)
				{
					continue
				}

				strObjectType=''
				switch(teObject.Name)
				{
					case 'position_common':
					{
						strObjectType=ms_tools.get_const('c_position_common');
						break;
					}
					case 'position_family':
					{
						strObjectType=ms_tools.get_const('re7n9mti11');
						break;
					}
					case 'group':
					{
						strObjectType=ms_tools.get_const('c_group');
						break;
					}
					case 'subdivision_group':
					{
						strObjectType=ms_tools.get_const('1akgrp8ook');
						break;
					}
				}

				arrMaterials = QueryCatalogByKeys('library_materials','id',ArrayExtract(teObject.recomended_library_materials,'material_id'));

				if (!bCatalogList)
				{
					for (fldMaterial in arrMaterials)
					{
						curResult=ArrayOptFind(arrResult,'This.id=='+fldMaterial.id.Value)
						if (curResult==undefined)
						{
							curResult=fnBuildMaterialObject(fldMaterial,strObjectType+' &quot;'+teObject.name.Value+'&quot;');
							arrResult.push(curResult);
						}
					}
				}
				else
				{
					arrResult=ArrayUnion(arrResult,arrMaterials);
				}
			}

			if (ArrayOptFirstElem(arrLibrarySections)!=undefined)
			{
				arrFinalResult=[];
				for (fldResult in arrResult)
				{
					if (ArrayOptFindByKey(arrLibrarySections,fldResult.section_id.Value, 'id')!=undefined)
					{
						arrFinalResult.push(fldResult);
					}
				}
				arrResult=arrFinalResult;
			}
		}
		catch(ex)
		{
			alert('get_recommended_materials: '+ex)
		}

		return ArraySelectDistinct(arrResult,'id');
	"/>

	<set_var_eval PROPERTY="1" PARAM="sVarNamaParam" PARAM="curVars" PARAM="oEvalParam" PARAM="sEvalTypeParam" EXPR="
			switch ( sEvalTypeParam )
			{
				case 'eval':
					oEvalParam = eval( oEvalParam );
					if ( IsArray( oEvalParam ) )
						oEvalParam = ArrayDirect( oEvalParam );
					break;
				case 'xquery':
					oEvalParam = ArrayDirect( XQuery( oEvalParam ) );
					break;
				case 'topelem':
					oEvalParam = OpenDoc( UrlFromDocID( oEvalParam ) ).TopElem;
					break;
				default:
					if ( IsArray( oEvalParam ) )
						oEvalParam = ArrayDirect( oEvalParam );
					break;
			}
			curVars.SetProperty( sVarNamaParam, oEvalParam );
			return oEvalParam;
	"/>
	<get_var_eval PROPERTY="1" PARAM="sVarNamaParam" PARAM="curVars" PARAM="oEvalParam" PARAM="sEvalTypeParam" EXPR="
			xarrQuery = curVars.GetOptProperty( sVarNamaParam );
			if ( xarrQuery != undefined )
				return xarrQuery;

			return tools_web.set_var_eval( sVarNamaParam, curVars, oEvalParam, sEvalTypeParam )
	"/>


	<convert_desc_to_html PROPERTY="1" PARAM="sDescParam" EXPR="
			sDescParam = tools_web.convert_xss( sDescParam );
			sDescParam = tools_web.convert_bbcode_to_html( sDescParam );

			for ( _smile in common.forum_smile_types )
				sDescParam = StrReplace( sDescParam, _smile.id, '&lt;img src=&quot;' + _smile.url + '&quot; alt=&quot;' + _smile.id + '&quot;/&gt;' );

			return sDescParam;
	"/>

	<get_user_recommended_learning PROPERTY="1" PARAM="iUserIdParam" PARAM="teUser" EXPR="
		try
		{
			teUser;
		}
		catch(x)
		{
			teUser = OpenDoc( UrlFromDocID( iUserIdParam ) ).TopElem;
		}
		return tools.call_code_library_method( 'libMain', 'get_user_recommended_learning', [ iUserIdParam, teUser, [ 'education_method' ], null, 'bs' ] ).array;
	"/>


	<set_user_data PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oConditionsParam" PARAM="oValueParam" PARAM="iDurationParam" PARAM="sListNameParam" EXPR="
		try
		{
			if ( oValueParam == null || oValueParam == undefined )
				throw 'no_data';
		}
		catch ( err )
		{
			return false;
		}

		var bListable = false;
		try
		{
			if ( sListNameParam == null || sListNameParam == '' )
			{
				throw 'no_data';
			}
			bListable = true;
		}
		catch ( err )
		{
		}

		if ( DataType( oValueParam ) == 'string' || DataType( oValueParam ) == 'integer' )
		{
			oValueParam = '$' + oValueParam;
		}
		else
		{
			//oValueParam = oValueParam.ExportToXml();
			oValueParam = EncodeJson( oValueParam );
		}

		iDurationParam = OptInt( iDurationParam, null );
		if ( tools.sys_db_capability & tools.UNI_CAP_USER_CACHE )
		{
			tools.spxml_unibridge.Object.provider.SetUserData( oConditionsParam, oValueParam, iDurationParam );
		}
		else
		{
			if ( IsArray( oConditionsParam ) )
			{
				docUserData = tools.obtain_doc_by_key( 'user_data', oConditionsParam );
				docUserData.TopElem.code = oConditionsParam.GetOptProperty( 'code', '' );
			}
			else
			{
				docUserData = tools.obtain_doc_by_key( 'user_data', 'code', String( oConditionsParam ) );
				docUserData.TopElem.code = oConditionsParam;
			}

			if ( iDurationParam == null )
				docUserData.TopElem.delete_date.Clear();
			else
				docUserData.TopElem.delete_date = DateOffset( CurDate, iDurationParam );

			docUserData.TopElem.data = oValueParam;
			docUserData.Save();
		}
		if ( bListable )
		{
			oConditionsParam = '' + oConditionsParam;
			var oListUserData = tools_web.get_user_data( sListNameParam );
			if ( oListUserData == null || ! oListUserData.HasProperty( 'keys' ) )
			{
				oListUserData = {
					keys: []
				};
			}
			var oKey = ArrayOptFindByKey( oListUserData.keys, oConditionsParam, 'key' );
			if ( oKey == undefined )
			{
				oListUserData.keys.push( {
					key: oConditionsParam,
					date: Date()
				} );
			}
			tools_web.set_user_data( sListNameParam, oListUserData, null );
		}
		return true;
	"/>

	<get_user_data PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oConditionsParam" EXPR="
			if ( tools.sys_db_capability & tools.UNI_CAP_USER_CACHE )
			{
				sValue = tools.spxml_unibridge.Object.provider.GetUserData( oConditionsParam );
				if ( sValue == null || sValue == undefined )
					return null;
			}
			else
			{
				if ( IsArray( oConditionsParam ) )
					docUserData = tools.get_doc_by_key( 'user_data', oConditionsParam );
				else
					docUserData = tools.get_doc_by_key( 'user_data', 'code', String( oConditionsParam ) );

				if ( docUserData == null )
					return null;

				if ( docUserData.TopElem.delete_date.HasValue &amp;&amp; docUserData.TopElem.delete_date &lt; CurDate )
					return null;

				sValue = docUserData.TopElem.data.Value;
			}

			if ( StrBegins( sValue, '$' ) )
				return StrRightRangePos( sValue, 1 );

			//oRet = new Object;
			//oRet.ImportFromXml( sValue );
			//return oRet;
			//return ParseJson( sValue );
			try
			{
				var tmpRes = ParseJson( sValue );
				return tmpRes;
			}
			catch( _zzz_ )
			{
				return null;
			}
	"/>

	<remove_user_data PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sKeyParam" PARAM="sListNameParam" EXPR="
			var bListable = false;
			try
			{
				if ( sListNameParam == null || sListNameParam == '' )
				{
					throw 'no_data';
				}
				bListable = true;
			}
			catch ( err )
			{
			}

			var bResult = false;
			if ( tools.sys_db_capability & tools.UNI_CAP_USER_CACHE )
			{
				bResult = tools.spxml_unibridge.Object.provider.RemoveUserData( sKeyParam );
			}
			else
			{
				catUserData = ArrayOptFirstElem( XQuery( 'for $elem in user_datas where $elem/code = ' + XQueryLiteral( String( sKeyParam ) ) + ' return $elem/Fields(\'id\')' ) );
				if ( catUserData != undefined )
				{
					DeleteDoc( UrlFromDocID( catUserData.id, 'trash' ), true );
					bResult = true;
				}
			}
			if ( bListable )
			{
				var oListUserData = tools_web.get_user_data( sListNameParam );
				if ( oListUserData != null &amp;&amp; oListUserData.HasProperty( 'keys' ) )
				{
					if ( sKeyParam == null )
					{
						for ( oKeyElem in oListUserData.keys )
						{
							tools_web.remove_user_data( oKeyElem.key );
						}
						tools_web.remove_user_data( sListNameParam );
					}
					else
					{
					}
				}
			}
			return bResult;
	"/>

	<remove_user_data_by_prefix PROPERTY="1" PARAM="sKeyParam" EXPR="
			if ( tools.sys_db_capability & tools.UNI_CAP_USER_CACHE )
			{
				tools.spxml_unibridge.Object.provider.ClearUserDataByPrefix( sKeyParam + '*' );
			}
			else
			{
				var xarrUserData = XQuery( 'for $elem in user_datas where contains( $elem/code, ' + XQueryLiteral( String( sKeyParam ) ) + ' ) return $elem/Fields(\'id\')' );
				for ( carUserDataElem in xarrUserData )
				{
					DeleteDoc( UrlFromDocID( carUserDataElem.id, 'trash' ), true );
				}
			}
			return true;
	"/>



	<obtain_text_area PROPERTY="1" PARAM="iDocIDParam" PARAM="teDocTarget" EXPR="
			if ( iDocIDParam != null &amp;&amp; iDocIDParam != '' &amp;&amp; ! teDocTarget.text_area.HasValue &amp;&amp; (tools.sys_db_capability &amp; tools.UNI_CAP_CLUSTER) != 0 )
			{
				return OpenDoc( UrlFromDocID( Int( iDocIDParam ) ) ).TopElem;
				//teDocTarget.text_area = OpenDoc( UrlFromDocID( Int( iDocIDParam ) ) ).TopElem.text_area;
			}
			return teDocTarget;
	"/>


	<get_host_name PROPERTY="1" PARAM="sUrlParam" EXPR="
			curHostName = StrLowerCase( UrlHost( sUrlParam ) );
			if ( ! StrContains( curHostName, ':' ) )
				curHostName += UrlSchema( sUrlParam ) == 'https' ? ':443' : ':80';
			return curHostName;
	"/>

	<get_cur_host_name PROPERTY="1" PARAM="teHostParam" PARAM="oRequestParam" EXPR="
			return teHostParam.referer_host_path.HasValue ? tools_web.get_host_name( teHostParam.referer_host_path ) : ( StrContains( teHostParam.host, '*' ) ? tools_web.get_host_name( oRequestParam.Url ) : RValue( teHostParam.host ) );
	"/>

	<get_cur_host_path PROPERTY="1" PARAM="teHostParam" PARAM="oRequestParam" EXPR="
			return tools_web.get_cur_host_path_by_url( teHostParam, oRequestParam.Url );
	"/>
	<get_cur_host_path_by_url PROPERTY="1" PARAM="teHostParam" PARAM="sUrlParam" EXPR="
			return teHostParam.referer_host_path.HasValue ? teHostParam.referer_host_path.Value : UrlSchema( sUrlParam ) + '://' + ( StrContains( teHostParam.host, '*' ) ? tools_web.get_host_name( sUrlParam ) : RValue( teHostParam.host ) );
	"/>

	<get_cur_hosts PROPERTY="1" PARAM="oRequestParam" EXPR="
			sHostName = tools_web.get_host_name( oRequestParam.Url );
			xarrHosts = XQuery( 'for $elem in hosts where $elem/host = \'' + sHostName + '\' return $elem/Fields(\'id\',\'site_id\',\'portal_auth_type\',\'allow_lds_auth\')' );
			catHost = ArrayOptFirstElem( xarrHosts );
			if ( catHost == undefined )
			{
				xarrHosts = XQuery( 'for $elem in hosts where $elem/host = \'*:0\' or $elem/host = \'*:' + sHostName.split( ':' )[ 1 ] + '\' return $elem/Fields(\'id\',\'site_id\',\'portal_auth_type\',\'allow_lds_auth\')' );
			}
			return ArraySelectAll( xarrHosts );
	"/>

	<get_cur_host PROPERTY="1" PARAM="oRequestParam" EXPR="
			try
			{
				oRequestParam.Url;
			}
			catch ( err )
			{
				return tools_web.get_cur_object_by_field( oRequestParam, 'curHostID' );
			}

			xarrHosts = tools_web.get_cur_hosts( oRequestParam );
			catHost = ArrayOptFirstElem( xarrHosts );
			if ( catHost != undefined )
			{
				for ( catHostElem in xarrHosts )
				{
					if ( catHostElem.site_id.HasValue )
					{
						return FetchDoc( UrlFromDocID( catHostElem.id ) ).TopElem;
					}
				}
				return FetchDoc( UrlFromDocID( catHost.id ) ).TopElem;
			}
			return null;
	"/>



	<is_correct_question PROPERTY="1" PARAM="fldquestionParam" PARAM="teItemParam" EXPR="
			if ( fldquestionParam.Name == 'item' )
			{
				if ( teItemParam.ChildExists( 'ws_eval' ) &amp;&amp; ( teItemParam.ws_eval == 'expert' || tools_web.is_true( teItemParam.ws_eval ) ) )
				{
					return tools_web.get_item_objectives_value( fldquestionParam ) &gt; 0;
				}

				arrAnswers = tools.get_data_answers( fldquestionParam );
				iAnswersCount = ArrayCount( arrAnswers );
				if ( iAnswersCount == 0 )
					return false;

				function proc_resprocessing( sCondParam )
				{
					var bTrue = false;
					if ( teItemParam.ChildExists( 'resprocessing' ) )
					{
						for ( fldRespconditionElem in teItemParam.resprocessing )
						{
							if ( fldRespconditionElem.Name != 'respcondition' || ! fldRespconditionElem.ChildExists( 'conditionvar' ) )
								continue;

							for ( fldVarElem in fldRespconditionElem.conditionvar )
							{
								sRespident = fldVarElem.OptChild( 'respident' );
								if ( sRespident == undefined )
									sRespident = fldVarElem.OptAttrValue( 'respident' );
								else
									sRespident = sRespident.Value;
								if ( sRespident == '' )
									continue;

								oAnswer = ArrayOptFindByKey( arrAnswers, sRespident, 'ident' );
								if ( oAnswer == undefined )
								{
									if ( sCondParam == 'and' )
										return false;
									else
										continue;
								}
								bCase = fldVarElem.OptChild( 'case' );
								if ( bCase == undefined )
									bCase = fldVarElem.OptAttrValue( 'case' );
								else
									bCase = bCase.Value;
								bCase = tools_web.is_true( bCase );

								switch ( fldVarElem.Name )
								{
									case 'varequal':
										if ( bCase )
											bTrue = fldVarElem.Value == oAnswer.value;
										else
											bTrue = StrLowerCase( fldVarElem.Value ) == StrLowerCase( oAnswer.value );
										break;

									case 'varsubstring':
										bTrue = StrContains( fldVarElem.Value, oAnswer.value, ( ! bCase ) );
										break;

									case 'vargt':
										bTrue = OptReal( oAnswer.value ) &gt; OptReal( fldVarElem.Value );
										break;

									case 'vargte':
										bTrue = OptReal( oAnswer.value ) &gt;= OptReal( fldVarElem.Value );
										break;

									case 'varlt':
										bTrue = OptReal( oAnswer.value ) &lt;  OptReal( fldVarElem.Value );
										break;

									case 'varlte':
										bTrue = OptReal( oAnswer.value ) &lt;= OptReal( fldVarElem.Value );
										break;
								}
								if ( bTrue )
								{
									if ( sCondParam != 'and' )
										return true;
								}
								else
								{
									if ( sCondParam == 'and' )
										return false;
								}
							}
						}
					}
					return ( sCondParam == 'and' );
				}

				switch ( fldquestionParam.type )
				{
					case 'match':
					case 'numeric':
						return proc_resprocessing( 'and' );
						break;

					case 'fib':
						return proc_resprocessing( 'or' );
						break;

					case 'ordered':
						for ( fldRespconditionElem in teItemParam.resprocessing )
						{
							if ( fldRespconditionElem.Name != 'respcondition' || ! fldRespconditionElem.ChildExists( 'conditionvar' ) )
								continue;

							iIndex = 0;
							for ( fldVarequal in fldRespconditionElem.conditionvar )
							{
								if ( fldVarequal.Name != 'varequal' )
									continue;

								if ( iIndex &gt;= iAnswersCount )
									return false;

								if ( fldVarequal.Value != arrAnswers[ iIndex ].value )
									return false;
								iIndex++;
							}
							break;
						}
						break;

					default:
						iQualCount = 0;
						for ( fldRespconditionElem in teItemParam.resprocessing )
						{
							if ( fldRespconditionElem.Name != 'respcondition' || ! fldRespconditionElem.ChildExists( 'conditionvar' ) )
								continue;

							for ( fldVarequal in fldRespconditionElem.conditionvar )
							{
								if ( fldVarequal.Name != 'varequal' )
									continue;

								if ( ArrayOptFindByKey( arrAnswers, fldVarequal.Value, 'value' ) == undefined )
									return false;
								iQualCount++;
							}
						}
						if ( iAnswersCount != iQualCount )
							return false;
						break;
				}
			}
			else if ( fldquestionParam.ws_not_calc_correct )
			{
				try
				{
					if ( teItemParam == undefined )
						throw 'no_data';
				}
				catch ( err )
				{
					teItemParam = null;
				}
				if ( teItemParam == null )
				{
					try
					{
						teItemParam = OpenDoc( UrlFromDocID( Int( fldquestionParam.ident ) ) ).TopElem;
					}
					catch ( err )
					{
						return false;
					}
				}

				if ( teItemParam.expert_eval )
				{
					return OptReal( fldquestionParam.points ) &gt; 0;
				}

				if ( teItemParam.type_id == 'order' )
				{
					return ArrayOptFind( fldquestionParam.variant, 'Trim(This)!=ident' ) == undefined;
				}
				else
				{
					for ( fldVariantElem in fldquestionParam.variant )
					{
						arrIdent = String( fldVariantElem.ident ).split( '_' );
						fldAnswerChild = teItemParam.answers.GetOptChildByKey( arrIdent[ ArrayCount( arrIdent ) - 1 ] );
						if ( fldAnswerChild == undefined )
						{
							return false;
							break;
						}

						switch ( teItemParam.type_id )
						{
							case 'numerical_fill_in_blank':
								if ( ! fldVariantElem.value.HasValue )
								{
									return false;
									break;
								}
								sEval = tools_web.replace_condition_operators( fldAnswerChild.conditions, fldVariantElem.value );
								try
								{
									if ( ( SafeEval( sEval ) ) == false )
									{
										return false;
										break;
									}
								}
								catch ( err )
								{
									return false;
									break;
								}
								break;

							case 'gap_fill':
								bCorrectCondition = false;
								for ( fldConditionElem in fldAnswerChild.conditions )
								{
									if ( fldConditionElem.sentence_option_id == 'equal' )
									{
										if ( ( fldConditionElem.case_sensitive ? fldVariantElem.value : StrLowerCase( fldVariantElem.value ) ) == ( fldConditionElem.case_sensitive ? fldConditionElem.value : StrLowerCase( fldConditionElem.value ) ) )
										{
											bCorrectCondition = true;
											break;
										}
									}
									else
									{
										if ( StrContains( ( fldConditionElem.case_sensitive ? fldVariantElem.value : StrLowerCase( fldVariantElem.value ) ), ( fldConditionElem.case_sensitive ? fldConditionElem.value : StrLowerCase( fldConditionElem.value ) ) ) )
										{
											bCorrectCondition = true;
											break;
										}
									}
								}
								if ( ! bCorrectCondition )
								{
									return false;
									break;
								}
								break;

							case 'match_item':
								arrIdentAnswer = Trim( fldVariantElem.Value ).split( '_' );
								if ( fldAnswerChild.values.GetOptChildByKey( arrIdentAnswer[ ArrayCount( arrIdentAnswer ) - 1 ] ) == undefined )
								{
									return false;
									break;
								}
								break;

							default:
								if ( fldAnswerChild.is_correct_answer.XmlValue != Trim( fldVariantElem.Value ) )
								{
									return false;
									break;
								}
								break;
						}
					}
				}
			}
			else
			{
				if ( fldquestionParam.ws_eval )
				{
					return OptReal( fldquestionParam.points ) &gt; 0;
				}

				switch ( fldquestionParam.qtype )
				{
					case 'range':
						return ArrayOptFind( fldquestionParam.variant, 'Trim(This)!=ident' ) == undefined;
						break;

					case 'numeric':
						for ( fldVariantElem in fldquestionParam.variant )
						{
							if ( ! fldVariantElem.value.HasValue )
							{
								return false;
								break;
							}
							sEval = tools_web.replace_condition_operators( fldVariantElem.cond, fldVariantElem.value );
							try
							{
								if ( ( SafeEval( sEval ) ) == false )
								{
									return false;
									break;
								}
							}
							catch ( err )
							{
								return false;
								break;
							}
						}
						break;

					case 'text':
						for ( fldVariantElem in fldquestionParam.variant )
						{
							bCorrectCondition = false;
							for ( fldConditionElem in fldVariantElem.cond )
							{
								bCase = fldConditionElem.Child( 'case' ).Value;
								bCase = bCase == '1' || StrLowerCase( bCase ) == 'yes';
								if ( fldConditionElem.operator == 'eq' )
								{
									if ( ( bCase ? fldVariantElem.value : StrLowerCase( fldVariantElem.value ) ) == ( bCase ? fldConditionElem.Value : StrLowerCase( fldConditionElem.Value ) ) )
									{
										bCorrectCondition = true;
										break;
									}
								}
								else
								{
									if ( StrContains( ( bCase ? fldVariantElem.value : StrLowerCase( fldVariantElem.value ) ), ( bCase ? fldConditionElem.Value : StrLowerCase( fldConditionElem.Value ) ) ) )
									{
										bCorrectCondition = true;
										break;
									}
								}
							}
							if ( ! bCorrectCondition )
							{
								return false;
								break;
							}
						}
						break;

					case 'oto':
						return ArrayOptFind( fldquestionParam.variant, 'Trim(This)!=correct' ) == undefined;
						break;

					default:
						return ArrayOptFind( fldquestionParam.variant, 'Trim(This)!=correct.XmlValue' ) == undefined;
						break;
				}
			}
			return true;
	"/>



	<save_cur_object_doc PROPERTY="1" PARAM="docObjectParam" PARAM="oEnvParam" EXPR="
			docObjectParam.Save();
			oEnvParam.SetProperty( 'curObjectID', docObjectParam.DocID );
			oEnvParam.SetProperty( 'curObjectDoc', docObjectParam );
			oEnvParam.SetProperty( 'curObject', docObjectParam.TopElem );
	"/>

	<build_query_url PROPERTY="1" PARAM="sUrlPARAM" PARAM="sHostAndPathPARAM" EXPR="
			var sUrlQuery = UrlParam(sUrlPARAM);
			var sReturnUrl = sHostAndPathPARAM;
			if (StrEnds(sReturnUrl, '/'))
				sReturnUrl = sReturnUrl.slice(StrLen(sReturnUrl) - 1);
			sReturnUrl += UrlPath(sUrlPARAM);
			if (sUrlQuery)
				sReturnUrl += '?' + sUrlQuery;
			return sReturnUrl;
	"/>

	<build_relative_url PROPERTY="1" PARAM="sUrlPARAM" EXPR="
		var sUrlQuery = UrlParam(sUrlPARAM);
		var sUrlPath = UrlPath(sUrlPARAM);
		if (StrBegins(sUrlPath, '/'))
			sUrlPath = sUrlPath.slice(1);

		return sUrlPath + (sUrlQuery != '' ? '?' : '') + sUrlQuery;
	"/>

	<set_modified_response_status PROPERTY="1" PARAM="oRequestTarget" PARAM="sUrlParam" PARAM="dtLastModifiedParam" EXPR="
			oRes = ({ 'FilePathExists': null, 'ResponseStatus': 200 });
			try
			{
				dtLastModifiedUTCR = dtLastModifiedParam;
			}
			catch ( err )
			{
				dtLastModifiedUTCR = null;
			}

			if ( dtLastModifiedUTCR == null )
			{
				sFilePath = UrlToFilePath( UrlDecode( sUrlParam ) );
				if ( FilePathExists( sFilePath ) )
				{
					dtLastModifiedUTCR = GetFileModDate( sFilePath );
					oRes.FilePathExists = true;
				}
				else if ( (tools.sys_db_capability & tools.UNI_CAP_BLOB_STREAM) != 0 )
				{
					oRes.FilePathExists = false;
					try
					{
						dtLastModified = tools.spxml_unibridge.Object.provider.FetchUrlAttribute( sUrlParam, 'LastModifiedUtc' );
						if ( dtLastModified == undefined )
							throw '404';
						dtLastModifiedUTCR = ParseMimeDate( dtLastModified );
					}
					catch ( err )
					{
						oRequestTarget.SetRespStatus( 404, 'Not Found' );
						oRes.ResponseStatus = 404;
						return oRes;
					}
				}
			}

			if ( dtLastModifiedUTCR != null )
			{
				sModifiedSince = oRequestTarget.Header.GetOptProperty( 'If-Modified-Since', '' );
				if ( sModifiedSince != '' )
				{
					sModifiedSince = StrLeftRange( sModifiedSince, String( sModifiedSince ).indexOf( ';' ) );
					try
					{
						dtModifiedSinceUTCR = ParseMimeDate( sModifiedSince );
					}
					catch ( err )
					{
						return oRes;
					}
					if ( dtLastModifiedUTCR <= dtModifiedSinceUTCR )
					{
						oRequestTarget.SetRespStatus( 304, 'Not Modified' );
						oRes.ResponseStatus = 304;
						return oRes;
					}
				}
				oRequestTarget.AddRespHeader( 'Last-Modified', tools_web.str_utc_mime_date( dtLastModifiedUTCR ) );

				if ( ! oRes.FilePathExists )
				{
					try
					{
						iUrlLen = tools.spxml_unibridge.Object.provider.FetchUrlAttribute( sUrlParam, 'Length' );
						oRequestTarget.AddRespHeader( 'Content-Length', Int( iUrlLen ) );
					}
					catch ( err )
					{

					}
				}
			}
			return oRes;
	"/>

	<str_utc_mime_date PROPERTY="1" PARAM="dtDateParam" EXPR="
			arrWeekDays = ['Mon','Tue','Web','Thu','Fri','Sat','Sun'];
			arrMonthDays = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
			return arrWeekDays[ WeekDay( dtDateParam ) ] + ', '	+ StrInt( Day( dtDateParam ), 2 ) + ' '	+ arrMonthDays[ Month( dtDateParam ) - 1 ] + ' ' + Year( dtDateParam ) + ' ' + StrTime( dtDateParam, false ) + ':' + StrInt( Second( dtDateParam ), 2 ) + ' GMT';
	"/>


	<get_tracking_url PROPERTY="1" PARAM="fldLocationParam" PARAM="curHostPath" EXPR="
			switch ( global_settings.settings.portal_tracking_type )
			{
				case 'location':
				{
					return ( fldLocationParam != null &amp;&amp; fldLocationParam != undefined &amp;&amp; fldLocationParam.tracking_url.HasValue ? UrlAppendPath( fldLocationParam.tracking_url, '/handler.html' ) : '/handler.html' );
					//return UrlAppendPath( ( fldLocationParam != null &amp;&amp; fldLocationParam != undefined &amp;&amp; fldLocationParam.tracking_url.HasValue ? fldLocationParam.tracking_url : curHostPath ), 'handler.html' );
					break;
				}
			}
			return '/handler.html';//UrlAppendPath( curHostPath, 'handler.html' );
	"/>


	<create_resource_from_attacment PROPERTY="1" PARAM="oAttachmentParam" PARAM="iPersonIDParam" PARAM="tePersonParam" EXPR="
			if ( oAttachmentParam == undefined || ! oAttachmentParam.FileName.HasValue)
				return null;
			sFileName = oAttachmentParam.FileName;
			sData = Trim(oAttachmentParam);
			if ( sData.length <= 0)
				return null;

			docResource = OpenNewDoc( 'x-local://wtv/wtv_resource.xmd' );
			docResource.BindToDb();

			docResource.TopElem.person_id = iPersonIDParam;
			if ( docResource.TopElem.person_id.HasValue )
				tools.common_filling( 'collaborator', docResource.TopElem, iPersonIDParam, tePersonParam );

			docResource.TopElem.put_str( sData, sFileName );
			return docResource;
	"/>

	<get_key_positions_list PROPERTY="1" CALLER-ENV="1" PARAM="iPersonIdParam" PARAM="oStructParam" EXPR="

		var arrResult =[]
		try
		{

			var oStruct=null;
			var iCareerReserveTypeID=null;
			var iBudgetPeriodID=null;
			var sStatuses='';
			var bShowWithSubordinate=false;
			var bCountSuccessors=false;

			function fnGetSuccesorsCountKeyPosition(fldKeyPositionParam)
			{
				var oKeyPositionClone=fldKeyPosition.Clone();
				oKeyPositionClone.code=	ArrayCount(XQuery('for $elem in successors where $elem/key_position_id='+fldKeyPositionParam.id+(iBudgetPeriodID!=null?(' and $elem/budget_period_id=' + iBudgetPeriodID):'')+' return $elem'))
				return oKeyPositionClone
			}

			if (iPersonIdParam!=null&&iPersonIdParam!=undefined)
			{
				try
				{
					if (oStructParam!=null&&oStructParam!=undefined)
					{
						oStruct=oStructParam
					}
					else
					{
						throw 'no param'
					}
				}
				catch(ex)
				{
				}

				if (oStruct!=null)
				{
					iCareerReserveTypeID=oStruct.GetOptProperty('iCareerReserveTypeID',null)
					iBudgetPeriodID=oStruct.GetOptProperty('iBudgetPeriodID',null)
					sStatuses=oStruct.GetOptProperty('sStatuses','')
					bShowWithSubordinate=tools_web.is_true(oStruct.GetOptProperty('bShowWithSubordinate',false))
					bCountSuccessors=tools_web.is_true(oStruct.GetOptProperty('bCountSuccessors',false))
				}

				var strWhere=''
				var strSinglePositionWhere=''
				var arrSelectedObjects=[]
				var xarrKeyPositions = []
				var xarrCareerReserveFuncManagers=XQuery('for $elem in talent_pool_func_managers where $elem/catalog=\'career_reserve_type\' and $elem/person_id=' + iPersonIdParam + ' return $elem')
				var isCareerReserveFuncManager=false
				var fldCareerReserveTypeManager=undefined;

				if (iBudgetPeriodID != null)
				{
					strWhere = strWhere+(strWhere != ''?' and ':'where')+' $elem/budget_period_id=' + iBudgetPeriodID;
					strSinglePositionWhere=strSinglePositionWhere+(strSinglePositionWhere != ''?' and ':'where')+' $elem/budget_period_id='+iBudgetPeriodID
				}

				if (iCareerReserveTypeID != null)
				{
					fldCareerReserveTypeManager=ArrayOptFind(xarrCareerReserveFuncManagers,'This.object_id==' + iCareerReserveTypeID)
					if (fldCareerReserveTypeManager!=undefined)
					{
						strWhere = strWhere+(strWhere != ''?' and ':'where')+' $elem/career_reserve_type_id=' + iCareerReserveTypeID;
						isCareerReserveFuncManager=true;
					}
					strSinglePositionWhere=strSinglePositionWhere+(strSinglePositionWhere != ''?' and ':'where')+' $elem/career_reserve_type_id='+iCareerReserveTypeID
				}
				else
				{
					fldCareerReserveTypeManager=ArrayOptFirstElem(xarrCareerReserveFuncManagers)
					if (fldCareerReserveTypeManager!=undefined)
					{
						strWhere = strWhere+(strWhere != ''?' and ':'where')+' MatchSome( $elem/career_reserve_type_id, ('+ArrayMerge(xarrCareerReserveFuncManagers,'This.object_id',',')+' ) ) ' ;
					}
				}

				if (Trim(sStatuses)!='')
				{
					strAddWhere=''
					arrKeyPositionStatuses = String( sStatuses ).split( ';' );
					for(sStatus in arrKeyPositionStatuses)
					{
						if(sStatus != '')
						{
							if(strAddWhere != '')
								strAddWhere += ' or ';
							strAddWhere += (' $elem/status=\'' + sStatus + '\'');

						}
					}
					strWhere = strWhere+(strWhere != ''?' and ':'where')+' (' + strAddWhere + ')';
					strSinglePositionWhere=strSinglePositionWhere+(strSinglePositionWhere != ''?' and ':'where')+' (' + strAddWhere + ')';
				}

				if (fldCareerReserveTypeManager!=undefined)
				{
					xarrKeyPositions = tools.xquery('for $elem in key_positions '+strWhere+' return $elem')
				}

				if (!isCareerReserveFuncManager)
				{

					xarrKeyPositionFuncMangs = QueryCatalogByKeys('key_positions','id',ArrayExtract(XQuery('for $elem in talent_pool_func_managers where $elem/catalog=\'key_position\' and $elem/person_id=' + iPersonIdParam + ' return $elem'),'object_id'));
					if (ArrayOptFirstElem(xarrKeyPositionFuncMangs)!=undefined)
					{
						strSinglePositionWhere=strSinglePositionWhere+(strSinglePositionWhere != ''?' and ':'where')+' MatchSome( $elem/id, ('+ArrayMerge(xarrKeyPositionFuncMangs,'This.id',',')+' ) )';
						xarrKeyPositionFuncMangs= tools.xquery('for $elem in key_positions '+strSinglePositionWhere+' return $elem')
						xarrKeyPositions = ArraySelectDistinct(ArrayUnion(xarrKeyPositions,xarrKeyPositionFuncMangs),'This.id')
					}
				}


				if (bShowWithSubordinate)
				{
					xarrSubKeyPositions = QueryCatalogByKeys( 'key_positions', 'position_id', ArrayExtract(tools.get_sub_persons_by_func_manager_id(curUserID),'position_id'))

					if (ArrayOptFirstElem(xarrSubKeyPositions) != undefined)
					{
						for (catKeyPosit in xarrKeyPositions)
						{
							if (ArrayOptFind(xarrSubKeyPositions,'This.id=='+catKeyPosit.id) != undefined)
							{
								arrSelectedObjects[ArrayCount(arrSelectedObjects)] = catKeyPosit;
							}
						}
					}
					xarrKeyPositions=arrSelectedObjects
				}


				if ( global_settings.settings.check_access_on_lists )
				{
					for (fldKeyPosition in xarrKeyPositions)
					{
						try
						{
							if ( !tools_web.check_access(  OpenDoc( UrlFromDocID ( fldKeyPosition.id ), 'form=x-local://wtv/wtv_form_doc_access.xmd;ignore-top-elem-name=1' ).TopElem , iPersonIdParam, null, null ) )
								continue;
						}
						catch( err )
						{
							continue;
						}

						if (bCountSuccessors)
						{
							arrResult.push(fnGetSuccesorsCountKeyPosition(fldKeyPosition))
						}
						else
						{
							arrResult.push(fldKeyPosition)
						}
					}
				}
				else
				{
					if (bCountSuccessors)
					{
						for (fldKeyPosition in xarrKeyPositions)
						{
							arrResult.push(fnGetSuccesorsCountKeyPosition(fldKeyPosition))
						}
					}
					else
					{
						arrResult=xarrKeyPositions
					}
				}

			}
		}
		catch ( err )
		{
			tools.log('get_key_positions_list: ' + err, 'error');
		}
		return arrResult
   "/>


	<url_std_content_type PROPERTY="1" PARAM="sUrlParam" EXPR="
			sContentType = UrlStdContentType( sUrlParam );
			if ( sContentType != '' )
				return sContentType;

			switch ( StrLowerCase( UrlPathSuffix( sUrlParam ) ) )
			{
				case '.js':
					sContentType = 'application/javascript';
					break;
				case '.ogx':
				case '.ogg':
					sContentType = 'application/ogg';
					break;
				case '.pdf':
					sContentType = 'application/pdf';
					break;
				case '.xhtml':
				case '.xht':
					sContentType = 'application/xhtml+xml';
					break;
				case '.json':
					sContentType = 'application/json';
					break;
				case '.zip':
				case '.zipx':
					sContentType = 'application/zip';
					break;

				case '.mp3':
					sContentType = 'audio/mpeg';
					break;
				case '.oga':
				case '.spx':
					sContentType = 'audio/ogg';
					break;
				case '.wma':
					sContentType = 'audio/x-ms-wma';
					break;
				case '.ra':
				case '.ram':
					sContentType = 'audio/vnd.rn-realaudio';
					break;
				case '.wav':
				case '.wv':
					sContentType = 'audio/vnd.wave';
					break;

				case '.gif':
					sContentType = 'image/gif';
					break;
				case '.jpg':
				case '.jpeg':
				case '.jpe':
				case '.jif':
				case '.jfif':
				case '.jfi':
					sContentType = 'image/jpeg';
					break;
				case '.png':
					sContentType = 'image/png';
					break;
				case '.svg':
				case '.svgz':
					sContentType = 'image/svg+xml';
					break;
				case '.tiff':
				case '.tif':
					sContentType = 'image/tiff';
					break;
				case '.ico':
					sContentType = 'image/vnd.microsoft.icon';
					break;

				case '.css':
					sContentType = 'text/css';
					break;
				case '.csv':
					sContentType = 'text/csv';
					break;
				case '.html':
				case '.htm':
					sContentType = 'text/html';
					break;
				case '.txt':
				case '.log':
					sContentType = 'text/plain';
					break;
				case '.xml':
					sContentType = 'text/xml';
					break;

				case '.mpg':
				case '.mpeg':
				case '.mp1':
				case '.mp2':
				case '.m1v':
				case '.m1a':
				case '.m2a':
				case '.mpa':
				case '.mpv':
					sContentType = 'video/mpeg';
					break;
				case '.ogv':
					sContentType = 'video/ogg';
					break;
				case '.mov':
				case '.qt':
					sContentType = 'video/quicktime';
					break;
				case '.wmv':
					sContentType = 'video/x-ms-wmv';
					break;
				case '.avi':
					sContentType = 'video/x-msvideo';
					break;
				case '.mp4':
					sContentType = 'video/mp4';
					break;
				case '.webm':
					sContentType = 'video/webm';
					break;
				case '.flv':
				case '.f4v':
					sContentType = 'video/x-flv';
					break;

				case 'odt':
					sContentType = 'application/vnd.oasis.opendocument.text';
					break;
				case '.ods':
					sContentType = 'application/vnd.oasis.opendocument.spreadsheet';
					break;
				case '.odp':
					sContentType = 'application/vnd.oasis.opendocument.presentation';
					break;
				case '.odg':
					sContentType = 'application/vnd.oasis.opendocument.graphics';
					break;
				case '.xls':
				case '.xlsx':
					sContentType = 'application/vnd.ms-excel';
					break;
				case '.ppt':
				case '.pptx':
				case '.pps':
				case '.ppsx':
					sContentType = 'application/vnd.ms-powerpoint';
					break;
				case '.doc':
				case '.docx':
					sContentType = 'application/msword';
					break;

				case '.swf':
					sContentType = 'application/x-shockwave-flash';
					break;
				case '.rar':
				case '.rev':
					sContentType = 'application/x-rar-compressed';
					break;
				case '.tar':
					sContentType = 'application/x-tar';
					break;
			}
			return sContentType;
	"/>

	<is_vfs TYPE="bool" EXPR-INIT="AppConfig.GetOptProperty('DOTNETCORE-VFS')=='1'"/>

	<write_url_to_response PROPERTY="1" PARAM="sUrl" PARAM="oRequestParam" EXPR="
		try
		{
			if ( (tools.sys_db_capability & tools.UNI_CAP_BASIC) != 0 && is_vfs)
			{
				tools.spxml_unibridge.Object.provider.CleanUpThreadResources();
			}

			b_arr = tools.spxml_unibridge.Object.provider.GetUrlChunk( sUrl );
			if ( b_arr != undefined )
			{
				b_arr_filename = b_arr.GetFilename();
				if( b_arr_filename != undefined )
				{
					oRequestParam.HandleStaticFile( b_arr_filename );
				}
				else
				{
					while(b_arr.GetNext())
					{
						oRequestParam.RespStream.WriteBinary( b_arr.GetValue() );
					}
				}
				if (b_arr!=undefined)
				{
					b_arr.Dispose();
				}
			}
			else
			{
				oRequestParam.SetRespStatus( 404, 'File not found' );
			}
		}
		catch(er)
		{
			if (b_arr!=undefined)
			{
				b_arr.Dispose();
			}
			alert(er);
		}
	"/>


	<encrypt_launch_id PROPERTY="1" PARAM="sLaunchIDParam" PARAM="dEndDateParam" EXPR="
			return tools_web.encode_url_reserved( StrSimpleEncrypt( sLaunchIDParam + '_' + dEndDateParam ) );
	"/>

	<decrypt_launch_id PROPERTY="1" PARAM="sLaunchIDParam" EXPR="
			oRes = { 'learning_id': '', 'end_date' : '' };
			sLaunchIDParam = StrSimpleDecrypt( tools_web.decode_url_reserved( sLaunchIDParam ) );
			arrLaunchID = sLaunchIDParam.split( '_' );
			if ( ArrayCount( arrLaunchID ) == 2 )
			{
				try
				{
					oRes.end_date = Date( arrLaunchID[ 1 ] );
					oRes.learning_id = arrLaunchID[ 0 ];
				}
				catch ( err )
				{
				}
			}
			return oRes;
	"/>



	<get_valid_url PROPERTY="1" PARAM="sUrlParam" EXPR="
			sResUrl = StrReplace( StrReplace( sUrlParam, '\r', '' ), '\n', '' );
			return sResUrl;
	"/>



	<get_active_web_template_hash PROPERTY="1" PARAM="sModeParam" PARAM="sAccessLevelParam" PARAM="sAccessRoleParam" PARAM="sSiteIDParam" PARAM="sWebDesignIDParam" EXPR="
			return sModeParam + '_' + sAccessLevelParam + '_' + sAccessRoleParam + '_' + sSiteIDParam + '_' + sWebDesignIDParam;
	"/>

	<build_submatched_string PROPERTY="1" PARAM="sSourceString" PARAM="sRealString" PARAM="sDestString" EXPR="
			sSourceString = String(sSourceString);
			sRealString = String(sRealString);
			sDestString = String(sDestString);
			var iAsterixPos = sSourceString.indexOf('*');
			var iStartAsterixPos = 0;
			var aSubMatches = new Array();
			var iMatchEnd, iMatchStart = 0;
			var sPrevMatch = null;

			function findSubMatch(sMatch, bLast)
			{
				if (sPrevMatch != null)
				{
					if (sPrevMatch != '')
					{
						if (sMatch != '')
						{
							iMatchStart = sRealString.indexOf(sPrevMatch, iMatchStart) + StrLen(sPrevMatch);
							iMatchEnd = sRealString.indexOf(sMatch, iMatchStart);
							aSubMatches.push(sRealString.slice(iMatchStart, iMatchEnd));
							sPrevMatch = sMatch;
						}
						else
						{
							if (bLast)
							{
								iMatchStart = sRealString.indexOf(sPrevMatch, iMatchStart) + StrLen(sPrevMatch);
								aSubMatches.push(sRealString.slice(iMatchStart));
							}
							else
							{
								aSubMatches.push('');
							}
						}
					}
					else
					{
						aSubMatches.push('');
						sPrevMatch = sMatch;
					}
				}
				else
				{
					sPrevMatch = sMatch;
				}
			}

			while (iAsterixPos >= 0)
			{
				findSubMatch(sSourceString.slice(iStartAsterixPos, iAsterixPos), false);


				iStartAsterixPos = iAsterixPos + 1;
				iAsterixPos = sSourceString.indexOf('*', iStartAsterixPos);
			}

			findSubMatch(sSourceString.slice(iStartAsterixPos), true);

			iAsterixPos = sDestString.indexOf('$');
			iMatchEnd = ArrayCount(aSubMatches);
			while(iAsterixPos >= 0)
			{
				iStartAsterixPos = OptInt(sDestString.slice(iAsterixPos +1, iAsterixPos + 2));
				iMatchStart = 2;
				if (iStartAsterixPos != undefined)
				{
					if (iStartAsterixPos > 0 && iStartAsterixPos <= iMatchEnd)
					{
						sPrevMatch = aSubMatches[iStartAsterixPos - 1];
						sDestString = StrReplace(sDestString, '$' + iStartAsterixPos, sPrevMatch);
						iMatchStart = StrLen(sPrevMatch);
					}
				}
				iAsterixPos = sDestString.indexOf('$', iAsterixPos + iMatchStart);
			}
			return sDestString;
	"/>




	<get_auth_hash PROPERTY="1" PARAM="sSourceParam" EXPR="
			var stamp = Base64Encode( global_settings.install_stamp.Value );
			stamp = StrReplace( stamp, '=', '' );
			stamp = StrReplace( stamp, '+', '' );
			stamp = StrReplace( stamp, '/', '' );

			if ( global_settings.settings.password_format != 'plain')
			{
				if (!StrBegins(sSourceParam, '(') || !StrEnds(sSourceParam, ')'))
					sSourceParam = '(' + Md5Hex( sSourceParam ) + ')';

				sSourceParam = StrLowerCase(sSourceParam);
			}
			return StrLowerCase( Md5Hex( stamp + '~' +  sSourceParam) );
	"/>


	<set_cookie_auth PROPERTY="1" PARAM="Request" PARAM="curHost" PARAM="oAuthParam" EXPR="
			if ( oAuthParam == null )
			{
				oAuthParam = {
					login: '',
					password: ''
				};
			}
			var dateStr = curHost.auth_cookie_period &gt; 0 ? StrMimeDate( DateOffset( CurDate, ( curHost.auth_cookie_period * 60 ) ) ) : 'Sun, 20 Dec 2030 00:00:00 GMT';
			Request.AddRespHeader( 'Set-Cookie', curHost.auth_cookie_login + '=' + UrlEncode( oAuthParam.login ) + ';expires=' + dateStr + ';path=/' + ( curHost.auth_cookie_domain.HasValue ? ';domain=' + curHost.auth_cookie_domain : '' ) + ';HttpOnly' + ( AppConfig.GetOptProperty( 'SESSION-COOKIE-SECURE' ) == '1' ? ';Secure' : '' ), false );
			Request.AddRespHeader( 'Set-Cookie', curHost.auth_cookie_pass + '=' + UrlEncode( oAuthParam.password ) + ';expires=' + dateStr + ';path=/' + ( curHost.auth_cookie_domain.HasValue ? ';domain=' + curHost.auth_cookie_domain : '' ) + ';HttpOnly' + ( AppConfig.GetOptProperty( 'SESSION-COOKIE-SECURE' ) == '1' ? ';Secure' : '' ), false );
	"/>


	<user_init PROPERTY="1" PARAM="Request" PARAM="oParam" EXPR="
			Session = Request.Session;
			oRes = ({
				access: false,
				'anonymous': false,
				'error_code': '',
				'errror_text': '',
				'redirect': '',
				'auth_login': '',
				'auth_type': 'basic',
				curHost: null,
				curSite: null,
				curEnvUrl: ''
			});
			curHostID = null;
			curHost = null;

			function clearUserInfo()
			{
				if ( Session.HasProperty( 'Env' ) )
				{
					Session.Env.SetProperty( 'curUserID', null );
					Session.Env.SetProperty( 'curUser', null );
				}
				Session.cur_user_id = undefined;
				Session.cur_user_fullname = undefined;
				Session.cur_user_login = undefined;
				Session._ul = undefined;
				Session._hs = undefined;

				if ( curHost != null &amp;&amp; curHost.portal_auth_type == 'cookie' )
				{
					curHeaderCookie = Request.Header.GetOptProperty( 'Cookie' );
					if ( curHeaderCookie != undefined )
					{
						curHeaderCookie = ParseHeaderPairs( curHeaderCookie );
						if ( curHeaderCookie.GetOptProperty( curHost.auth_cookie_login, '' ) != '' )
						{
							tools_web.set_cookie_auth( Request, curHost, null );
						}
					}
				}
			}

			if ( Session.HasProperty( 'Env' ) )
				Env = Session.Env;
			else
				Env = new SafeObject;

			try
			{
				bUseAuthSession = global_settings.settings.use_auth_session;
				if ( bUseAuthSession &amp;&amp; tools_web.get_user_data( 'cur_session_ticks_' + Session.ID ) == null )
				{
					tools_web.set_user_data( 'cur_session_ticks_' + Session.ID, '1', global_settings.settings.auth_session_life_time );
					bUseAuthSession = false;
				}

				curAnonymousAccess = false;
				curHostPath = Env.GetOptProperty( 'curHostPath' );
				curHostName = tools_web.get_host_name( Request.Url );
				bUseHostSession = false;
				if ( ! bUseAuthSession || curHostPath == undefined )
				{
					curHost = tools_web.get_cur_host( Request );
					if ( curHost == null )
					{
						throw 'Host (' + Request.UrlHost + ') not found.';
					}
					curHostID = curHost.id.Value;
					curHostPath = tools_web.get_cur_host_path_by_url( curHost, Request.Url );
					curHostName = tools_web.get_cur_host_name( curHost, Request );
					bUseAuthSession = false;
				}
				if ( bUseAuthSession )
				{
					if ( Env.GetOptProperty( 'curHostPath' ) != curHostPath )
					{
						bUseAuthSession = false;
					}
					curHostID = Env.GetOptProperty( 'curHostID', null );
					if ( curHostID != null )
					{
						curHost = bUseAuthSession ? tools_web.get_cur_host( Env ) : null;
					}
					if ( curHost == null )
					{
						curHost = tools_web.get_cur_host( Request );
						curHostID = curHost.id.Value;
						curHostPath = tools_web.get_cur_host_path_by_url( curHost, Request.Url );
						curHostName = tools_web.get_cur_host_name( curHost, Request );
					}
					else
					{
						bUseHostSession = true;
					}
				}
				if ( curHost == null )
				{
					throw '!!host_not_found!!';
				}
				else if ( ! bUseHostSession )
				{
					Env.SetProperty( 'curHostName', curHostName );
					Env.SetProperty( 'curHostID', curHostID );
					Env.SetProperty( 'curHostPath', curHostPath );
				}
				oRes.curHost = curHost;
				Env.curSessionID = Request.Session.ID;
				oRes.curEnvUrl = tools_web.build_query_url( Request.Url, curHostPath );
				tools_web.set_user_data( 'session_env_' + Request.Session.ID, {
					cur_env_url: oRes.curEnvUrl
				}, 600 );
				//Env.SetProperty( 'curEnvUrl', tools_web.build_query_url( Request.Url, curHostPath ) );

				if ( bUseAuthSession &amp;&amp; tools_web.is_true( oParam.GetOptProperty( 'logout' ) ) )
				{
					clearUserInfo();
				}

				if ( curHost.site_id.HasValue )
				{
					curSiteID = curHost.site_id.Value;
				}
				else
				{
					throw '!!host_not_found!!';
				}

				Env.SetProperty( 'curSiteID', curSiteID );
				curSite = tools_web.get_cur_site( Env );
				oRes.curSite = curSite;

				curMode = oParam.GetOptProperty( 'mode', '' );
				curUserID = null;
				curUser = null;
				curAnonymousAccess = ( curMode != '' && curSite.anonymous_modes.ChildByKeyExists( curMode ) ) || curSite.anonymous_modes.ChildByKeyExists( '*' );
				Env.SetProperty( 'curAnonymousAccess', curAnonymousAccess );

				oRes.anonymous = curAnonymousAccess;
				var defaultAuthType = curHost.portal_auth_type.Value;

				isLdsAuth = false;
				ldsLogin = null;
				ldsUserID = null;
				oRes.auth_type = oParam.GetOptProperty( 'auth_type' );
				bSetAuth = oParam.GetOptProperty( 'set_auth', '0' ) == '1';
				if ( ! bSetAuth )
				{
					if ( OptInt( Session.GetOptProperty( 'lds_user_id' ,'' ), 0 ) &gt; 0 &amp;&amp; OptInt( Session.GetOptProperty( 'cur_user_id' ,'' ), 0 ) == 0 )
					{
						ldsLogin = Session.GetOptProperty( 'lds_user_login' ,'' );
						ldsUserID = OptInt( Session.GetOptProperty( 'lds_user_id' ,'' ), 0 );
						isLdsAuth = true;
					}
					bSetAuth = isLdsAuth;
				}

				if ( oRes.auth_type == undefined &amp;&amp; curHost.mobile_app_config_id.HasValue )
				{
					xWTAPP = Request.Header.GetOptProperty( 'x-webtutor-app' );
					if (xWTAPP == 'WebtutorMobileX' || xWTAPP == 'WebtutorMobileM')
						defaultAuthType = 'mobile';
					else
					{
						try
						{
							curUrlQuery = Request.Query;
						}
						catch ( err3 )
						{
							curUrlQuery = UrlQuery( Request.Url );
						}
						AuthLogin = curUrlQuery.GetOptProperty( '_ul' );
						if ( AuthLogin == undefined )
						{
							AuthLogin = Session.GetOptProperty( '_ul' );
						}
						else
						{
							AuthLogin = Base64Decode( StrReplace(AuthLogin, ' ', '+') );
						}
						AuthPassword = curUrlQuery.GetOptProperty( '_hs', '' );

						if ( AuthLogin != undefined &amp;&amp; AuthLogin != '' )
							oRes.auth_type = 'query';
					}
				}
				if ( oRes.auth_type != 'query' )
				{
					oRes.auth_type = oParam.GetOptProperty( 'auth_type', defaultAuthType );
					AuthLogin = Request.AuthLogin;
					AuthPassword = Request.AuthPassword;

					if ( oRes.auth_type == 'mobile' )
					{
						if ( curHost.portal_auth_type.Value == 'outside' )
						{
							oRes.auth_type = 'outside';
							bSetAuth = false;
						}
						else
							oRes.auth_type = 'basic';
					}
				}

				RedirectUrl = '';

				switch ( oRes.auth_type )
				{
					case 'query':
						if ( curHost.portal_auth_type == 'outside' )
						{
							if ( curHost.auth_login_eval.HasValue )
								AuthLogin = eval( curHost.auth_login_eval );
						}
						break;
					case 'outside':
						if ( bSetAuth )
						{
							AuthLogin = oParam.GetOptProperty( curHost.auth_cookie_login );
							AuthPassword = oParam.GetOptProperty( curHost.auth_cookie_pass );
						}
						if ( curHost.auth_login_eval.HasValue )
							AuthLogin = eval( curHost.auth_login_eval );
						if ( curHost.auth_prev_eval.HasValue )
						{
							try
							{
								eval( curHost.auth_prev_eval );
							}
							catch ( eee )
							{
								AuthLogin = '';
								if ( ! StrBegins( eee, '!!' ) )
									alert( eee );
								throw eee;
							}
						}
						break;
					case 'cookie':
					{
						if ( bSetAuth )
						{
							AuthLogin = oParam.GetOptProperty( curHost.auth_cookie_login );
							AuthPassword = oParam.GetOptProperty( curHost.auth_cookie_pass );
						}
						else
						{
							curHeaderCookie = Request.Header.GetOptProperty( 'Cookie' );
//alert(curHeaderCookie)
							if ( AuthLogin != undefined )
							{
								curHeaderCookie = ParseHeaderPairs( curHeaderCookie );
								AuthLogin = curHeaderCookie.GetOptProperty( curHost.auth_cookie_login );
								if ( AuthLogin != undefined )
									AuthLogin = UrlDecode( AuthLogin );
								AuthPassword = curHeaderCookie.GetOptProperty( curHost.auth_cookie_pass );
								if ( AuthPassword != undefined )
									AuthPassword = UrlDecode( AuthPassword );
							}
						}
						if ( AuthPassword == '' )
						{
							throw '!!empty_password!!';
						}
						break;
					}
					case 'basic':
					{
						if ( AuthPassword == '' )
						{
							throw '!!empty_password!!';
						}
						break;
					}
				}
//alert('Login:'+AuthLogin+', Type:'+oRes.auth_type+', Host:'+curHostName+'.');
				if ( isLdsAuth )
				{
					AuthLogin = ldsLogin;
				}
				if ( AuthLogin == undefined || AuthLogin == null )
					AuthLogin = '';
				else
					oRes.auth_login = AuthLogin;

				if ( AuthLogin != '' )
				{
					sSessionUserLogin = Session.GetOptProperty( 'cur_user_login', '' );
					if ( ! curHost.login_case_sensitive )
					{
						AuthLogin = StrLowerCase( AuthLogin );
						sSessionUserLogin = StrLowerCase( sSessionUserLogin );
					}

					if ( global_settings.settings.brute_password_check )
					{
						sDataID = 'web_login_wrong_' + Base64Encode( AuthLogin );
						oData = tools_web.get_user_data( sDataID );
						if ( oData != null &amp;&amp; oData.counter &gt;= global_settings.settings.brute_password_count )
						{
							throw '!!brute_password!!';
						}
					}

					if ( curHost.redirect_login.HasValue && AuthLogin == curHost.redirect_login )
						throw '!!redirect!!';

					var bAuthSession = false;
					if ( bUseAuthSession &amp;&amp; sSessionUserLogin == AuthLogin &amp;&amp; Session.GetOptProperty( 'auth_type' ) == oRes.auth_type )
					{
						curUserID = Int( Session.cur_user_id );
						curUser = Env.curUser;
						bAuthSession = true;
					}

					if ( curUserID == null )
					{
						if ( curHost.login_case_sensitive )
						{
							bLoginNotFirstElem = true;
							curUsers = XQuery( 'for $elem in collaborators where $elem/login = ' + XQueryLiteral( AuthLogin ) + ' return $elem' );
							for ( catUserElem in curUsers )
							{
								if ( catUserElem.login == AuthLogin )
								{
									bLoginNotFirstElem = false;
									break;
								}
							}
						}
						else
						{
							curUsers = ArraySelectAll( XQuery( 'for $elem in collaborators where $elem/lowercase_login = ' + XQueryLiteral( AuthLogin ) + ' return $elem' ) );
							bLoginNotFirstElem = ArrayOptFirstElem( curUsers ) == undefined;
						}
						if ( bLoginNotFirstElem )
						{
							if ( curHost.login_domen_sensitive )
							{
								throw '!!invalid_login!!';
							}
							else
							{
								curUsers = XQuery( 'for $user in collaborators where $user/short_login = ' + XQueryLiteral( tools.get_short_login_by_login( AuthLogin ) ) + ' return $user' );
								if ( curHost.login_case_sensitive )
								{
									bLoginNotFirstElem = true;
									for ( catUserElem in curUsers )
									{
										if ( catUserElem.login == AuthLogin )
										{
											bLoginNotFirstElem = false;
											break;
										}
									}
								}
								else
								{
									bLoginNotFirstElem = ArrayOptFirstElem( curUsers ) == undefined;
								}
								if ( bLoginNotFirstElem )
								{
									throw '!!invalid_login!!';
								}
							}
						}

						for ( catUserElem in curUsers )
						{
							if ( tools_web.check_site_access( catUserElem, curSite ) )
							{
								curUserID = catUserElem.id.Value;
								break;
							}
						}
						if ( curUserID == null )
						{
							if ( global_settings.settings.auth_site_access_failed_eval.HasValue )
								eval( global_settings.settings.auth_site_access_failed_eval );
							throw '!!Users do not belong to the current site.!!';
						}
						curUser = OpenDoc( UrlFromDocID( curUserID ) ).TopElem;
					}
					if ( ! bAuthSession || oRes.auth_type == 'cookie' || isLdsAuth )
					{
						switch ( oRes.auth_type )
						{
							case 'outside':
								if ( ! isLdsAuth &amp;&amp; ! eval( curHost.auth_pass_eval ) )
									throw '!!invalid_password!!';
								break;

							case 'ntlm':
								break;

							case 'cookie':
								if ( ! isLdsAuth )
								{
									if ( global_settings.settings.password_format == 'plain' )
									{
										if ( bSetAuth )
										{
											if ( curUser.password != AuthPassword )
												throw '!!invalid_password!!';
											AuthPassword = '(' + Md5Hex( AuthPassword ) + ')';
										}
										else
										{
											if ( '(' + Md5Hex( curUser.password ) + ')' != AuthPassword )
												throw '!!invalid_password!!';
										}
									}
									else
									{
										AuthPassword = tools.make_password( AuthPassword, ( ! bSetAuth ) );
										if ( tools.make_password( curUser.password, true ) != AuthPassword )
										{
											throw '!!invalid_password!!';
										}
									}
								}
								if ( bSetAuth )
								{
									tools_web.set_cookie_auth( Request, curHost, {
										login: curUser.login.Value,
										password: ( isLdsAuth ? curUser.password.Value : AuthPassword )
									} );
								}
								break;

							case 'query':
								if ( AuthLogin != Session.GetOptProperty( '_ul' ) )
								{
									if ( curHost.portal_auth_type == 'outside' )
									{
										if ( curHost.auth_pass_eval.HasValue &amp;&amp; ! eval( curHost.auth_pass_eval ) )
											throw '!!invalid_password!!';
									}
									else
									{
										if ( StrLowerCase( AuthPassword ) != tools_web.get_auth_hash( curUser.password ) )
											throw '!!invalid_password!!';
									}

									Session.SetProperty( '_ul', AuthLogin );
									//Session.SetProperty( '_hs', AuthPassword );
								}
								break;

							default:
								if ( ! isLdsAuth )
								{
									sUserPassword = tools.make_password( curUser.password, true );
									if ( sUserPassword != tools.make_password( AuthPassword, false ) &amp;&amp; sUserPassword != tools.make_password( DecodeCharset( AuthPassword, 'windows-1251' ), false ) )
										throw '!!invalid_password!!';
								}
								break;
						}

						if ( bAuthSession )
							curUser = OpenDoc( UrlFromDocID( curUserID ) ).TopElem;

						xWTAPP = Request.Header.GetOptProperty( 'x-webtutor-app' );
						if (xWTAPP == 'WebtutorMobileX' || xWTAPP == 'WebtutorMobileM')
						{
							Session.SetProperty( '_ul', AuthLogin );
						}

						curUser.desc.Clear();
						curUser.change_logs.Clear();
						curUser.history_states.Clear();
						Env.SetProperty( 'curUserID', curUserID );
						Env.SetProperty( 'curUser', curUser );

						if ( OptInt( Session.GetOptProperty( 'cur_user_id' ) ) != curUserID )
							LogEvent( 'auth-events', 'login\tWEB\t' + curUser.login + '\t' + Request.Url + '\t' );

						Session.cur_user_id = Int( curUserID );
						Session.cur_user_fullname = RValue( curUser.fullname );
						Session.cur_user_login = curUser.login.Value;
						Session.cur_useragent = Request.Header.GetOptProperty( 'User-Agent', '' );
						Session.auth_type = RValue( oRes.auth_type );

						tools_web.set_st_category( curUser );
					}
				}

				bAnonymUser = false;
				if ( curAnonymousAccess && curUser == null )
				{
					if ( curSite.anonym_collaborator_id.HasValue )
					{
						bAnonymUser = true;
						curUserID = curSite.anonym_collaborator_id.Value;
						curUser = OpenDoc( UrlFromDocID( curUserID ) ).TopElem;
						Env.SetProperty( 'curUserID', curUserID );
						Env.SetProperty( 'curUser', curUser );

						tools_web.set_st_category( curUser );
					}
				}
				else if ( AuthLogin == '' )
				{
					//if ( Request.Url != Session.GetOptProperty( 'url_prev_auth' ) )
						throw '!!empty_login!!';
				}

				if ( curUser != null )
				{
					if ( curUser.access.web_banned )
					{
						throw '!!web_banned!!';
					}
					else if ( ! curUser.is_time_access )
					{
						oRes.access_time_start = curUser.access_time_start;
						oRes.access_time_end = curUser.access_time_end;
						throw '!!is_time_access!!';
					}

					Request.AuthUserID = curUserID;
					Request.AuthLogin = curUser.login.Value;
					oRes.anonymous = false;
					if ( ! bAnonymUser &amp;&amp; Session.GetOptProperty( 'url_prev_auth' ) != undefined )
					{
						Session.url_prev_auth = undefined;
					}
				}
			}
			catch( err )
			{
				clearUserInfo();
				if ( StrBegins( err, '!!' ) )
				{
					if ( ! curAnonymousAccess )
					{
						oRes.error_code = StrRangePos( err, 2, String( err ).indexOf( '!!', 3 ) );
						switch ( oRes.error_code )
						{
							case 'host_not_found':
								oRes.error_text = 'Current host is not found in the list of WebSoft HCM access allowed hosts.';
								break;
							case 'redirect':
								oRes.redirect = String( RedirectUrl == '' ? eval( curHost.redirect_url_eval ) : RedirectUrl );
								break;
							case 'web_banned':
								oRes.error_text = 'User is web banned.';
								break;
							case 'is_time_access':
								oRes.error_text = 'User is not time access.';
								break;
							case 'brute_password':
							{
								oRes.error_text = 'Password attempts exceeded.';
								break;
							}
							case 'empty_password':
							{
								oRes.error_text = 'Empty password.';
								break;
							}
							case 'empty_login':
								oRes.error_text = 'Empty login.';
								break;

							default:
							{
								if ( global_settings.settings.brute_password_check )
								{
									sDataID = 'web_login_wrong_' + Base64Encode( AuthLogin );
									oData = tools_web.get_user_data( sDataID );
									if ( oData == null )
									{
										oData = ({ 'counter': 1, 'last_date': CurDate });
									}
									else
									{
										oData.counter++;
										oData.last_date = CurDate;

										if ( oData.counter &gt;= global_settings.settings.brute_password_count )
										{
											sLog = 'login_brute_password\tWEB\t';
											try
											{
												sLog += curUser.login;
											}
											catch ( e )
											{
											}
											sLog += '\t';
											try
											{
												sLog += Request.RemoteIP;
											}
											catch ( e )
											{
											}
											LogEvent( 'auth-events', sLog );
										}
									}
									tools_web.set_user_data( sDataID, oData, global_settings.settings.brute_password_period );
								}

								switch ( oRes.error_code )
								{
									case 'invalid_login':
									{
										oRes.error_text = 'User not found.';
										break;
									}
									case 'invalid_password':
									{
										oRes.error_text = 'Invalid user password.';
										break;
									}
									default:
									{
										oRes.error_text = oRes.error_code;
										oRes.error_code = 'wrong_auth';
										break;
									}
								}
								switch ( oRes.auth_type )
								{
									case 'outside':
									case 'cookie':
										if ( curHost.redirect_url_eval.HasValue )
										{
											oRes.error_code = 'redirect';
											oRes.redirect = String( eval( curHost.redirect_url_eval ) );
										}
										break;
								}
								break;
							}
						}
						return oRes;
					}
				}
				else
				{
					throw err;
				}
			}

			Session.SetProperty( 'Env', Env );

			if ( curUserID != null )
			{
				tools_web.set_user_status( curUserID, {
					cur_date: StrDate( CurDate )
				} );
			}
			if ( ! Session.HasProperty( 'sid' ) )
				Session.sid = Random( 0, 1152921504606846976 );

			oRes.access = true;
			return oRes;
	"/>

	<GetProjectManagementObjectsList PROPERTY="1" PARAM="iPersonIDParam" PARAM="arrCurLngParam" PARAM="bAddFuncSubordinatesParam" PARAM="bHideDissmissedParam" PARAM="bShowProjectManagersParam" PARAM="bOverdueParam" PARAM="bProjectTreeParam" PARAM="bCheckTaskSeeRightsParam" PARAM="vBossTypeParam" PARAM="oStructParam" EXPR="


		var arrResult=[]
		var strWhere=''
		var iBossTypeID=null
		var iBossID=null
		var strCategory=null
		var oStruct=null
		var arrCategories=[]
		var bProjectTree=false;
		var bAddTasks=false;
		var strOpenLinkType = 'OPENWINDOW'
		var iDocID=null


		var bCheckTaskSeeRights=false
		var bHasTaskFilter=false
		try
		{
			try
			{
				bProjectTree= tools_web.is_true(bProjectTreeParam);
			}
			catch(ex)
			{
			}


			bAddTasks= bProjectTree?true:false;

			try
			{
				bCheckTaskSeeRights= tools_web.is_true(bCheckTaskSeeRightsParam);
			}
			catch(ex)
			{
			}

			try
			{
				if (oStructParam!=null&&oStructParam!=undefined)
				{
					oStruct=oStructParam
				}
				else
				{
					throw 'no param'
				}
			}
			catch(ex)
			{
			}

			try
			{
				switch (vBossTypeParam)
				{
					case false:
								strWhere=' and $elem/is_native=false()'
								break;
					case true:
								strWhere=' and $elem/is_native=true()'
								break;
					default:
								vBossTypeParam = OptInt(vBossTypeParam,null);
								if (vBossTypeParam != undefined&&vBossTypeParam!=null)
								{
									strWhere=' and $elem/boss_type_id='+vBossTypeParam
								}
								else
								{
									if (Trim(vBossTypeParam)!=''&&vBossTypeParam!=null&&vBossTypeParam!=undefined)
									{
										fldBossType=ArrayOptFirstElem(XQuery('for $elem in boss_types where $elem/code=\''+vBossTypeParam+'\' return $elem'))
										if (fldBossType!=undefined)
										{
											strWhere=' and $elem/boss_type_id='+fldBossType.id
										}
										else
										{
											return Array()
										}
									}
								}
				}
			}
			catch(ex)
			{
				vBossTypeParam=null;
			}




			arrSubObjects=XQuery('for $elem in project_participants where $elem/object_id='+iPersonIDParam+strWhere+' and $elem/catalog=\'collaborator\'  and ( $elem/status_id = \'active\' or $elem/status_id = null() ) return $elem')

			arrGroups=XQuery('for $elem in group_collaborators where $elem/collaborator_id='+iPersonIDParam+' return $elem')
			arrSubObjects=ArrayUnion(arrSubObjects,ArraySelect( QueryCatalogByKeys('project_participants','object_id',ArrayExtract(arrGroups,'group_id')), '!This.status_id.HasValue || This.status_id == \'active\'' ))
			if (bAddFuncSubordinatesParam)
			{
				arrSubordinates=tools.get_sub_persons_by_func_manager_id(iPersonIDParam,null,vBossTypeParam)
				if (bHideDissmissedParam)
				{
					arrSubordinates=ArraySelect(arrSubordinates,'This.is_dismiss!=true')
				}
				arrSubordinates=ArrayExtract(arrSubordinates,'id')
				arrSubordinates=ArrayUnion(arrSubordinates,ArrayExtract(XQuery('for $elem in func_managers where $elem/catalog=\'group\' and $elem/person_id='+iPersonIDParam+' return $elem'),'object_id'))

				arrSubObjects=ArrayUnion(arrSubObjects,ArraySelect( QueryCatalogByKeys('project_participants','object_id',arrSubordinates), '!This.status_id.HasValue || This.status_id == \'active\'' ))
			}


			dCurDate=DateNewTime(Date(),00,00,00)
			function fnBuildProjectObject(fldProjectParam)
			{
				var strBossIDs=null
				var strBossNames=null
				if (bShowProjectManagersParam)
				{

					arrProjectManagers=XQuery('for $elem in project_participants where $elem/project_id='+fldProjectParam.id.Value+' and $elem/boss_type_id='+global_settings.project_manager_type_id+' and $elem/catalog=\'collaborator\' and ( $elem/status_id = \'active\' or $elem/status_id = null() ) return $elem')
					if (iBossID!=null)
					{
						if (ArrayOptFind(arrProjectManagers,'This.object_id=='+iBossID)==undefined)
						{
							return null
						}
					}

					arrProjectManagers=ArraySort(QueryCatalogByKeys('collaborators','id',ArrayExtract(arrProjectManagers,'object_id')),'fullname','+')
					strBossIDs=ArrayMerge(arrProjectManagers,'id','_')
					strBossNames=ArrayMerge(arrProjectManagers,'fullname',', ')

				}


				iReadyPersent=(fldProjectParam.status=='close'?100:null)
				if (fldProjectParam.status=='active')
				{
					arrTasks=XQuery('for $elem in tasks where $elem/source_object_id='+fldProjectParam.id.Value+' and $elem/source_object_type=\'project\' and $elem/status!=\'x\' return $elem')
					iDoneTasks=ArrayCount(ArraySelect(arrTasks,'This.status==\'1\''))
					iAllTasks=ArrayCount(arrTasks)
					if (iAllTasks!=0)
					{
						iReadyPersent=StrRealFixed(Real(Real(Real(iDoneTasks)*Real(100))/Real(iAllTasks)),0);
					}
				}

				iDaysLeft=null

				dEndDatePlan=(fldProjectParam.end_date_plan.HasValue?fldProjectParam.end_date_plan:null)
				dEndDate=(fldProjectParam.end_date_fact.HasValue?fldProjectParam.end_date_fact:null)
				if (dEndDatePlan!=null&&dEndDate==null)
				{
					iDaysLeft=Real(DateDiff(DateNewTime(dEndDatePlan,00,00,00), dCurDate))/Real(86400)
				}
				else if	(dEndDatePlan!=null&&dEndDate!=null)
				{
					iDaysLeft=Real(DateDiff(DateNewTime(dEndDatePlan,00,00,00), DateNewTime(dEndDate,00,00,00)))/Real(86400)
				}

				if (iDaysLeft!=null&&iDaysLeft>0&&(fldProjectParam.status=='project'||fldProjectParam.status=='close'||fldProjectParam.status=='cancel'))
				{
					iDaysLeft=null
				}
				else
				{
					iDaysLeft=StrReal(iDaysLeft,0)
				}
				oSatus=arrCurLngParam.curLngCommon.project_status_types.GetChildByKey( fldProjectParam.status.Value )
				if (global_settings.settings.project.options.use_custom_project_status)
				{
					fldStatusSetting=global_settings.settings.project.project_status_types.GetOptChildByKey( fldProjectParam.status.Value )
					if (fldStatusSetting!=undefined)
						oSatus=fldStatusSetting;
				}
				strIcon=''
				strParentID=null
				if (strCategory!=null)
				{
					switch (strCategory)
					{
						case 'status':
									strParentID=fldProjectParam.status.Value
									strParentName=oSatus.name.Value
									break;
						case 'org':
									strParentID=fldProjectParam.org_id.Value
									strParentName=(fldProjectParam.org_id.OptForeignElem!=undefined?tools_web.get_cur_lng_name( fldProjectParam.org_id.OptForeignElem.name.Value, arrCurLngParam.curLngShortID ):'')
									break;
						case 'boss':
									strParentID=strBossIDs
									strParentName=strBossNames
									break;
					}

					if (Trim(strParentID)!=''&&strParentID!=null)
					{
						if (ArrayOptFind(arrCategories,'This.id==\''+strParentID+'\'')==undefined)
						{
							oNewCategoryElem = {
							'id':strParentID,
							'name':strParentName,
							'parent_id':null,
							'type':'',
							'open_url_action':'',
							'pict':strIcon}

							if (!bProjectTree)
							{
								oNewCategoryElem.SetProperty('subdivision_id',null);
								oNewCategoryElem.SetProperty('sub_name',null);
								oNewCategoryElem.SetProperty('org_id',null);
								oNewCategoryElem.SetProperty('org_name',null);
								oNewCategoryElem.SetProperty('group_name',null);
								oNewCategoryElem.SetProperty('status',null);
								oNewCategoryElem.SetProperty('start_date_plan',null);
								oNewCategoryElem.SetProperty('start_date_plan_sort',null);
								oNewCategoryElem.SetProperty('end_date_plan',null);
								oNewCategoryElem.SetProperty('end_date_plan_sort',null);
								oNewCategoryElem.SetProperty('start_date_fact',null);
								oNewCategoryElem.SetProperty('start_date_fact_sort',null);
								oNewCategoryElem.SetProperty('end_date_fact',null);
								oNewCategoryElem.SetProperty('end_date_fact_sort',null);
								oNewCategoryElem.SetProperty('days_left',null);
								oNewCategoryElem.SetProperty('boss_name',null);
								oNewCategoryElem.SetProperty('boss_ids',null);
								oNewCategoryElem.SetProperty('ready_persent',null);
								oNewCategoryElem.SetProperty('color',null);
							}
							arrCategories.push(oNewCategoryElem)
						}
					}
					else
					{
						strParentID=null
					}
				}

				strIcon='ico/project.ico'
				if (global_settings.settings.project.options.use_custom_project_icon)
				{
					if (global_settings.settings.project.project_icon_script.HasValue)
					try
					{
						strIcon=String(eval(global_settings.settings.project.project_icon_script))
					}
					catch(ex)
					{
					}
				}
				oNewElem = {
				'id':fldProjectParam.id.Value,
				'name':tools_web.get_cur_lng_name( fldProjectParam.name.Value, arrCurLngParam.curLngShortID ),
				'parent_id':strParentID,
				'type':String(fldProjectParam.Name),
				'open_url_action': ( strOpenLinkType+'=' + tools_web.get_mode_clean_url( fldProjectParam.Name, fldProjectParam.id, { doc_id: iDocID } ) ),
				'pict':strIcon}
				if (!bProjectTree)
				{
					oNewElem.SetProperty('subdivision_id',fldProjectParam.subdivision_id.Value);
					oNewElem.SetProperty('sub_name',(fldProjectParam.subdivision_id.OptForeignElem!=undefined?tools_web.get_cur_lng_name( fldProjectParam.subdivision_id.OptForeignElem.name.Value, arrCurLngParam.curLngShortID ):''));
					oNewElem.SetProperty('org_id',fldProjectParam.org_id.Value);
					oNewElem.SetProperty('org_name',(fldProjectParam.org_id.OptForeignElem!=undefined?tools_web.get_cur_lng_name( fldProjectParam.org_id.OptForeignElem.name.Value, arrCurLngParam.curLngShortID ):''));
					oNewElem.SetProperty('group_name',(fldProjectParam.group_id.OptForeignElem!=undefined?tools_web.get_cur_lng_name( fldProjectParam.group_id.OptForeignElem.name.Value, arrCurLngParam.curLngShortID ):''));
					oNewElem.SetProperty('status',tools_web.get_cur_lng_name(RValue(oSatus.name), arrCurLngParam.curLngShortID ));
					oNewElem.SetProperty('start_date_plan',StrDate(fldProjectParam.start_date_plan.Value,false,false));
					oNewElem.SetProperty('start_date_plan_sort',(fldProjectParam.start_date_plan.HasValue?DateToRawSeconds(ParseDate(fldProjectParam.start_date_plan.Value)):null));
					oNewElem.SetProperty('end_date_plan',StrDate(fldProjectParam.end_date_plan.Value,false,false));
					oNewElem.SetProperty('end_date_plan_sort',(fldProjectParam.end_date_plan.HasValue?DateToRawSeconds(ParseDate(fldProjectParam.end_date_plan.Value)):null));
					oNewElem.SetProperty('start_date_fact',StrDate(fldProjectParam.start_date_fact.Value,false,false));
					oNewElem.SetProperty('start_date_fact_sort',(fldProjectParam.start_date_fact.HasValue?DateToRawSeconds(ParseDate(fldProjectParam.start_date_fact.Value)):null));
					oNewElem.SetProperty('end_date_fact',StrDate(fldProjectParam.end_date_fact.Value,false,false));
					oNewElem.SetProperty('end_date_fact_sort',(fldProjectParam.end_date_fact.HasValue?DateToRawSeconds(ParseDate(fldProjectParam.end_date_fact.Value)):null));
					oNewElem.SetProperty('days_left',iDaysLeft);
					oNewElem.SetProperty('boss_name',strBossNames);
					oNewElem.SetProperty('boss_ids',strBossIDs);
					oNewElem.SetProperty('ready_persent',iReadyPersent);
					oNewElem.SetProperty('color',XmlAttrEncode(String('#' + StrHexColor(RValue(oSatus.bk_color)))));
				}

				return oNewElem
			}

			function fnBuildTaskObject(fldProjectTaskParam,arrTasksParam)
			{

				if(!tools_web.check_access(fldProjectTaskParam.id, OptInt(iPersonIDParam), null, null))
						return null;

				iParentTaskID=fldProjectTaskParam.source_object_id.Value
				if (fldProjectTaskParam.parent_task_id.HasValue)
				{
					if(tools_web.check_access(fldProjectTaskParam.parent_task_id, OptInt(iPersonIDParam), null, null))
					{
						if (arrTasksParam!=null)
						{
							if (ArrayOptFind(arrTasksParam,'This.id=='+fldProjectTaskParam.parent_task_id)!=undefined)
							{
								iParentTaskID=fldProjectTaskParam.parent_task_id.Value
							}
						}
						else
						{
							iParentTaskID=fldProjectTaskParam.parent_task_id.Value
						}
					}
				}
								iDaysLeft=null

				dEndDatePlan=(fldProjectTaskParam.end_date_plan.HasValue?fldProjectTaskParam.end_date_plan:null)
				dEndDate=(fldProjectTaskParam.date_fact.HasValue?fldProjectTaskParam.date_fact:null)
				if (dEndDatePlan!=null&&dEndDate==null)
				{
					iDaysLeft=Real(DateDiff(DateNewTime(dEndDatePlan,00,00,00), dCurDate))/Real(86400)
				}
				else if	(dEndDatePlan!=null&&dEndDate!=null)
				{
					iDaysLeft=Real(DateDiff(DateNewTime(dEndDatePlan,00,00,00), DateNewTime(dEndDate,00,00,00)))/Real(86400)
				}

				if (iDaysLeft!=null&&iDaysLeft>0&&(fldProjectTaskParam.status=='x'||fldProjectTaskParam.status=='1'||fldProjectTaskParam.status=='r'))
				{
					iDaysLeft=null
				}
				else
				{
					iDaysLeft=StrReal(iDaysLeft,0)
				}

				strIcon='ico/task.ico'
				if (global_settings.settings.project_task.options.use_custom_project_task_icon)
				{
					if (global_settings.settings.project_task.project_task_icon_script.HasValue)
					try
					{
						strIcon=String(eval(global_settings.settings.project_task.project_task_icon_script))
					}
					catch(ex)
					{
					}
				}
				oNewElem ={'id':fldProjectTaskParam.id.Value,
				'name':tools_web.get_cur_lng_name( fldProjectTaskParam.name.Value, arrCurLngParam.curLngShortID ),
				'parent_id':iParentTaskID,
				'type':String(fldProjectTaskParam.Name),
				'open_url_action': ( strOpenLinkType+'=' + tools_web.get_mode_clean_url( fldProjectTaskParam.Name, fldProjectTaskParam.id, { doc_id: iDocID } ) ),
				'pict':strIcon
				}


				return oNewElem
			}

			strWhere=''
			strTaskWhere=''
			if (oStruct!=null)
			{
				for (fldStructProperty in oStruct)
				{

					vValue=oStruct.GetOptProperty(fldStructProperty,null)
					if (vValue!=''&&vValue!=null&&vValue!='null')
					{
						if (StrEnds(fldStructProperty,'boss_id',true))
						{
							if (StrBegins(fldStructProperty,'task_filter_field_',true))
							{
								strTaskWhere=strTaskWhere+' and $elem/assigner_id='+Int(vValue)+' '
							}
							else
							{
								iBossID=OptInt(vValue,null)
							}
						}
						else if (StrEnds(fldStructProperty,'org_id',true))
						{
							if (StrBegins(fldStructProperty,'task_filter_field_',true))
							{
								strTaskWhere=strTaskWhere+' and $elem/executor_id='+Int(vValue)+' '
							}
							else
							{
								strWhere=strWhere+(strWhere!=''?'and ':' where ')+'$elem/org_id='+Int(vValue)+' '
							}
						}
						else if (StrEnds(fldStructProperty,'subdivision_id',true))
						{
							if (StrBegins(fldStructProperty,'task_filter_field_',true))
							{
								strTaskWhere=strTaskWhere+' and $elem/executor_id='+Int(vValue)+' '
							}
							else
							{
								strWhere=strWhere+(strWhere!=''?'and ':' where ')+'$elem/subdivision_id='+Int(vValue)+' '
							}
						}
						else if (StrEnds(fldStructProperty,'group_id',true))
						{
							if (StrBegins(fldStructProperty,'task_filter_field_',true))
							{
								strTaskWhere=strTaskWhere+' and $elem/executor_id='+Int(vValue)+' '
							}
							else
							{
								strWhere=strWhere+(strWhere!=''?'and ':' where ')+'$elem/group_id='+Int(vValue)+' '
							}
						}
						else if (StrEnds(fldStructProperty,'end_date_plan_from',true))
						{
							if (StrBegins(fldStructProperty,'task_filter_field_',true))
							{
								strTaskWhere=strTaskWhere+' and $elem/end_date_plan >= date(\'' + Date(vValue) + '\') '
							}
							else
							{
								strWhere=strWhere+(strWhere!=''?'and ':' where ')+'$elem/end_date_plan >= date(\'' + Date(vValue) + '\') '
							}
						}
						else if (StrEnds(fldStructProperty,'end_date_plan_to',true))
						{
							strWhere=strWhere+(strWhere!=''?'and ':' where ')+'$elem/end_date_plan <= date(\'' + Date(vValue) + '\') '
							if (bAddTasks)
							{
								strTaskWhere=strTaskWhere+' and $elem/end_date_plan <= date(\'' + Date(vValue) + '\') '
							}
						}
						else if (StrEnds(fldStructProperty,'name_contains',true))
						{
							if (StrBegins(fldStructProperty,'task_filter_field_',true))
							{
								strTaskWhere=strTaskWhere+' and contains($elem/name,\'' + vValue + '\') '
							}
							else
							{
								strWhere=strWhere+(strWhere!=''?'and ':' where ')+'contains($elem/name,\'' + vValue + '\') '
							}
						}
						else if (StrEnds(fldStructProperty,'key_words',true))
						{
							strKeyWords=''
							arrKeyWords=UnifySpaces(vValue).split(';')
							for ( strKeyWord in arrKeyWords)
							{
								if(strKeyWord!='')
								{
									strKeyWords += (strKeyWords!='' ? 'or ' : '' )+'doc-contains($elem/id, \'DefaultDb\', \'' + strKeyWord + '\') ';
								}
							}
							if (strKeyWords!='')
							{
								if (StrBegins(fldStructProperty,'task_filter_field_',true))
								{
									strTaskWhere=strTaskWhere+' and (' + strKeyWords + ') '
								}
								else
								{
									strWhere=strWhere+(strWhere!=''?'and ':' where ')+'(' + strKeyWords + ') '
								}
							}
						}
						else if (StrEnds(fldStructProperty,'status',true))
						{
							if (vValue!='all')
							{
								if (StrBegins(fldStructProperty,'task_filter_field_',true))
								{
									sTaskValue='p'
									switch(vValue)
									{
										case 'plan':
											sTaskValue='r'
											break;
										case 'active':
											sTaskValue='0'
											break;
										case 'close':
											sTaskValue='1'
											break;
										case 'cancel':
											sTaskValue='x'
											break;
									}
									strTaskWhere=strTaskWhere+' and $elem/status=\''+sTaskValue+'\' '
								}
								else
								{
									strWhere=strWhere+(strWhere!=''?'and ':' where ')+'$elem/status=\''+vValue+'\' '
								}
							}
						}
						else if (StrEnds(fldStructProperty,'category',true))
						{
							if (vValue!='empty')
							{
								strCategory=vValue
							}
						}
						else if (StrEnds(fldStructProperty,'strStatusList',true))
						{
							if ((oStruct.HasProperty('status')&&oStruct.GetOptProperty('status')=='all')||(!oStruct.HasProperty('status')))
							{
								arrStatusList=vValue.split( ';' );
								bIncludeAll=true

								for (fldStatusType in arrCurLngParam.curLngCommon.project_status_types)
								{
									if(ArrayOptFind(arrStatusList, 'This == \'' + fldStatusType.id + '\'') == undefined)
									{
										bIncludeAll=false;
										break;
									}
								}
								if (!bIncludeAll)
								{
									strLocalWhere=''
									for(sEventType in arrStatusList)
									{
										if(sEventType != '')
										{
											if(strLocalWhere != '')
												strLocalWhere += ' or ';
											strLocalWhere += ' $elem/status=\'' + sEventType + '\'';
										}
									}
									if(strLocalWhere != '')
									{
										strWhere=strWhere+(strWhere!=''?'and ':' where ')+'(' + strLocalWhere + ') '
									}
								}
							}
						}
						else if (fldStructProperty=='strOpenLinkType')
						{
							strOpenLinkType = vValue
						}
						else if (fldStructProperty=='doc_id')
						{
							iDocID = vValue
						}
					}
				}
			}

			bHasTaskFilter=(bAddTasks&&(Trim(strTaskWhere)!=''))
			//alert(strWhere)
			//alert('strTaskWhere='+strTaskWhere)
			if (strWhere!='')
			{
				if (bOverdueParam)
				{
					strWhere=strWhere+(strWhere!=''?'and ':' where ')+'$elem/end_date_plan < date(\''+dCurDate+'\') '
				}
				strWhere=strWhere+(strWhere!=''?'and ':' where ')+'$elem/is_model=false() '
				arrProjects=Array()
				arrTempProjects=XQuery('for $elem in projects'+strWhere+' return $elem')
				arrSubObjects=ArraySelectDistinct(arrSubObjects,'project_id')
				for (fldTempProject in arrTempProjects)
				{
					if ( fldTempProject.join_mode == 'request' || fldTempProject.join_mode == 'open' || ArrayOptFirstElem(ArraySelect(arrSubObjects,'This.project_id=='+fldTempProject.id)) != undefined )
					{
						arrProjects.push(fldTempProject)
					}
				}
			}
			else
			{
				arrProjects=QueryCatalogByKeys('projects','id',ArrayExtract(arrSubObjects,'project_id'))
				arrProjects=ArraySelect(arrProjects,'This.is_model==false')
				if (bOverdueParam)
				{
					arrProjects=ArraySelect(arrProjects,'This.end_date_plan.HasValue&&Date(This.end_date_plan) < Date(\''+dCurDate+'\')')
				}
			}


			for (fldProject in arrProjects)
			{
				if(!tools_web.check_access(fldProject.id, OptInt(iPersonIDParam), null, null))
					continue;
				curResult=fnBuildProjectObject(fldProject)
				if (curResult!=null)
				{
					arrResult.push(curResult)
					if (bAddTasks)
					{
						bCanSeeAll=true
						if (bCheckTaskSeeRights)
						{
							xarrBossTypes = tools.get_object_relative_boss_types(iPersonIDParam, fldProject.id.Value);
							xarrOperations = tools.get_relative_operations_by_boss_types(xarrBossTypes);
							xarrOperationsRights = ArraySelect(xarrOperations, 'This.operation_type == 1');
							bCanSeeAll=(ArrayOptFind(xarrOperationsRights, 'This.action == \'project_see_all_tasks\'') !=undefined);
						}
						strLocalWhere=strTaskWhere
						if (!bCanSeeAll)
						{
							strOrWhere='$elem/assigner_id='+iPersonIDParam+' or $elem/executor_id='+iPersonIDParam

							arrProjectGroups=XQuery('for $elem in project_participants where $elem/project_id=' + fldProject.id.Value + ' and $elem/catalog=\'group\' and ( $elem/status_id = \'active\' or $elem/status_id = null() ) return $elem')
							for (fldProjectGroup in arrProjectGroups)
							{
								if (ArrayOptFirstElem(XQuery('for $elem in group_collaborators where $elem/collaborator_id='+iPersonIDParam+' and $elem/group_id='+fldProjectGroup.object_id+' return $elem'))!=undefined)
								{
									strOrWhere=strOrWhere+' or $elem/executor_id='+fldProjectGroup.object_id
								}
							}
							strLocalWhere=strLocalWhere+' and ('+strOrWhere+')'
						}

						strXQuery='for $elem in tasks where $elem/source_object_id='+fldProject.id.Value+' and $elem/source_object_type=\'project\''+strLocalWhere+' return $elem'
						//alert(strXQuery)
						arrTasks=XQuery(strXQuery)
						/*alert(fldProject.name)
						for (fldTask in arrTasks)
						{
							alert('\t'+fldTask.id+' '+fldTask.name)
						}*/
						for (fldTask in arrTasks)
						{

							curResult=fnBuildTaskObject(fldTask,((!bCanSeeAll||bHasTaskFilter)?arrTasks:null))
							if (curResult!=null)
							{
								arrResult.push(curResult)
							}
						}
					}
				}
			}


			return ArrayUnion(arrResult,arrCategories)

		}
		catch(ex)
		{
			alert('GetProjectManagementObjectsList: '+ex)
		}
		return arrResult
	"/>


	<CheckRelativeFileVisibility PROPERTY="1" wsDesc="{'author':'makharadze','level':1,'desc':'check object files visibility','private':false,'addauthors':['maslanov']}" PARAM="fldFileParam" PARAM="iUserIDParam" PARAM="iObjectIDParam" PARAM="teObjectParam" EXPR="

		var bVisible=false;
		var sName=''
		var sVisibility=''

		try
		{

			try
			{
				sVisibility=Trim(fldFileParam.visibility)
			}
			catch(x)
			{
			}

			if (sVisibility!='' &amp;&amp; sVisibility!='all')
			{
				try
				{
					if ( teObjectParam == null )
					{
						throw 'no_doc';
					}
					else
					{
						teObject=teObjectParam;
					}
				}
				catch(x)
				{
					teObject = OpenDoc( UrlFromDocID( iObjectIDParam ) ).TopElem;
				}



				try
				{
					sName=teObject.Name
				}
				catch(ex)
				{
				}

				switch ( sName )
				{
					case 'task':
					case 'project':

						iID=iObjectIDParam

						if (sName=='task'&&teObject.source_object_type=='project'&&teObject.source_object_id.OptForeignElem!=undefined)
						{
							iID=teObject.source_object_id
						}

						arrBossTypes=QueryCatalogByKeys( 'boss_types', 'id',ArraySelect(ArrayExtract( sVisibility.split(';'), 'OptInt(This,null)' ),'This!=null'))
						if (ArrayOptFirstElem(arrBossTypes)!=undefined)
						{
							xarrObjectBossTypes = tools.get_object_relative_boss_types(iUserIDParam, iID);
							for (fldBossType in arrBossTypes)
							{
								if (ArrayOptFind(xarrObjectBossTypes,'This.id=='+fldBossType.id)!=undefined)
								{
									bVisible=true
									break;
								}
							}
						}

						break;

					case 'event':

						if (sVisibility=='responsible'||sVisibility=='participants')
						{
							xarrObjectBossTypes = tools.get_object_relative_boss_types(iUserIDParam, iObjectIDParam);
							if (sVisibility=='responsible')
							{
								bVisible=(ArrayOptFind(xarrObjectBossTypes,'This.code == \'event_tutor\'')!=undefined)
							}
							else if (sVisibility=='participants')
							{
								bVisible=(ArrayOptFind(xarrObjectBossTypes,'This.code == \'event_participaint\'')!=undefined)
							}
						}

						break;

					default:
						bVisible=true
						break;
				}

			}
			else
			{
				bVisible=true
			}
		}
		catch(ex)
		{
			alert('CheckRelativeFileVisibility: '+ex)
		}

		if (bVisible)
		{
			return sVisibility
		}
		else
		{
			return null
		}

	"/>

	<get_date_passed_string PROPERTY="1" PARAM="dDateParam" PARAM="sCurLngId" EXPR="
		iMessageDaysPast = DateDiff( Date(),dDateParam) / 86400;
		sTimePast = '';
		if(iMessageDaysPast!=0)
		{
			iDays = Int(iMessageDaysPast) + 10;
			switch(iDays % 10)
			{
				case 1:
				{
					if( iDays < 20 || iDays > 30)
						sTimePast = StrNonTitleCase( tools_web.get_web_const('dennazad', sCurLngId ) );
					else
						sTimePast = StrNonTitleCase( tools_web.get_web_const('dneynazad', sCurLngId ) );
					break;
				}
				case 2:
				case 3:
				case 4:
				{
					if( iDays < 20 || iDays > 30)
						sTimePast = StrNonTitleCase( tools_web.get_web_const('dnyanazad', sCurLngId ) );
					else
						sTimePast = StrNonTitleCase( tools_web.get_web_const('dneynazad', sCurLngId ) );
					break;
				}
				default:
				{
					sTimePast = StrNonTitleCase( tools_web.get_web_const('dneynazad', sCurLngId ) );
					break;
				}
			}
			sTimePast = iMessageDaysPast + ' ' + sTimePast;
		}
		else
		{
			iMessageHoursPast = DateDiff( Date(),dDateParam) / 3600;
			if(iMessageHoursPast != 0)
			{
				sTimePast = iMessageHoursPast + tools_web.get_web_const('chnazad', sCurLngId );
			}
			else
			{
				iMessageMinutesPast = DateDiff( Date(),dDateParam) / 60;
				if(iMessageMinutesPast != 0)
				{
					sTimePast = iMessageMinutesPast + tools_web.get_web_const('minnazad', sCurLngId );
				}
				else
				{
					sTimePast = tools_web.get_web_const('tolkochto', sCurLngId ) + ' ';
				}
			}
		}
		return sTimePast;
	"/>

	<get_date_remain_string PROPERTY="1" PARAM="dDateParam" PARAM="sCurLngId" EXPR="
		iRest = DateDiff(dDateParam, Date()) / 86400;
		iDays = iRest + 10;
		sDays = StrNonTitleCase( tools_web.get_web_const('2kaidfx9na', sCurLngId) );
		switch(iDays % 10)
		{
			case 1:
			{
				if( iDays < 20 || iDays > 30)
					sDays = StrNonTitleCase( tools_web.get_web_const('w6n76t3f75', sCurLngId ) );
				else
					sDays = StrNonTitleCase( tools_web.get_web_const('2kaidfx9na', sCurLngId ) );
				break;
			}
			case 2:
			case 3:
			case 4:
			{
				if( iDays < 20 || iDays > 30)
					sDays = StrNonTitleCase( tools_web.get_web_const('dnya', sCurLngId ) );
				else
					sDays = StrNonTitleCase( tools_web.get_web_const('2kaidfx9na', sCurLngId ) );
				break;
			}
			default:
			{
				sDays = StrNonTitleCase( tools_web.get_web_const('2kaidfx9na', sCurLngId ) );
				break;
			}
		}
		sDays = (iRest==0) ? StrNonTitleCase( tools_web.get_web_const('nhwau6dslm', sCurLngId ) ) : ( iRest &lt; 0 ? '-' + ( 0 - iRest ) : iRest ) + '&nbsp;' + sDays;
		return sDays;
	"/>


	<get_host_obj PROPERTY="1" PARAM="Request" EXPR="
			curLngID = null;
			curWebDesignID = null;

			resEnv = new Object;
			Env = Request.Session.GetOptProperty( 'Env', ({}) );

			curUser = Env.GetOptProperty( 'curUser', null );
			if ( curUser != null &amp;&amp; curUser.lng_id.HasValue &amp;&amp; lngs.ChildByKeyExists( curUser.lng_id ) )
				curLngID = curUser.lng_id.Value;

			curSiteID = Env.GetOptProperty( 'curSiteID', null );
			curHostName = Env.GetOptProperty( 'curHostName', '' );
			if ( curSiteID != null &amp;&amp; curHostName != tools_web.get_host_name( Request.Url ) )
			{
				resEnv.SetProperty( 'curErrorText', 'Current host does not match session host.' );
				return resEnv;
			}

			if ( curSiteID == null )
			{
				curSite = null;
				curHost = tools_web.get_cur_host( Request );
				if ( curHost == null )
				{
					resEnv.SetProperty( 'curErrorText', 'Current host is not found in the list of WebSoft HCM access allowed hosts.' );
					return resEnv;
				}
				curHostID = curHost.id.Value;
				curHostName = tools_web.get_cur_host_name( curHost, Request );
				curHostPath = tools_web.get_cur_host_path_by_url( curHost, Request.Url );

				curSiteID = curHost.site_id.Value;
			}
			else
			{
				curSiteID = Env.GetOptProperty( 'curSiteID', null );
				curHostID = Env.GetOptProperty( 'curHostID', null );
				curHost = tools_web.get_cur_host( Env );
				curHostPath = Env.GetOptProperty( 'curHostPath', '' );
			}
			if ( curHost.header_hosts.ChildNum != 0 )
			{
				curHeaderHost = Request.Header.GetOptProperty( 'Host', '' );
				if ( curHeaderHost != '' &amp;&amp; ArrayOptFindByKey( curHost.header_hosts, curHostName, 'host_name' ) == undefined )
				{
					resEnv.SetProperty( 'curErrorText', 'Current header host is not found in the list of WebSoft HCM access allowed header hosts.' );
					return resEnv;
				}
			}
			if ( curSiteID != null )
			{
				try
				{
					curSite = FetchDoc( UrlFromDocID( curSiteID ) ).TopElem;
				}
				catch ( err2 )
				{
					curSiteID = null;
					alert( err2 );
				}
			}
			if ( curSite != null )
			{
				if ( curLngID == null &amp;&amp; curSite.lng_id.HasValue &amp;&amp; lngs.ChildByKeyExists( curSite.lng_id ) )
				{
					curLngID = curSite.lng_id.Value;
				}
				if ( curWebDesignID == null || ! curSite.web_designs.ChildByKeyExists( curWebDesignID ) )
				{
					curWebDesignID = curSite.web_design_id.Value;
				}
			}

			if ( curLngID == null )
				curLngID = global_settings.settings.default_lng.Value;
			if ( curWebDesignID == null )
				curWebDesignID = global_settings.settings.default_web_design_id.Value;

			curHostSettings = new Object;
			curHostSettings.default_web_design = '' + curWebDesignID;
			if ( curHost == null )
			{
				curHostSettings.default_portal_type = 'default';
				curHostSettings.portal_auth_type = 'basic';
			}
			else
			{
				curHostSettings.default_portal_type = curHost.portal_type.Value;
				curHostSettings.portal_auth_type = curHost.portal_auth_type.Value;
			}

			curWebDesign = FetchDoc( UrlFromDocID( curWebDesignID ) ).TopElem;
			curWebDesignUrl = curWebDesign.resources_url.Value;

			oLngEnv = tools_web.get_cur_lng_obj( curLngID );
			resEnv.SetProperty( 'curLngID', curLngID );
			resEnv.SetProperty( 'curLng', oLngEnv.curLng );
			resEnv.SetProperty( 'curLngWeb', oLngEnv.curLngWeb );
			resEnv.SetProperty( 'curLngCommon', oLngEnv.curLngCommon );

			resEnv.SetProperty( 'curWebDesignID', curWebDesignID );
			resEnv.SetProperty( 'curWebDesignUrl', curWebDesignUrl );
			resEnv.SetProperty( 'curWebDesign', curWebDesign );

			resEnv.SetProperty( 'curHostID', curHostID );
			resEnv.SetProperty( 'curHost', curHost );
			resEnv.SetProperty( 'curHostSettings', curHostSettings );
			resEnv.SetProperty( 'curHostPath', curHostPath );
			resEnv.SetProperty( 'curHostName', curHostName );

			resEnv.SetProperty( 'curSiteID', curSiteID );
			resEnv.SetProperty( 'curSite', curSite );

			return resEnv;
	"/>

	<get_cur_lng_obj PROPERTY="1" PARAM="oIDParam" EXPR="
			if ( ObjectType( oIDParam ) == 'JsObject' )
			{
				var curLngID = oIDParam.GetOptProperty( 'curLngID', null );
				if ( curLngID == null )
				{
					curSite = oIDParam.GetOptProperty( 'curSite', null );
					if ( curSite != null )
					{
						if ( curSite.lng_id.HasValue &amp;&amp; lngs.ChildByKeyExists( curSite.lng_id ) )
						{
							curLngID = curSite.lng_id.Value;
						}
					}
					if ( curLngID == null )
					{
						curLngID = global_settings.settings.default_lng.Value;
					}
				}
			}
			else
			{
				var curLngID = '' + oIDParam;
			}

			var resEnv = new Object;
			var curLng = lngs.GetChildByKey( curLngID );
			resEnv.SetProperty( 'curLngID', curLngID );
			resEnv.SetProperty( 'curLng', curLng );
			resEnv.SetProperty( 'curLngWeb', curLng.items );
			resEnv.SetProperty( 'curLngCommon', ( curLng.common_url.HasValue ? FetchDoc( curLng.common_url ).TopElem : common ) );
			return resEnv;
	"/>

	<get_cur_object_by_field PROPERTY="1" PARAM="Env" PARAM="sFieldParam" EXPR="
			var curObjectID = Env.GetOptProperty( sFieldParam, null );
			if ( curObjectID == null )
			{
				return null;
			}
			else
			{
				return FetchDoc( UrlFromDocID( curObjectID ) ).TopElem;
			}
	"/>
	<get_cur_web_design PROPERTY="1" PARAM="Env" EXPR="
			return tools_web.get_cur_object_by_field( Env, 'curWebDesignID' );
	"/>
	<get_cur_site PROPERTY="1" PARAM="Env" EXPR="
			return tools_web.get_cur_object_by_field( Env, 'curSiteID' );
	"/>
	<get_cur_web_mode PROPERTY="1" PARAM="Env" EXPR="
			return tools_web.get_cur_object_by_field( Env, 'curWebModeID' );
	"/>
	<get_cur_env PROPERTY="1" PARAM="Request" EXPR="
			var Env = Request.Session.GetOptProperty( 'Env' );
			if ( Env == undefined || Env == null )
			{
				Env = new SafeObject;
			}
			return Env;
	"/>
	<get_cur_env_url PROPERTY="1" PARAM="Env" EXPR="
			var curSessionID = Env.GetOptProperty( 'curSessionID', null );
			if ( curSessionID == null )
			{
				return null;
			}
			var oData = tools_web.get_user_data( 'session_env_' + curSessionID );
			if ( oData != null )
			{
				return oData.GetOptProperty( 'cur_env_url', null );
			}
			return null;
	"/>


	<get_default_lng_web PROPERTY="1" PARAM="oUserParam" EXPR="
			try
			{
				iUserID = OptInt( oUserParam );
				if ( iUserID != undefined )
					oUserParam = OpenDoc( UrlFromDocID( iUserID ) ).TopElem;

				if ( oUserParam.lng_id.HasValue )
					curLngID = oUserParam.lng_id.Value;
				else
					throw 'default_data';
			}
			catch ( err )
			{
				curLngID = global_settings.settings.default_lng.Value;
			}
			curLng = lngs.GetChildByKey( curLngID );
			return curLng.items;
	"/>


	<get_profiling_statistic_rec_id PROPERTY="1" EXPR="
			return 0;
	"/>

	<start_profiling_record PROPERTY="1" PARAM="oParams" EXPR="
			if ( ! global_settings.settings.use_profiling )
				return null;

			try
			{
				sID = '' + Random( 1000000000, 9999999999 );
				oRec = ({
					'date': CurDate,
					'cur_ticks': GetCurTicks(),
					'template_id': oParams.template_id,
					'parent_template_id': oParams.parent_template_id
				});
				if ( oParams.HasProperty( 'template_type' ) )
					oRec.SetProperty( 'template_type', oParams.template_type );
				if ( oParams.HasProperty( 'parent_template_type' ) )
					oRec.SetProperty( 'parent_template_type', oParams.parent_template_type );

				tools_web.set_user_data( 'profiling_record_' + sID, oRec, 3600 );
			}
			catch ( err )
			{
				alert( err );
				return null;
			}
			return sID;
	"/>

	<finish_profiling_record PROPERTY="1" PARAM="sID" EXPR="
			if ( sID == null || sID == '' || ! global_settings.settings.use_profiling )
				return false;

			try
			{
				sID = 'profiling_record_' + sID;
				oRec = tools_web.get_user_data( sID );
				if ( oRec == null )
					return false;

				iCurTicks = OptInt( oRec.cur_ticks );
				if ( iCurTicks == undefined )
					return false;

				iTemplateID = OptInt( oRec.template_id );
				if ( iTemplateID == undefined )
				{
					catTemplate = ArrayOptFirstElem( XQuery( 'for $elem in custom_web_templates where $elem/code =' + XQueryLiteral( Trim( oRec.template_id ) ) +' return $elem' ) );
					if ( catTemplate == undefined )
						return false;

					iTemplateID = catTemplate.id.Value;
				}

				docStatisticData = OpenNewDoc( 'x-local://wtv/wtv_profiling_record.xmd' );
				docStatisticData.TopElem.start_date = oRec.date;
				docStatisticData.TopElem.ticks = iCurTicks;
				docStatisticData.TopElem.duration = ( GetCurTicks() - iCurTicks );
				docStatisticData.TopElem.template_id = iTemplateID;
				docStatisticData.TopElem.parent_template_id = oRec.parent_template_id;

				docStatisticData.BindToDb( 'trash' );
				docStatisticData.Save();

				tools_web.remove_user_data( sID );
			}
			catch ( err )
			{
				alert( err );
				return false;
			}
			return true;
	"/>

	<GetVacancyResponseStatus PROPERTY="1" PARAM="obVacancyResponseParam" PARAM="iVacancyResponseIDParam" PARAM="curLngCommonParam" EXPR="
		var strReturn=''
		var fldVacancyResponse=undefined
		try
		{
			try
			{
				if (obVacancyResponseParam.Name=='vacancy_response')
					fldVacancyResponse=obVacancyResponseParam
			}
			catch(ex)
			{
				iVacancyResponseID=OptInt(iVacancyResponseIDParam,null)
				if (iVacancyResponseID!=null)
				{
					fldVacancyResponse=ArrayOptFirstElem(XQuery('for $elem in vacancy_responses where $elem/id = ' + iVacancyResponseID + ' return $elem'))
				}
			}

			if (fldVacancyResponse!=undefined)
			{
				strStatus=fldVacancyResponse.status.Value
				if (strStatus!='')
				{
					strReturn=curLngCommonParam.vacancy_response_status_types.GetChildByKey( strStatus ).name.Value

					if (strStatus=='invited')
					{
						fldCareerReserve=fldVacancyResponse.career_reserve_id.OptForeignElem
						if (fldCareerReserve!=undefined)
						{
							teCareerReserve=null
							try
							{
								teCareerReserve = OpenDoc( UrlFromDocID( fldCareerReserve.id ) ).TopElem;
							}
							catch(ex)
							{
							}

							if (teCareerReserve!=null)
							{
								arrTasks=ArraySelect(teCareerReserve.tasks,'This.status==\'passed\'&&This.name.HasValue')

								fldPassedWithFinishDate=ArrayOptMax(arrTasks, 'This.fact_date')
								fldPassedWithPlanDate=ArrayOptMax(arrTasks, 'This.plan_date')

								if (fldPassedWithPlanDate!=undefined&&fldPassedWithFinishDate!=undefined)
								{
									if (fldPassedWithPlanDate.plan_date>=fldPassedWithFinishDate.fact_date)
									{
										strReturn=fldPassedWithPlanDate.name.Value
									}
									else
									{
										strReturn=fldPassedWithFinishDate.name.Value
									}
								}
								else if (fldPassedWithPlanDate!=undefined)
								{
									strReturn=fldPassedWithPlanDate.name.Value
								}
								else if (fldPassedWithFinishDate!=undefined)
								{
									strReturn=fldPassedWithFinishDate.name.Value
								}
								else
								{
									fldMaxTask=ArrayOptMax(arrTasks, 'This.ChildIndex')
									if (fldMaxTask!=undefined)
									{
										strReturn=fldMaxTask.name.Value
									}
								}

							}
						}
					}
				}
			}
		}
		catch(ex)
		{
			alert('GetVacancyResponseStatus: '+ex)
		}

		return strReturn
	"/>


	<html_decode PROPERTY="1" PARAM="sParam" EXPR="
			return StrReplace( StrReplace( StrReplace( sParam, '&amp;quot;', '&quot;' ), '&amp;lt;', '&lt;' ), '&amp;gt;', '&gt;' );
	"/>

	<html_to_imput_value PROPERTY="1" PARAM="sParam" EXPR="
			return HtmlToPlainText( StrReplace( StrReplace( sParam, '\r\n', '&lt;br/&gt;' ), '\n', '&lt;br/&gt;' ) );
	"/>


	<content_types TYPE="variant"/>


	<get_app_ui PROPERTY="1" EXPR="
			if ( LdsIsServer )
			{
				return ({ 'themeColors': FetchDoc( '//app_ui/theme/app_ui_theme.xml' ).TopElem.colors });
			}
			else
			{
				return AppUi;
			}
	"/>



	<set_st_category PROPERTY="1" PARAM="curUserParam" EXPR="
			if ( global_settings.settings.set_st_category &amp;&amp; (tools.sys_db_capability &amp; tools.UNI_CAP_BASIC) != 0 &amp;&amp; curUserParam != null  &amp;&amp; curUserParam.lng_id.HasValue )
			{
				try
				{
					tools.spxml_unibridge.Object.provider.SetSTCategory( curUserParam.lng_id.Value );
				}
				catch ( err_st )
				{
					alert( err_st );
				}
			}
	"/>

	<get_child_by_key_value PROPERTY="1" PARAM="fldSourceParam" PARAM="sKeyParam" PARAM="sDefaultValueParam" EXPR="
			if(fldSourceParam.ChildByKeyExists(sKeyParam))
				return fldSourceParam.GetChildByKey(sKeyParam).value;
			else
				return sDefaultValueParam;
	"/>


	<get_object_image_url PROPERTY="1" PARAM="oObjectParam" PARAM="bDispDefaultParam" EXPR="
			try
			{
				bDispDefaultParam;
			}
			catch ( err )
			{
				bDispDefaultParam = true;
			}
			curTitle_sImageUrl = '';
			if ( oObjectParam.ChildExists( 'resource_id' ) && oObjectParam.resource_id.HasValue )
				curTitle_sImageUrl = tools_web.get_object_source_url( 'resource', oObjectParam.resource_id );

			if ( curTitle_sImageUrl == '' &amp;&amp; bDispDefaultParam )
				curTitle_sImageUrl = '/images/' + oObjectParam.Name + '.png';

			return curTitle_sImageUrl;
	"/>

	<str_file_size PROPERTY="1" PARAM="iSizeParam" PARAM="bDispDefaultParam" EXPR="
			sSize = '';
			if ( iSizeParam > 0 )
			{
				rKb = iSizeParam / 1024.0;
				if ( rKb < 1 )
					sSize = iSizeParam + ' ' + 'B';
				else if ( rKb > 1024 )
					sSize = StrReal( ( rKb / 1024.0 ), 1 ) + ' ' + 'MB';
				else
					sSize = StrReal( rKb, 1 ) + ' ' + 'kB';
			}
			return sSize;
	"/>

	<get_base_url_path PROPERTY="1" PARAM="oEnvParam" EXPR="
			var curHost = tools_web.get_cur_host( oEnvParam );
			if ( curHost == null || curHost.referer_host_path == '' )
			{
				return '/';
			}
			sUrlPath = UrlPath( curHost.referer_host_path );
			return sUrlPath + ( StrEnds( sUrlPath, '/' ) ? '' : '/' );
	"/>

	<set_base_url_path PROPERTY="1" PARAM="sUrlParam" PARAM="oEnvParam" EXPR="
			try
			{
				oEnvParam;
			}
			catch ( err )
			{
				oEnvParam = new Object;
			}
			if ( StrBegins( sUrlParam, '/' ) )
			{
				return tools_web.get_base_url_path( oEnvParam ) + StrRightRangePos( sUrlParam, 1 );
			}
			else
			{
				return sUrlParam;
			}
	"/>

	<get_menu_items PROPERTY="1" CALLER-ENV="1" PARAM="sMenuCodeParam" PARAM="iLevelsToShowParam" PARAM="bShowDescParam" PARAM="iCacheTimeParam" EXPR="
		if ( curSite.menus.ChildNum == 0 )
		{
			curSite = FetchDoc( UrlFromDocID( curSiteID ) ).TopElem;
		}
		//teSite = OpenDoc(UrlFromDocID(curSiteID)).TopElem;
		//aCurMenuDocumentsItem = teSite.menus.GetOptChildByKey( sMenuCodeParam );
		aCurMenuDocumentsItem = curSite.menus.GetOptChildByKey( sMenuCodeParam );
		function addMenuItem(fldMenuItem, iLevel)
		{
			var catItemDocumentElem = fldMenuItem.document_id.OptForeignElem;
			if ( catItemDocumentElem == undefined &amp;&amp; ! fldMenuItem.link_url.HasValue )
			{
				return null;
			}

			var oMenuItem = {
				id: fldMenuItem.id.Value,
				document_id: fldMenuItem.document_id.Value,
				name: tools_web.get_cur_lng_name( fldMenuItem.name, curLng.short_id ),
				position: fldMenuItem.position.Value,
				class: fldMenuItem.class.Value,
				icon_url: fldMenuItem.icon_url.Value
			};

			if ( catItemDocumentElem == undefined )
			{
				oMenuItem.link_href = fldMenuItem.link_url.Value;
				oMenuItem.link_target = '_self';
			}
			else
			{
				if ( ! tools_web.check_access( catItemDocumentElem, curUserID, curUser, Session ) )
				{
					return null;
				}
				if ( catItemDocumentElem.is_link )
				{
					oMenuItem.link_href = catItemDocumentElem.link_href.Value;
					oMenuItem.link_target = catItemDocumentElem.link_target.Value;
				}
				else
				{
					oMenuItem.link_href = XmlAttrEncode( tools_web.doc_link( catItemDocumentElem ) );
					oMenuItem.link_target = '_self';
				}
				if(bShowDescParam)
				{
					teDoc = OpenDoc(UrlFromDocID(fldMenuItem.document_id)).TopElem;
					if( teDoc.resource_id.HasValue && teDoc.resource_id.OptForeignElem != undefined)
					{
						oMenuItem.image_url = 'download_file.html?file_id=' + teDoc.resource_id + '&sid=' + tools_web.get_sum_sid( teDoc.resource_id, Request.Session.sid );
					}
					else
					{
						oMenuItem.image_url = '';
					}
					oMenuItem.desc = teDoc.comment.HasValue ? teDoc.comment : '';
				}
				else
				{
					oMenuItem.image_url = '';
					oMenuItem.desc = '';
				}
			}

			oMenuItem.active_class = '';
			oMenuItem.level = iLevel;
			oMenuItem.items = new Array();
			for(curFldMenuItem in ArraySort(ArraySelect(aCurMenuDocumentsItem.documents,'This.parent_document_id==\'' + oMenuItem.id + '\''),'This.position', '+'))
			{
				if(oMenuItem.level != iLevelsToShowParam)
				{
					oRes = addMenuItem(curFldMenuItem, oMenuItem.level + 1);
					if(oRes != null)
					{
						oMenuItem.items.push(oRes);
					}
				}
			}
			return oMenuItem;
		}

		function markActive(arrMenuItemsParam, iDocIdParam)
		{
			var bActiveExists = false;
			for(oItem in arrMenuItemsParam)
			{
				if(oItem.document_id == iDocIdParam)
				{
					oItem.active_class = 'active';
					bActiveExists = true;
					break;
				}
				else
				{
					oItem.active_class = markActive(oItem.items, iDocIdParam);
					if(oItem.active_class != '')
						bActiveExists = true;
				}
			}
			return bActiveExists ? 'active' : '';
		}
		if(aCurMenuDocumentsItem != undefined)
		{
			var sCacheKey = 'menu_horizontal_' + curSiteID + '_' + curUserID + '_' + sMenuCodeParam + '_' + Session.sid;
			var arrMenuItems;
			var oCache = tools_web.get_user_data(sCacheKey);
			if(iCacheTimeParam != 0 && oCache != null && oCache.HasProperty('arrMenuItems'))
			{
				arrMenuItems = oCache.GetProperty('arrMenuItems');
			}
			else
			{
				arrMenuItems = new Array();
				aMenuDocs = ArraySort(ArraySelect(aCurMenuDocumentsItem.documents,'!This.parent_document_id.HasValue'), 'This.position', '+');
				for(fldMenuItem in aMenuDocs)
				{
					oRes = addMenuItem(fldMenuItem, 0);
					if(oRes != null)
					{
						arrMenuItems.push(oRes);
					}
				}
				if(iCacheTimeParam > 0)
				{
					tools_web.set_user_data(sCacheKey,  ({'arrMenuItems' : arrMenuItems}), iCacheTimeParam * 60);
				}
			}

			if(curDocID != null)
			{
				markActive(arrMenuItems, curDocID);
			}
		}
		else
		{
			return [];
		}
		return arrMenuItems;
	"/>


	<get_secid PROPERTY="1" PARAM="iSessionIdParam" EXPR="
			return Md5Hex( iSessionIdParam + '_' + ( DateToRawSeconds( CurDate ) / 86400 ) );
	"/>

	<check_secid PROPERTY="1" PARAM="sSumParam" PARAM="iSessionIdParam" EXPR="
			if ( sSumParam == undefined || sSumParam == null || sSumParam == '' )
				return false;
			return tools_web.get_secid( iSessionIdParam ) == sSumParam;
	"/>


	<clear_person_pict_cache PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="iPersonIDParam" EXPR="
			if ( ! LdsIsServer )
			{
				return CallServerMethod( 'tools_web', 'clear_person_pict_cache', [ RValue( iPersonIDParam ) ] );
			}

			var iCounter = 0;
			try
			{
				if ( IsDirectory( 'x-local://wt/web/avatars' ) )
				{
					try
					{
						arrFileNames = ReadDirectory( 'x-local://wt/web/avatars' );
						for ( sFileNameElem in arrFileNames )
						{
							if ( StrBegins( UrlFileName( sFileNameElem ), 'sa_' + iPersonIDParam ) )
							{
								try
								{
									DeleteFile( sFileNameElem );
									iCounter++;
								}
								catch ( err1 )
								{
									alert( err1 );
								}
							}
						}
					}
					catch ( err2 )
					{
						alert( err2 );
					}
				}
			}
			catch ( err3 )
			{
				alert( err3 );
			}
			try
			{
				if ( (tools.sys_db_capability &amp; tools.UNI_CAP_BASIC) != 0 )
				{
					oProvider = tools.spxml_unibridge.Object.provider;
					oUrls = oProvider.GetUrlsByPattern( 'x-local://wt/web/avatars/sa_' + iPersonIDParam );
					while( oUrls.GetNext() )
					{
						sUrl = oUrls.GetValue();
						try
						{
							oProvider.DeleteUrl( sUrl );
							iCounter++;
						}
						catch ( err4 )
						{
							alert( err4 );
						}
					}
				}
			}
			catch ( err3 )
			{
				alert( err3 );
			}
			return iCounter;
	"/>


	<get_item_objectives_value PROPERTY="1" PARAM="fldItemParam" EXPR="
			for ( sFieldIDElem in [ 'RAWSCORE', 'SCORE' ] )
			{
				fldObj = fldItemParam.objectives.GetOptChildByKey( sFieldIDElem );
				if ( fldObj != undefined )
					return OptReal( fldObj.value, null );
			}
			return null;
	"/>

	<obtain_item_objectives_value PROPERTY="1" PARAM="fldTarget" PARAM="rValueParam" PARAM="sActionParam" EXPR="
			try
			{
				if ( sActionParam != 'add' )
					throw 'no_data';
			}
			catch ( err )
			{
				sActionParam = 'set';
			}
			for ( sFieldIDElem in [ 'RAWSCORE', 'SCORE' ] )
			{
				fldObj = fldTarget.objectives.ObtainChildByKey( sFieldIDElem );
				rValue = OptReal( rValueParam, 0.0 );
				if ( sActionParam == 'add' )
					rValue += OptReal( fldObj.value, 0.0 );
				fldObj.value = rValue;
			}
	"/>

	<send_message ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="vApplication" PARAM="sMessagePARAM" PARAM="sDomainPARAM" PARAM="aUserPARAM" PARAM="oOptionsPARAM" EXPR="

			var sAppCode, iResult = -1;

			if (global_settings.disp_mobile.Value)
			{

				try
				{
					switch (tools.data_type(vApplication))
					{
						case 'string':
							sAppCode = vApplication;
							vApplication = null;
							break;
						case 'integer':
							vApplication = tools.open_doc(vApplication);
							if (vApplication == undefined || vApplication.TopElem.Name != 'mobile_app_config')
								throw 'not a mobile_app_config id';

							vApplication = vApplication.TopElem;
							sAppCode = vApplication.type.Value;
							break;
						case 'xmlobject':
							try
							{
								vApplication = vApplication.TopElem;
							}
							catch(_o_)
							{
							}

							vApplication.custom;

							if (vApplication.Name != 'mobile_app_config')
								throw 'not a mobile_app_config doc';

							sAppCode = vApplication.type.Value;

							break;
					}
				}
				catch(_x_)
				{
					alert('send_message error: Invalid Application parameter ' + _x_);
					return iResult;
				}
				try
				{
					sMessagePARAM = Trim(sMessagePARAM);
					if (sMessagePARAM == '')
						throw 'empty';
				}
				catch(_o_)
				{
					alert('send_message error: No message to send');
					return iResult;
				}
				try
				{
					oOptionsPARAM.HasProperty('a');
				}
				catch(_q_)
				{
					try
					{
						oOptionsPARAM = ParseJson(oOptionsPARAM);
						oOptionsPARAM.HasProperty('a');
					}
					catch(_p_)
					{
						oOptionsPARAM = null;
					}
				}
				try
				{
					if (sDomainPARAM != null)
					sDomainPARAM = Trim(sDomainPARAM);
				}
				catch(_x_)
				{
					sDomainPARAM = null;
				}

				try
				{
					if (!IsArray(aUserPARAM))
					{
						var a;
						try
						{
							a = ParseJson(aUserPARAM);
							if (!IsArray(a))
								throw '';
						}
						catch(_o_)
						{
							a = ([aUserPARAM]);
						}

						aUserPARAM = a;
					}
				}
				catch(_x_)
				{
					aUserPARAM = (['']);
				}

				if ( System.IsWebClient )
				{
					switch (tools.data_type(ArrayOptFirstElem(aUserPARAM)))
					{
						case 'string':
						case 'integer':
						case 'null':
						case 'undefined':
							break;
						case 'xmlobject':
							try
							{
								aUserPARAM = ArrayExtract(catElem, 'This.id.Value');
							}
							catch(_q_)
							{
								alert('send_message error: Invalid user catalogs');
								return iResult;
							}
							break;
						default:
							alert('send_message error: cannot process this data in WebAdmin verson. Please, use simple types.');
							return iResult;
					}

					return CallServerMethod( 'tools_web', 'send_message', [(vApplication == null ? sAppCode : vApplication.id.Value), RValue(sMessagePARAM), RValue(sDomainPARAM), EncodeJson(aUserPARAM), EncodeJson(oOptionsPARAM)] );
				}

				var aAppCodes = String(sAppCode).split(';');
				var faultyCode = ArrayOptFind(aAppCodes, 'a=([\'wtdocumentreader\',\'webtutormobilex\',\'webtutormobilem\']),a.indexOf(This) < 0');
				if (faultyCode == undefined)
				{
					var sDocsHighlight = '';
					var sTravel = null;
					if (oOptionsPARAM != null)
					{
						if(oOptionsPARAM.HasProperty('document_ids') &amp;&amp; IsArray(oOptionsPARAM.document_ids))
						{
							if (ArrayCount(oOptionsPARAM.document_ids) &gt; 100)
							{
								alert('send_message error: Too many documents selected');
								return iResult;
							}

							sDocsHighlight = ArrayMerge(ArraySelect(oOptionsPARAM.document_ids, 'OptInt(This) != undefined'), 'This', ';');
						}

						if (tools.data_type(oOptionsPARAM.GetOptProperty('travel')) == 'string')
						{
							sTravel = oOptionsPARAM.travel;
						}
					}

					if (vApplication == null || vApplication.messaging.engine == 0)
					{
						var catElem = ArrayOptFirstElem(aUserPARAM);
						switch (tools.data_type(catElem))
						{
							case 'null':
							case 'undefined':
							case 'string':
								break;

							case 'integer':
								aUserPARAM = XQuery('for $elem in collaborators where MatchSome($elem/id, (' +ArrayMerge(aUserPARAM, 'XQueryLiteral(This)', ',')+ ')) return $elem/Fields(\'id\', \'login\')');
								aUserPARAM = ArrayExtract(aUserPARAM, 'This.login.Value');
								break;
							case 'xmlobject':
								try
								{
									aUserPARAM = ArrayExtract(aUserPARAM, 'This.login.Value');
								}
								catch(_q_)
								{
									alert('send_message error: Invalid user catalogs or no login field');
									return -1;
								}
								break;
							default:
								alert('send_message error: Invalid user list');
								return -1;
								break;
						}
						var sApp, skkCode, oPushData, httpResponse, sAlert = '';

						//var i = aAppCodes.indexOf('webtutormobilem');
						//if (i >= 0 && aAppCodes.indexOf('webtutormobilex') >= 0) aAppCodes.splice(i, 1);//hanging M on the same hub as X

						for (sApp in aAppCodes)
						{
							switch(sApp)
							{
								case 'webtutormobilex': skkCode = 'WTX'; break;
								case 'webtutormobilem': skkCode = 'WTM'; break;
								default: skkCode = global_settings.skk_code.Value; break;
							}
							for (catElem in aUserPARAM)
							{
								oPushData = ({
								   'SKKCode': skkCode,
								   'Message': sMessagePARAM,
								   'Stamp':  global_settings.install_stamp.Value,
								   'Login': StrLowerCase(catElem),
								   'Domain': sDomainPARAM,
								   'MarkedDocIDs': sDocsHighlight,
								   'Travel': sTravel
								});


								httpResponse = HttpRequest(global_settings.settings.mobile.document_reader.cs_p.Value, 'post', EncodeJson(oPushData), 'Content-Type: application/json\nIgnore-Errors: 1\n' );

								sAlert += '(' + httpResponse.RespCode + ') ' + httpResponse.Body + '\n';

							}
							alert('Webtutor Mobile Azure push notification for ' +sApp+ ' sent with results: ' + sAlert);
							iResult = 1;
						}
					}
					else if (vApplication.messaging.engine == 1)
					{
						var aDevices = null;

						var catElem = ArrayOptFirstElem(aUserPARAM);
						switch (tools.data_type(catElem))
						{
							case 'xmlobject':
								try
								{
									aDevices = ArrayExtract(catElem, 'This.id.Value');
								}
								catch(_q_)
								{
									alert('send_message error: Invalid user catalogs');
									return -1;
								}

							case 'string':
								if (aDevices == null)
								{
									aDevices = ArrayExtract(XQuery('for $elem in collaborators where MatchSome($elem/login, (' +ArrayMerge(aUserPARAM, 'XQueryLiteral(This)', ',')+ ')) return $elem/Fields(\'id\'))'), 'This.id.Value');
								}


							case 'integer':
								if (aDevices == null)
									aDevices = aUserPARAM;

								if (!LdsIsServer)
								{
									return CallServerMethod( 'tools_web', 'send_message', [vApplication.id.Value, RValue(sMessagePARAM), RValue(sDomainPARAM), EncodeJson(aDevices), EncodeJson(oOptionsPARAM)] );
								}

								aDevices = tools.xquery('for $elem in device_regs where $elem/mobile_app_config_id = ' +XQueryLiteral(vApplication.id)+ ' and MatchSome($elem/person_id, (' +ArrayMerge(aDevices, 'XQueryLiteral(This)', ',')+ ')) return $elem/id,$elem/__data');
								aDevices = ArrayExtract(aDevices, 'OpenDoc(UrlFromDocID(This.id)).TopElem.pc.Value');

								break;

							default:
								alert('send_message error: Invalid user list');
								return -1;
						}




						var aParams = new Array();

						var _certPath, fldCertP12 = vApplication.messaging.config.ObtainChildByKey('apn_cert_p12_file');

						if (fldCertP12.data.HasValue && fldCertP12.value.HasValue)
						{
							_certPath = ObtainSessionTempFile('.p12');
							fldCertP12.data.SaveToFile( _certPath);
							_certPath = UrlToFilePath(_certPath);
						}
						else
							_certPath = null;

						if (sDocsHighlight != '')
							aParams.push('markids',sDocsHighlight);

						if (sTravel != '' && sTravel != null)
							aParams.push('travel',sTravel);

						var oAssembly = tools.dotnet_host.Object.GetAssembly( 'WebSoft.PushSender.dll' );
						var oLib = oAssembly.CreateClassObject( 'Websoft.Pusher' );

						oLib.Init(global_settings.install_stamp.Value, vApplication.messaging.config.ObtainChildByKey('fcm_server_key').value.Value, vApplication.messaging.config.ObtainChildByKey('fcm_sender_id').value.Value, _certPath, vApplication.messaging.config.ObtainChildByKey('apn_cert_password').value.Value);

						oLib.SmartSend(sMessagePARAM, aDevices, aParams);

						alert('Push messages sent with result: ' + oLib.Error);
					}
					else
						alert('send_message error: unknown messaging engine');
				}
				else
					alert('send_message error: unknown reciever ' + CodeLiteral(vApplication) + ' with app id ' + faultyCode);
			}
			else
				alert('send_message error: Mobile module not installed');

			return iResult;
	"/>


	<replace_condition_operators PROPERTY="1" PARAM="oConditionsParam" PARAM="iValueParam" EXPR="
			try
			{
				sFieldName = oConditionsParam.Name;
			}
			catch ( err )
			{
				sFieldName = '';
			}
			switch ( sFieldName )
			{
				case 'conditions':
					sEval = ArrayMerge( oConditionsParam, '\'' + iValueParam + '\'+grading_option_id+This.value', ' &amp;&amp; ' );
					break;

				case 'cond':
					sEval = ArrayMerge( oConditionsParam, '\'' + iValueParam + '\'+operator.ForeignElem.name+Trim(This)', ' &amp;&amp; ' );
					break;

				default:
					sEval = RValue( oConditionsParam );
					break;
			}

			sEval = StrReplace( sEval, ';', '' );
			sEval = StrReplace( StrReplace( sEval, '&lt;=', '&lt;$' ), '&gt;=', '&gt;$' );
			sEval = StrReplace( StrReplace( sEval, '=', '==' ), '&lt;&gt;', '!=' );
			sEval = StrReplace( StrReplace( sEval, '&lt;$', '&lt;=' ), '&gt;$', '&gt;=' );
			return sEval;
	"/>


	<get_header_obj PROPERTY="1" PARAM="sHeaderParam" EXPR="
			oRes = ({ 'Value': '' });
			arrHeader = sHeaderParam.split( ';' );
			oRes.Value = arrHeader[ 0 ];
			for ( i=1; i &lt; ArrayCount( arrHeader ); i++ )
			{
				arrSubHeader = arrHeader[ i ].split( '=' );
				if ( ArrayCount( arrSubHeader ) == 2 )
					oRes.SetProperty( Trim( arrSubHeader[ 0 ] ), arrSubHeader[ 1 ] );
			}
			return oRes;
	"/>
	<get_multipart_array PROPERTY="1" PARAM="Request" EXPR="
			arrRes = [];
			oContentType = tools_web.get_header_obj( Request.Header.GetOptProperty( 'Content-Type', '' ) );
			sContentType = oContentType.Value;
			sBoundary = oContentType.GetOptProperty( 'boundary', '' )
			if ( sBoundary != '' && ( sContentType == 'multipart/related' || sContentType == 'multipart/mixed' ) )
			{
				arrBody = ArrayExtract( Request.Body.split( '--' + sBoundary ), 'Trim(This)' );
				for ( sBodyElem in arrBody )
				{
					if ( sBodyElem == '' || sBodyElem == '--' )
						continue;

					iContentIndex = sBodyElem.indexOf( '\r\n\r\n' );
					oHeader = ({});
					if ( iContentIndex &gt; 0 )
					{
						sHeaderPart = StrLeftRange( sBodyElem, iContentIndex );
						sContentPart = StrRightRangePos( sBodyElem, iContentIndex + 4 );
						for ( sHeaderElem in sHeaderPart.split( '\r\n' ) )
						{
							arrHeader = sHeaderElem.split( ':' );
							if ( ArrayCount( arrHeader ) == 2 )
								oHeader.SetProperty( arrHeader[ 0 ], Trim( arrHeader[ 1 ] ) );
						}
					}
					else
					{
						sContentPart = sBodyElem;
					}
					arrRes.push( { 'Body': sContentPart, 'Header': oHeader, 'ContentType': oHeader.GetOptProperty( 'Content-Type', '' ) } );
				}
			}
			else
			{
				arrRes.push( { 'Body': Request.Body, 'Header': Request.Header, 'ContentType': sContentType } );
			}
			return arrRes;
	"/>

	<get_game_rating PROPERTY="1" PARAM="curUser" PARAM="bCheckLevel" PARAM="sCurrencyTypeID" PARAM="bAllLevel" PARAM="bDispSub" PARAM="iSubDepth" PARAM="iGrpColl" PARAM="oPaging" PARAM="curUserID" PARAM="bRange" PARAM="iAmntCollsRating" PARAM="sGap" PARAM="bSamePlace" PARAM="bShowTopRating" PARAM="iOrgID" EXPR="
		/*
			curUser             - пользователь относительно которого строится рейтинг
			bCheckLevel         - строит рейтинг с учетом последовательности уровней
			bAllLevel           - строится рейтинг по сотрудникам с любым уровнем, иначе только по сотрудникам с тем же уровнем что и указанный сотрудник
			sCurrencyTypeID     - валюта по которой строится рейтинг ( обязательный если bCheckLevel=false, иначе не учитывается )
			bDispSub            - рейтинг только по сотрудникам подразделения указанного пользователя ( необязательный )
			iSubDepth           - количество подразделений вверх по иерархии ( для bDispSub=true )
			iGrpColl            - группа сотрудников, если указана, рейтинг формируется по сотрудникам указанной группы
			oPaging             - объект пэйджинга для ограничения итераций цикла по массиву биллинговых счетов. Применимо в случае заданной валюты и bCheckLevel = false
			curUserID           - ID пользователя, относительно которого строится рейтинг
			bRange              - получить список сотрудников в рейтинге, ограниченный параметром iAmntCollsRating
			iAmntCollsRating    - количество людей в рейтинге до и после текущего пользователя, которое будет отображаться. Если 0 или не задано - в рейтинге будет отображться только текущий пользователь
			sGap                - символы для отступов сверху/снизу от сотрудников рейтинга. Задается при выставленном bRangeRating
			bSamePlace          - присваивать пользователям одинаковое место в рейтинге при одинаковом количестве баллов?
			bShowTopRating		- показывать первые три места рейтинга на каждой странице? (применимо для bRange = false)
			iOrgID				- организация, по которой будет производиться выборка сотрудников
		*/

		oRes = new Object();
		oRes.error = 0;
		oRes.total = 0;

		function getError( message_error, code_error )
		{
			try
			{
				if ( code_error == undefined || code_error == null )
					throw '';
			}
			catch(e)
			{
				code_error = 1;
			}
			oRes.error = code_error;
			oRes.message = message_error;
			return oRes;
		}

		function set_person_level()
		{
			if ( ! tePerson.level_id.HasValue )
				return getError( 'Level ID does not exists.' );

			dLevel = tools.open_doc( tePerson.level_id.Value )
			if ( dLevel != undefined )
			{
				teLevel = dLevel.TopElem;
				if ( ! teLevel.currency_type_id.HasValue )
					return getError( 'Currency Type ID does not exists.' );
			}
			else
				return getError( 'Level ID does not exists.' );

			return true;
		}

		function get_list_level( next )
		{
			try { next }
			catch(e) { next = true }

			arr = new Array();
			xarrLevels = XQuery( 'for $elem in levels return $elem' );
			fLevel = undefined;

			if ( teLevel != null )
				fLevel = ArrayOptFind( xarrLevels, 'This.id == ' + teLevel.id.Value );
			if ( fLevel == undefined || ( !fLevel.prev_level_id.HasValue &amp;&amp; ArrayOptFind( xarrLevels, 'This.prev_level_id == ' + fLevel.id ) == undefined ) )
			{
				for ( elem in xarrLevels )
				{
					cnt = ( OptInt( elem.code ) != undefined ) ? OptInt( elem.code ) : 1;
					arr.push( { level_id: elem.id.Value, level_name: elem.name.Value, cnt: cnt } );
				}
			}
			else
			{
				if ( next )
				{
					while ( fLevel != undefined )
						if ( ArrayOptFind( xarrLevels, 'This.prev_level_id == ' + fLevel.id ) == undefined )
							break;
						else
							fLevel = ArrayOptFind( xarrLevels, 'This.prev_level_id == ' + fLevel.id )
				}
				nLevel = ArrayOptFind( xarrLevels, 'This.id == fLevel.prev_level_id' );
				cnt = ArrayCount( xarrLevels );
				arr.push( { level_id: fLevel.id.Value, level_name: fLevel.name.Value, cnt: cnt } );
				while ( nLevel != undefined )
				{
					cnt--;
					arr.push( { level_id: nLevel.id.Value, level_name: nLevel.name.Value, cnt: cnt } );
					if ( nLevel.prev_level_id.HasValue )
						nLevel = ArrayOptFind( xarrLevels, 'This.id == ' + nLevel.prev_level_id );
					else
						break;
				}
				cnt = ArrayCount( arr );
				for ( lev in arr )
				{
					lev.cnt = cnt;
					cnt--;
				}
			}
			return arr;
		}

		teLevel = null;
		tePerson = curUser;

		try { sCurrencyTypeID }
		catch(e) { sCurrencyTypeID = '' }
		sCurrencyTypeID = sCurrencyTypeID;

		try { bCheckLevel = tools_web.is_true( bCheckLevel ) }
		catch(e) { bCheckLevel = false }

		oResPersonLevel = set_person_level();
		if ( bCheckLevel &amp;&amp; DataType(oResPersonLevel) == 'object' &amp;&amp; oResPersonLevel.GetOptProperty('error') != undefined )
		{
			return oResPersonLevel;
		}
		else if ( !bCheckLevel &amp;&amp; sCurrencyTypeID == '' )
		{
			return getError( 'sCurrencyTypeID is empty', 2 );
		}

		arrLevels = new Array();
		aCurrencyTypeIDs = new Array();

		try { bAllLevel = tools_web.is_true( bAllLevel ) }
		catch(e) { bAllLevel = false }

		if ( sCurrencyTypeID == '' &amp;&amp; !bCheckLevel )
		{
			return getError( 'Необходимо задать валюту, либо параметр \'Строить рейтинг с учетом последовательности уровней\'', 2 );
		}

		if ( bCheckLevel )
			aCurrencyTypeIDs = ArrayExtract( teLevel.currency_types, 'This.currency_type_id' );
		else
			aCurrencyTypeIDs.push( sCurrencyTypeID );

		aCurrencyTypeIDs = ArrayIntersect( lists.currency_types, aCurrencyTypeIDs, 'This.id', 'This' );

		oRes.currency_types = aCurrencyTypeIDs;
		oRes.array = new Array();

		xarrPersons = null;

		try
		{
			iOrgID = Int( iOrgID );
		}
		catch( ex )
		{
			iOrgID = null;
		}

		try { iGrpColl = OptInt( iGrpColl ) }
		catch(e) { iGrpColl = undefined }

		sCndtnColl = '';
		if ( iGrpColl != undefined )
		{
			xarrGrpColl = XQuery( 'for $elem in group_collaborators where $elem/group_id = ' + iGrpColl + ' return $elem' );
			if ( ArrayOptFirstElem( xarrGrpColl ) != undefined )
				sCndtnColl = ' and MatchSome($elem/id, (' + ArrayMerge( xarrGrpColl, 'This.collaborator_id', ',' ) + ')) ';
		}

		try { bDispSub = tools_web.is_true( bDispSub ) }
		catch(e) { bDispSub = false }

		if ( bDispSub &amp;&amp; tePerson.position_parent_id.HasValue )
		{
			iLastDepID = null;
			catNewDep = tePerson.position_parent_id.OptForeignElem;

			try { iDepth = OptInt( iSubDepth, 1 ) }
			catch(e) { iDepth = 1 }

			iCounter = 0;
			iLastDepID = catNewDep != undefined ? catNewDep.id.Value : null;
			while ( iCounter < iDepth &amp;&amp; catNewDep != undefined )
			{
				iLastDepID = catNewDep.id.Value;
				catNewDep = catNewDep.parent_object_id.OptForeignElem;
				iCounter++;
			}

			if ( iLastDepID == null )
			{
				return oRes;
			}

			if ( catNewDep != undefined )
				iLastDepID = catNewDep.id.Value;

			xarrSubdivisions = tools.xquery( 'for $elem in subdivisions where IsHierChild( $elem/id, ' + iLastDepID + ' ) order by $elem/Hier() return $elem/id' );
			if ( ArrayOptFirstElem( xarrSubdivisions ) == undefined )
				sDepCondition = '$elem/position_parent_id = ' + tePerson.position_parent_id.Value;
			else
				sDepCondition = 'MatchSome( $elem/position_parent_id, (' + iLastDepID + ',' + ArrayMerge( xarrSubdivisions, 'id', ',' ) + ') )';

			xarrPersons = XQuery( 'for $elem in collaborators where ' + ( iOrgID != null ? ( '$elem/org_id = ' + iOrgID + ' and ' ) : '' ) + ' $elem/is_dismiss = false() ' + ( tePerson.level_id.HasValue &amp;&amp; !bAllLevel ? ' and $elem/level_id = ' + tePerson.level_id : '' ) + ' and ' + sDepCondition + sCndtnColl + ' return $elem' );

			xarrAccounts = XQuery( 'for $elem in accounts where MatchSome( $elem/object_id, (' + ArrayMerge( xarrPersons, 'id', ',' ) + ') ) and MatchSome( $elem/currency_type_id, ( ' + ArrayMerge( aCurrencyTypeIDs, 'XQueryLiteral( String( This.id ) )', ',' ) + ' ) ) order by $elem/balance descending return $elem' );
		}
		else
		{
			sCndtnPers = StrReplace( sCndtnColl, '$elem', '$person' );

			//xarrAccounts = XQuery( 'for $elem in accounts where some $person in collaborators satisfies ( $person/id = $elem/object_id ' + ( tePerson.level_id.HasValue &amp;&amp; !bAllLevel ? ' and $person/level_id = ' + tePerson.level_id : '' ) + ' and $person/is_dismiss = false()' + sCndtnPers + ' ) and MatchSome( $elem/currency_type_id, ( ' + ArrayMerge( aCurrencyTypeIDs, 'XQueryLiteral( String( This.id ) )', ',' ) + ' ) ) order by $elem/balance descending return $elem' );

			xarrAccounts = XQuery( 'for $elem in accounts where some $person in collaborators satisfies ( $person/id = $elem/object_id ' + ' and $person/is_dismiss = false()' + sCndtnPers + ' ) and MatchSome( $elem/currency_type_id, ( ' + ArrayMerge( aCurrencyTypeIDs, 'XQueryLiteral( String( This.id ) )', ',' ) + ' ) ) order by $elem/balance descending return $elem' );
		}

		if ( bCheckLevel )
			arrLevels = get_list_level( true );
		else
			arrLevels = ArraySelectAll( XQuery( 'for $elem in levels return $elem' ) );

		if ( xarrPersons == null )
		{
			//xarrPersons = QueryCatalogByKeys( 'collaborators', 'id', ArrayExtractKeys( xarrAccounts, 'object_id' ) );
			xarrPersons = XQuery( 'for $elem in collaborators where ' + ( iOrgID != null ? ( '$elem/org_id = ' + iOrgID + ' and ' ) : '' ) + ' MatchSome( $elem/id, ( ' + ArrayMerge( ArrayExtractKeys( xarrAccounts, 'object_id' ), 'This', ',' ) + ' ) ) return $elem' );
		}

		try
		{
			curUserID = OptInt( curUserID );
			if ( curUserID == undefined )
				throw '';
		}
		catch(e)
		{
			try
			{
				curUserID = OptInt( curUser.Doc.DocID );
				if ( curUserID == undefined )
					throw '';
			}
			catch(e)
			{
				curUserID = OptInt( curUser.DocID );
			}
		}

		curUserAccount = ( curUserID != undefined ) ? ArrayOptFindByKey( xarrAccounts, curUserID, 'object_id' ) : undefined;
		if ( curUserAccount == undefined )
		{
			return getError( 'Вы не участвуете в данном рейтинге' );
		}

		try { bRange = tools_web.is_true( bRange ) }
		catch(e) { bRange = false }

		try { iAmntCollsRating = OptInt( iAmntCollsRating, 0 ) }
		catch (e) { iAmntCollsRating = 0 }

		try { sGap = sGap }
		catch(e) { sGap = '...' }

		try { bSamePlace = tools_web.is_true( bSamePlace ) }
		catch(e) { bSamePlace = false }

		xarrPersons = ArrayDirect( xarrPersons );
		tmpPersons = new Array();

		try { oPaging = oPaging }
		catch(e) { oPaging = undefined }

		try { bShowTopRating = tools_web.is_true( bShowTopRating ) }
		catch(e) { bShowTopRating = false }

		oRes.total = ArrayCount( xarrAccounts );
		iOrderNum = 0;
		aSortAccounts = ArrayDirect( ArraySort( xarrAccounts, 'This.balance', '-', 'This.modification_date', '+' ) );
		iRatingLength = ArrayCount( aSortAccounts );

		function getPersonRating( account, order_num, top_rating )
		{
			catPerson = ArrayOptFindByKey( xarrPersons, account.object_id, 'id' );
			fldPersonChild = ArrayOptFind( tmpPersons, 'This.person_id == catPerson.id' );
			if ( fldPersonChild == undefined )
			{
				oPersonRating = new Object();
				oPersonRating.modification_date = account.modification_date.Value;
				oPersonRating.id = account.id.Value;
				oPersonRating.person_id = catPerson.id.Value;
				oPersonRating.fullname = catPerson.fullname.Value;

				if ( bCheckLevel )
				{
					tLevel = ArrayOptFind( arrLevels, 'This.level_id == catPerson.level_id' );
					if ( tLevel != undefined )
					{
						oPersonRating.level_name = tLevel.level_name;
						oPersonRating.level_num = tLevel.cnt;
					}
					else
					{
						oPersonRating.level_name = 'отсутствует';
						oPersonRating.level_num = 0;
					}
				}
				else
				{
					tLevel = ArrayOptFind( arrLevels, 'This.id == catPerson.level_id' );
					if ( tLevel != undefined )
					{
						oPersonRating.level_name = tLevel.name.Value;
					}
					oPersonRating.level_name = 'отсутствует';
				}

				oPersonRating.currency_types_array = new Array();
				for ( currency_type in aCurrencyTypeIDs )
					oPersonRating.currency_types_array.push( { id: currency_type.id.Value, person_score: 0 } );

				oPersonRating.person_score = 0;
				oPersonRating.icon_url = 'person_icon.html?id=' + catPerson.PrimaryKey + '&type=100x100' + '&rnd=' + Random( 0, 9999999 );
			}
			else
			{
				oPersonRating = fldPersonChild;
			}

			fldCurrencyType = ArrayOptFind( oPersonRating.currency_types_array, 'This.id == account.currency_type_id' );
			if ( fldCurrencyType == undefined ) {
				return;
			}

			fldCurrencyType.person_score = account.balance.Value;
			oPersonRating.person_score += account.balance.Value;
			oPersonRating.num = order_num;

			if ( fldPersonChild == undefined &amp;&amp; !top_rating )
				tmpPersons.push( oPersonRating );
			else if ( top_rating )
				return oPersonRating;
		}

		function ArrayOptFindIndex( arr, key )
		{
			if ( arr != undefined &amp;&amp; ( sId = OptInt( key ) ) != undefined )
			{
				for ( j = 0; j < ArrayCount( arr ); j++ )
				{
					if ( OptInt( arr[j].id, null ) == sId )
						return j;
				}
			}
			return undefined;
		}

		function formOrderRating ( start, end, top )
		{
			for ( a = 0; a < iRatingLength; a++ )
			{
				if ( a > 0 )
				{
					iPrevScore = OptInt( aSortAccounts[a - 1].balance, 0 );
					if ( OptInt( aSortAccounts[a].balance ) == iPrevScore &amp;&amp; bSamePlace )
						iOrderNum;
					else
						iOrderNum++;

					if ( a >= start &amp;&amp; a < end || start > 0 &amp;&amp; a > start &amp;&amp; a < end + 1 || start == end &amp;&amp; a == start )
					{
						getPersonRating( aSortAccounts[a], iOrderNum, false );
					}

					if ( a > end + 1 )
						break;
				}
				else if ( a == start )
				{
					iOrderNum++;
					getPersonRating( aSortAccounts[a], iOrderNum, false );
				}
				else
				{
					iOrderNum++;
				}
			}

			if ( top &amp;&amp; start > 2 )
			{
				aTopRating = [];
				iTopOrder = 0;
				for ( q = 0; q < 3; q++ )
				{
					if ( q == 0 )
					{
						iTopOrder++;
						aTopRating.push( getPersonRating( aSortAccounts[q], iTopOrder, top ) );
					}
					else
					{
						iPrevScore = OptInt( aSortAccounts[q - 1].balance, 0 );
						if ( OptInt( aSortAccounts[q].balance ) == iPrevScore &amp;&amp; bSamePlace )
							iTopOrder;
						else
							iTopOrder++;

						aTopRating.push( getPersonRating( aSortAccounts[q], iTopOrder, top ) );
					}
				}
				if ( start != 0 )
					tmpPersons = ArrayUnion( aTopRating, tmpPersons );
			}
		}

		function checkLevel()
		{
			aResult = [];
			tmpPersons = ArraySort( tmpPersons, 'This.level_num', '-', 'This.person_score', '-', 'This.modification_date', '+' );
			for ( i = 0; i < ArrayCount( tmpPersons ); i++ )
			{
				oOrderTmp = tmpPersons[i];
				oOrderTmp.num = i + 1;
				aResult.push( oOrderTmp );
			}
			return aResult;
		}

		// alert( 'curUser: ' + curUser );
		// alert( 'bCheckLevel: ' + bCheckLevel );
		// alert( 'bAllLevel: ' + bAllLevel );
		// alert( 'sCurrencyTypeID: ' + sCurrencyTypeID );
		// alert( 'bDispSub: ' + bDispSub );
		// alert( 'iSubDepth: ' + iSubDepth );
		// alert( 'iGrpColl: ' + iGrpColl );
		// alert( 'oPaging: ' + tools.object_to_text( oPaging, 'json' ) );
		// alert( 'curUserID: ' + curUserID );
		// alert( 'bRange: ' + bRange );
		// alert( 'iAmntCollsRating: ' + iAmntCollsRating );
		// alert( 'sGap: ' + sGap );
		// alert( 'bSamePlace: ' + bSamePlace );
		// alert( 'bShowTopRating: ' + bShowTopRating );

		if ( !bRange )
		{
			iStart = 0;
			iEnd = 0;
			iPrevScore = undefined;
			cutUserSortAccounts = ArrayOptFindByKey( aSortAccounts, curUserID, 'object_id' );
			iCurAccountIndex = ArrayOptFindIndex( aSortAccounts, cutUserSortAccounts.id );

			if ( iAmntCollsRating == 0 )
			{
				iStart = iEnd = iCurAccountIndex;
			}
			else
			{
				iStart = iCurAccountIndex - iAmntCollsRating > 0 ? iCurAccountIndex - iAmntCollsRating : 0;
				iEnd = iCurAccountIndex + iAmntCollsRating > iRatingLength ? iRatingLength : iCurAccountIndex + iAmntCollsRating;
			}

			formOrderRating( iStart, iEnd, false );
			if ( bCheckLevel &amp;&amp; !bSamePlace )
				oRes.array = checkLevel();
			else
				oRes.array = tmpPersons;
		}
		else
		{
			try
			{
				iIndex = OptInt( oPaging.index );
				iSize = OptInt( oPaging.size );
			}
			catch(e)
			{
				iIndex = 0;
				iSize = iRatingLength;
			}

			if ( iIndex != undefined &amp;&amp; iSize != undefined )
			{
				iStart = iIndex * iSize;
				iEnd = ( iStart == 0 ) ? iStart + iSize : iStart + iSize - 1;

				formOrderRating( iStart, iEnd, bShowTopRating );
				if ( bCheckLevel )
					oRes.array = checkLevel();
				else
					oRes.array = tmpPersons;
			}
		}

		return oRes;
	"/>

	<get_game_rating_all PROPERTY="1" PARAM="bAllLevel" PARAM="bCheckLevel" PARAM="iLevelID" PARAM="bDispSub" PARAM="iSubdivID" PARAM="iSubdivNum" PARAM="sCurrencyTypeID" PARAM="iGrpColl" PARAM="oPaging" PARAM="bRange" PARAM="iAmntCollsRating" PARAM="bSamePlace" PARAM="bShowTopRating" PARAM="iOrgID" EXPR="
		/*
			bAllLevel           - строить рейтинг по сотрудникам с любым уровнем, иначе только по сотрудникам с заданным уровнем iLevelID, если bCheckLevel = true
			bCheckLevel         - строить рейтинг с учетом последовательности уровней, будет учитываться валюта заданного уровня iLevelID
			iLevelID            - уровень, который будет учитываться при расчете рейтинга
			bDispSub            - строить рейтинг только по сотрудникам подразделения (необязательный)
			iSubdivID           - подразделение, по сотрудникам которого будет строиться рейтинг (необязательный)
			iSubdivNum          - количество подразделений вверх по иерархии (для bDispSub = true)
			sCurrencyTypeID     - валюта по которой строится рейтинг (обязательный если bCheckLevel = false)
			iGrpColl            - группа сотрудников, если указана, рейтинг формируется по сотрудникам указанной группы
			oPaging             - объект пэйджинга для ограничения итераций цикла по массиву биллинговых счетов (применимо если bCheckLevel = false)
			bRange              - получить список сотрудников в рейтинге, ограниченный параметром iAmntCollsRating
			iAmntCollsRating    - количество сотрудников, выводимое в рейтинге от первого
			bSamePlace          - присваивать пользователям одинаковое место в рейтинге при одинаковом количестве баллов?
			bShowTopRating		- показывать первые три места рейтинга на каждой странице? (применимо для bRange = false)
			iOrgID				- организация, по которой будет производиться выборка сотрудников
		*/

		oRes = new Object();
		oRes.error = 0;
		oRes.total = 0;

		function getError( message_error, code_error )
		{
			try
			{
				if ( code_error == undefined || code_error == null )
				{
					throw '';
				}
			}
			catch( e )
			{
				code_error = 1;
			}

			oRes.error = code_error;
			oRes.message = message_error;

			return oRes;
		}

		function checkLevelCurrency()
		{
			if ( teLevel != null &amp;&amp; ! teLevel.currency_type_id.HasValue )
			{
				return getError( 'Given level does not currency_type_id', 2 );
			}
			return true;
		}

		function get_list_level( next )
		{
			try
			{
				next;
			}
			catch( e )
			{
				next = true;
			}

			arr = new Array();
			fLevel = undefined;
			xarrLevels = XQuery( 'for $elem in levels return $elem' );

			if ( teLevel != null )
			{
				fLevel = ArrayOptFind( xarrLevels, 'This.id == ' + teLevel.id.Value );
			}

			if ( fLevel == undefined || ( ! fLevel.prev_level_id.HasValue &amp;&amp; ArrayOptFind( xarrLevels, 'This.prev_level_id == ' + fLevel.id) == undefined ) )
			{
				for ( elem in xarrLevels )
				{
					cnt = ( OptInt( elem.code ) != undefined ) ? OptInt( elem.code ) : 1;
					arr.push( { level_id: elem.id.Value, level_name: elem.name.Value, cnt: cnt } );
				}
			}
			else
			{
				if ( next )
				{
					while ( fLevel != undefined )
					{
						if ( ArrayOptFind( xarrLevels, 'This.prev_level_id == ' + fLevel.id ) == undefined )
						{
							break;
						}
						else
						{
							fLevel = ArrayOptFind( xarrLevels, 'This.prev_level_id == ' + fLevel.id );
						}
					}
				}

				cnt = ArrayCount( xarrLevels );
				nLevel = ArrayOptFind( xarrLevels, 'This.id == fLevel.prev_level_id' );

				arr.push( { level_id: fLevel.id.Value, level_name: fLevel.name.Value, cnt: cnt } );

				while ( nLevel != undefined )
				{
					cnt--;
					arr.push( { level_id: nLevel.id.Value, level_name: nLevel.name.Value, cnt: cnt } );

					if ( nLevel.prev_level_id.HasValue )
					{
						nLevel = ArrayOptFind( xarrLevels, 'This.id == ' + nLevel.prev_level_id );
					}
					else
					{
						break;
					}
				}

				cnt = ArrayCount( arr );

				for ( lev in arr )
				{
					lev.cnt = cnt;
					cnt--;
				}
			}

			return arr;
		}

		iLevelID = OptInt( iLevelID );
		iSubdivID = OptInt( iSubdivID );

		teLevel = null;
		if ( iLevelID != undefined )
		{
			dLevel = tools.open_doc( iLevelID );
			if ( dLevel != undefined )
			{
				teLevel = dLevel.TopElem;
			}
		}

		try
		{
			if ( sCurrencyTypeID == null || sCurrencyTypeID == undefined || sCurrencyTypeID == '' )
			{
				throw '';
			}
		}
		catch( e )
		{
			sCurrencyTypeID = '';
		}

		if ( ! checkLevelCurrency() &amp;&amp; sCurrencyTypeID == '' )
		{
			return getError( 'sCurrencyTypeID is empty', 2 );
		}

		arrLevels = new Array();
		aCurrencyTypeIDs = new Array();

		try
		{
			bCheckLevel = tools_web.is_true( bCheckLevel );
		}
		catch( e )
		{
			bCheckLevel = false;
		}

		try
		{
			bAllLevel = tools_web.is_true( bAllLevel );
		}
		catch( e )
		{
			bAllLevel = false;
		}

		if ( sCurrencyTypeID == '' &amp;&amp; ! bCheckLevel )
		{
			return getError( 'Необходимо задать валюту, либо параметр \'Строить рейтинг с учетом последовательности уровней\' ', 2 );
		}

		if ( bCheckLevel &amp;&amp; iLevelID == undefined )
		{
			return getError( 'Необходимо задать уровень сотрудников', 2 );
		}

		try
		{
			iGrpColl = OptInt(iGrpColl);
		}
		catch( e )
		{
			iGrpColl = undefined;
		}

		sCndtnColl = '';

		if ( iGrpColl != undefined )
		{
			xarrGrpColl = XQuery( 'for $elem in group_collaborators where $elem/group_id = ' + iGrpColl + ' return $elem' );

			if ( ArrayOptFirstElem( xarrGrpColl ) != undefined )
			{
				sCndtnColl = ' and MatchSome( $elem/id, ( ' + ArrayMerge( xarrGrpColl, 'This.collaborator_id', ',' ) + ' ) ) ';
			}
		}

		try
		{
			bDispSub = tools_web.is_true( bDispSub );
		}
		catch( e )
		{
			bDispSub = false;
		}

		if ( bCheckLevel )
		{
			aCurrencyTypeIDs = ArrayExtract( teLevel.currency_types, 'This.currency_type_id' );
		}
		else
		{
			aCurrencyTypeIDs.push(sCurrencyTypeID);
		}

		aCurrencyTypeIDs = ArrayIntersect( lists.currency_types, aCurrencyTypeIDs, 'This.id', 'This' );

		try
		{
			bRange = tools_web.is_true( bRange );
		}
		catch( e )
		{
			bRange = false;
		}

		try
		{
			iAmntCollsRating = OptInt( iAmntCollsRating, 100 );
		}
		catch( e )
		{
			iAmntCollsRating = 100;
		}

		try
		{
			bSamePlace = tools_web.is_true( bSamePlace );
		}
		catch( e )
		{
			bSamePlace = false;
		}

		try
		{
			oPaging = oPaging;
		}
		catch( e )
		{
			oPaging = undefined;
		}

		try
		{
			bShowTopRating = tools_web.is_true( bShowTopRating );
		}
		catch( e )
		{
			bShowTopRating = false;
		}

		try
		{
			iOrgID = Int( iOrgID );
		}
		catch( ex )
		{
			iOrgID = null;
		}

		xarrPersons = null;

		oRes.array = new Array();
		oRes.currency_types = aCurrencyTypeIDs;

		if ( bDispSub &amp;&amp; iSubdivID != undefined )
		{
			iLastDepID = null;

			catNewDep = ArrayOptFirstElem( XQuery( 'for $elem in subdivisions where $elem/id = ' + iSubdivID + ' return $elem' ) );

			try
			{
				iDepth = OptInt( iSubdivNum, 1 );
			}
			catch( e )
			{
				iDepth = 1;
			}

			iCounter = 0;
			iLastDepID = catNewDep != undefined ? catNewDep.id.Value : null;

			while ( iCounter < iDepth &amp;&amp; catNewDep != undefined )
			{
				iLastDepID = catNewDep.id.Value;
				catNewDep = catNewDep.parent_object_id.OptForeignElem;
				iCounter++;
			}

			if ( iLastDepID == null )
			{
				return oRes;
			}

			if ( catNewDep != undefined )
				iLastDepID = catNewDep.id.Value;

			xarrSubdivisions = tools.xquery( 'for $elem in subdivisions where IsHierChild( $elem/id, ' + iLastDepID + ' ) order by $elem/Hier() return $elem/id' );

			if ( ArrayOptFirstElem( xarrSubdivisions ) == undefined )
			{
				sDepCondition = '$elem/position_parent_id = ' + iSubdivID;
			}
			else
			{
				sDepCondition = 'MatchSome( $elem/position_parent_id, ( ' + iLastDepID + ',' + ArrayMerge( xarrSubdivisions, 'id', ',' ) + ' ) )';
			}

			xarrPersons = XQuery( 'for $elem in collaborators where ' + ( iOrgID != null ? ( '$elem/org_id = ' + iOrgID + ' and ' ) : '' ) + ' $elem/is_dismiss = false() ' + ( ! bAllLevel &amp;&amp; iLevelID != undefined ? ' and $elem/level_id = ' + iLevelID : '' ) + ' and ' + sDepCondition + sCndtnColl + ' return $elem' );

			xarrAccounts = XQuery( 'for $elem in accounts where MatchSome( $elem/object_id, ( ' + ArrayMerge( xarrPersons, 'id', ',' ) + ' ) ) and MatchSome( $elem/currency_type_id, ( ' + ArrayMerge( aCurrencyTypeIDs, 'XQueryLiteral( String( This.id ) )', ',' ) + ' ) ) order by $elem/balance descending return $elem' );
		}
		else
		{
			sCndtnPers = StrReplace( sCndtnColl, '$elem', '$person' );

			xarrAccounts = XQuery( 'for $elem in accounts where some $person in collaborators satisfies ( $person/id = $elem/object_id ' + ( ! bAllLevel &amp;&amp; iLevelID != undefined ? ' and $person/level_id = ' + iLevelID : '') + ' and $person/is_dismiss = false()' + sCndtnPers + ') and MatchSome( $elem/currency_type_id, ( ' + ArrayMerge( aCurrencyTypeIDs, 'XQueryLiteral( String( This.id ) )', ',' ) + ' ) ) order by $elem/balance descending return $elem' );
		}

		if ( bCheckLevel )
		{
			arrLevels = get_list_level( true );
		}
		else
		{
			arrLevels = ArraySelectAll( XQuery( 'for $elem in levels return $elem' ) );
		}

		if ( xarrPersons == null )
		{
			//xarrPersons = QueryCatalogByKeys( 'collaborators', 'id', ArrayExtractKeys(xarrAccounts, 'object_id' ) );
			xarrPersons = XQuery( 'for $elem in collaborators where ' + ( iOrgID != null ? ( '$elem/org_id = ' + iOrgID + ' and ' ) : '' ) + ' MatchSome( $elem/id, ( ' + ArrayMerge( ArrayExtractKeys( xarrAccounts, 'object_id' ), 'This', ',' ) + ' ) ) return $elem' );
		}

		xarrPersons = ArrayDirect( xarrPersons );
		tmpPersons = new Array();

		oRes.total = ArrayCount( xarrAccounts );
		iOrderNum = 0;
		aSortAccounts = ArrayDirect( ArraySort( xarrAccounts, 'This.balance', '-', 'This.modification_date', '+' ) );
		iRatingLength = ArrayCount( aSortAccounts );

		function getPersonRating( account, order_num, top_rating )
		{
			catPerson = ArrayOptFindByKey( xarrPersons, account.object_id, 'id' );
			fldPersonChild = ArrayOptFind( tmpPersons, 'This.person_id == catPerson.id' );

			if ( fldPersonChild == undefined )
			{
				oPersonRating = new Object();
				oPersonRating.modification_date = account.modification_date.Value;
				oPersonRating.id = account.id.Value;
				oPersonRating.person_id = catPerson.id.Value;
				oPersonRating.fullname = catPerson.fullname.Value;

				if ( bCheckLevel )
				{
					tLevel = ArrayOptFind( arrLevels, 'This.level_id == catPerson.level_id' );

					if ( tLevel != undefined )
					{
						oPersonRating.level_name = tLevel.level_name;
						oPersonRating.level_num = tLevel.cnt;
					}
					else
					{
						oPersonRating.level_name = 'отсутствует';
						oPersonRating.level_num = 0;
					}
				}
				else
				{
					tLevel = ArrayOptFind( arrLevels, 'This.id == catPerson.level_id' );

					if ( tLevel != undefined )
					{
						oPersonRating.level_name = tLevel.name.Value;
					}

					oPersonRating.level_name = 'отсутствует';
				}

				oPersonRating.currency_types_array = new Array();

				for ( currency_type in aCurrencyTypeIDs )
				{
					oPersonRating.currency_types_array.push( { id: currency_type.id.Value, person_score: 0 } );
				}

				oPersonRating.person_score = 0;
				oPersonRating.icon_url = 'person_icon.html?id=' + catPerson.PrimaryKey + '&type=100x100' + '&rnd=' + Random( 0, 9999999 );
			}
			else
			{
				oPersonRating = fldPersonChild;
			}

			fldCurrencyType = ArrayOptFind( oPersonRating.currency_types_array, 'This.id == account.currency_type_id' );
			if ( fldCurrencyType == undefined )
			{
				return;
			}

			fldCurrencyType.person_score = account.balance.Value;
			oPersonRating.person_score += account.balance.Value;
			oPersonRating.num = order_num;

			if ( fldPersonChild == undefined &amp;&amp; ! top_rating )
			{
				tmpPersons.push( oPersonRating );
			}
			else if ( top_rating )
			{
				return oPersonRating;
			}
		}

		function ArrayOptFindIndex( arr, key )
		{
			if ( arr != undefined &amp;&amp; ( sId = OptInt( key ) ) != undefined )
			{
				for ( j = 0; j < ArrayCount( arr ); j++ )
				{
					if ( OptInt( arr[j].id, null ) == sId )
					{
						return j;
					}
				}
			}

			return undefined;
		}

		function formOrderRating( start, end, top )
		{
			for ( a = 0; a < iRatingLength; a++ )
			{
				if ( a > 0 )
				{
					iPrevScore = OptInt( aSortAccounts[a - 1].balance, 0 );
					if ( OptInt( aSortAccounts[a].balance ) == iPrevScore &amp;&amp; bSamePlace )
					{
						iOrderNum;
					}
					else
					{
						iOrderNum++;
					}

					if ( a >= start &amp;&amp; a < end || start > 0 &amp;&amp; a > start &amp;&amp; a < end + 1 || start == end &amp;&amp; a == start )
					{
						getPersonRating( aSortAccounts[a], iOrderNum, false );
					}

					if ( a > end + 1 )
					{
						break;
					}
				}
				else if ( a == start )
				{
					iOrderNum++;
					getPersonRating( aSortAccounts[a], iOrderNum, false );
				}
				else
				{
					iOrderNum++;
				}
			}

			if ( top &amp;&amp; start > 2 )
			{
				aTopRating = [];
				iTopOrder = 0;

				for ( q = 0; q < 3; q++ )
				{
					if ( q == 0 )
					{
						iTopOrder++;
						aTopRating.push( getPersonRating( aSortAccounts[ q ], iTopOrder, top ) );
					}
					else
					{
						iPrevScore = OptInt( aSortAccounts[ q - 1 ].balance, 0 );
						if ( OptInt( aSortAccounts[ q ].balance ) == iPrevScore &amp;&amp; bSamePlace )
						{
							iTopOrder;
						}
						else
						{
							iTopOrder++;
						}

						aTopRating.push( getPersonRating( aSortAccounts[ q ], iTopOrder, top ) );
					}
				}

				if ( start != 0 )
				{
					tmpPersons = ArrayUnion( aTopRating, tmpPersons );
				}
			}
		}

		function checkLevel()
		{
			aResult = [];
			tmpPersons = ArraySort( tmpPersons, 'This.level_num', '-', 'This.person_score', '-', 'This.modification_date', '+' );

			for ( i = 0; i < ArrayCount( tmpPersons ); i++ )
			{
				oOrderTmp = tmpPersons[ i ];
				oOrderTmp.num = i + 1;
				aResult.push( oOrderTmp );
			}

			return aResult;
		}

		// alert('bAllLevel: ' + bAllLevel);
		// alert('bCheckLevel: ' + bCheckLevel);
		// alert('iLevelID: ' + iLevelID);
		// alert('bDispSub: ' + bDispSub);
		// alert('iSubdivID: ' + iSubdivID);
		// alert('iSubdivNum: ' + iSubdivNum);
		// alert('sCurrencyTypeID: ' + sCurrencyTypeID);
		// alert('iGrpColl: ' + iGrpColl);
		// alert('oPaging: ' + tools.object_to_text(oPaging, 'json'));
		// alert('bRange: ' + bRange);
		// alert('iAmntCollsRating: ' + iAmntCollsRating);
		// alert('bSamePlace: ' + bSamePlace);
		// alert('bShowTopRating: ' + bShowTopRating);

		if ( ! bRange )
		{
			iStart = 0;
			iEnd = iAmntCollsRating - 1;
			iPrevScore = undefined;

			formOrderRating( iStart, iEnd, bShowTopRating );

			if ( bCheckLevel &amp;&amp; ! bSamePlace )
			{
				oRes.array = checkLevel();
			}
			else
			{
				oRes.array = ArraySort( tmpPersons, 'This.num', '+', 'This.person_score', '-', 'This.modification_date', '+' );;
			}
		}
		else
		{
			try
			{
				iIndex = OptInt( oPaging.index );
				iSize = OptInt( oPaging.size );
			}
			catch( e )
			{
				iIndex = 0;
				iSize = iRatingLength;
			}

			if ( iIndex != undefined &amp;&amp; iSize != undefined )
			{
				iStart = iIndex * iSize;
				iEnd = ( iStart == 0 ) ? iStart + iSize : iStart + iSize - 1;

				formOrderRating( iStart, iEnd, false );

				if ( bCheckLevel )
				{
					oRes.array = checkLevel();
				}
				else
				{
					oRes.array = ArraySort( tmpPersons, 'This.num', '+', 'This.person_score', '-', 'This.modification_date', '+' );;
				}
			}
		}

		return oRes;
	"/>

	<get_timezone PROPERTY="1" PARAM="iObjectId" PARAM="catObject" PARAM="bReturnNull" EXPR="
		/*
			iObjectId - id объекта, по которому определяется timezone
			catObject - элемент XQuery или TopElem документа объекта, по которому определяется timezone
			bReturnNull -
		*/
		try
		{
			bReturnNull = tools_web.is_true( bReturnNull )
		}
		catch( ex )
		{
			bReturnNull = false;
		}
		try
		{
			catObject
		}
		catch( ex )
		{
			try
			{
				catObject = OpenDoc( UrlFromDocID( iObjectId ) ).TopElem;
			}
			catch( err )
			{
				return bReturnNull ? null : global_settings.settings.timezone_id
			}
		}

		if( !catObject.ChildExists( 'place_id' ) )
			return bReturnNull ? null : global_settings.settings.timezone_id;

		_catPlace = undefined;
		if( catObject.place_id.HasValue )
			_catPlace = catObject.place_id.OptForeignElem;

		_cnt_max = 50;
		_cnt = 1;
		while( _catPlace != undefined && _cnt < _cnt_max )
		{
			_cnt++;
			if( _catPlace.timezone_id.HasValue )
				return _catPlace.timezone_id;
			if( !_catPlace.parent_id.HasValue )
				break;
			_catPlace = _catPlace.parent_id.OptForeignElem;
		}

		switch( catObject.Name )
		{
			case 'collaborator':
				if( catObject.position_parent_id.HasValue )
				{
					catSubdivision = catObject.position_parent_id.OptForeignElem;
					_cnt = 1;
					while( catSubdivision != undefined && _cnt < _cnt_max )
					{
						_cnt++;
						_timezone_id = get_timezone( catSubdivision.id, catSubdivision, true );
						if( _timezone_id != null )
						{
							return _timezone_id
						}
						if( !catSubdivision.parent_object_id.HasValue )
							break;
						catSubdivision = catSubdivision.parent_object_id.OptForeignElem;
					}
				}
				break;
		}

		return bReturnNull ? null : global_settings.settings.timezone_id
	"/>

	<get_timezone_date PROPERTY="1" PARAM="dDate" PARAM="catTimeZone1" PARAM="catTimeZone2" EXPR="
		/*
			dDate - дата, которую необходимо перевести,
			catTimeZone1 - временная зона из которой нужно перевести
			catTimeZone2 - временная зона в которую нужно перевести
		*/
		try
		{
			dDate = Date( dDate )
		}
		catch( ex )
		{
			return '';
		}
		try
		{
			catTimeZone1.tm
		}
		catch( ex )
		{

			try
			{
				catTimeZone1 = common.timezones.GetChildByKey( catTimeZone1 )
			}
			catch( ex )
			{
				return dDate;
			}
		}
		try
		{
			catTimeZone2.tm
		}
		catch( ex )
		{

			try
			{
				catTimeZone2 = common.timezones.GetChildByKey( catTimeZone2 )
			}
			catch( ex )
			{
				return dDate;
			}
		}

		_diff = 0;
		_diff = ( catTimeZone1.direction == 0 ? ( _diff + catTimeZone1.tm ) : ( _diff - catTimeZone1.tm ) )
		_diff = ( catTimeZone2.direction == 0 ? ( _diff - catTimeZone2.tm ) : ( _diff + catTimeZone2.tm ) )
		return DateOffset( dDate, _diff*3600 );
	"/>

	<get_class_for_status PROPERTY="1" PARAM="sStatus" EXPR="

		sDataClass = '';
		sStatus = String( sStatus );
		switch( sStatus )
		{
			case 'project':
				sDataClass = 'color-project';
				break;
			case 'plan':
			case 'agreement':
				sDataClass = 'color-plan';
				break;
			case 'active':
			case 'publish':
				sDataClass = 'color-process';
				break;
			case 'close':
			case 'obsolete':
			case 'finish':
			case 'success':
				sDataClass = 'color-finish';
				break;
			case 'archive':
			case 'secret':
				sDataClass = 'color-archive';
				break;
			case 'cancel':
				sDataClass = 'color-cancel';
				break;
			case 'ignore':
			case 'failed':
				sDataClass = 'color-failed';
				break;

		}
		return sDataClass;
	"/>

	<get_url_query PROPERTY="1" PARAM="sUrlParam" EXPR="
			var oNeatParams = new Object;
			if ( StrContains( sUrlParam, '_wt/' ) )
			{
				var sNeatPart, aNeatUrlParse = UrlDecode( sUrlParam ).split( '_wt/' )[ 1 ].split( '/' );
				var sNeatParam = null;
				var iObjectID = null;

				iNeatPartIdx = 0;
				for ( sNeatPart in aNeatUrlParse )
				{
					switch ( iNeatPartIdx )
					{
						case 0:
						{
							iObjectID = OptInt( sNeatPart, null );
							if ( iObjectID &gt; 1000000000 )
							{
								oNeatParams.SetProperty( 'object_id', sNeatPart );
							}
							else
							{
								oNeatParams.SetProperty( 'mode', sNeatPart );
							}
							break;
						}

						case 1:
						{
							if ( iObjectID == null &amp;&amp; OptInt( sNeatPart ) &gt; 1000000000 )
							{
								oNeatParams.SetProperty( 'object_id', sNeatPart );
								break;
							}
						}
						default:
						{
							if ( sNeatParam === null )
							{
								sNeatParam = sNeatPart;
							}
							else
							{
								oNeatParams.SetProperty( sNeatParam, sNeatPart );
								sNeatParam = null;
							}
							break;
						}
					}
					iNeatPartIdx++;
				}
			}
			else
			{
				oNeatParams = UrlQuery( sUrlParam );
			}
			return oNeatParams;
	"/>

	<transform_fancy_url PROPERTY="1" PARAM="source" EXPR="

		var urlPath, urlParam, bIsRequest = (DataType(source) != 'string');
		if (bIsRequest)
		{
			urlPath = source.UrlPath;
			urlParam = source.UrlParam;
		}
		else
		{
			urlPath = UrlPath(source);
			urlParam = UrlParam(source);
		}

		// ********* Fancy url ****************
		var sNeatUrlPrefix = '_wt';
		if ( StrEnds( urlPath, '/' + sNeatUrlPrefix ) )
		{
			urlPath += '/';
		}
		var iNeatPartIdx = urlPath.indexOf('/' + sNeatUrlPrefix + '/');
		if (iNeatPartIdx >= 0)
		{
			var oNeatParams = tools_web.get_url_query( urlPath );

			urlPath = '/view_doc.html';
			var sNeatSavedParams = urlParam;
			urlParam = UrlEncodeQuery( oNeatParams );
			if (sNeatSavedParams != '')
				urlParam += (urlParam != '' ? '&' : '') + sNeatSavedParams;

			if (bIsRequest)
			{
				source.UrlPath = urlPath;
				source.UrlParam = urlParam;
			}
			else
			{
				source = urlPath;
				if (urlParam != '')
					source += '?' + urlParam;
			}
		}
		else // ********* OPENAPI url ****************
		{
			sNeatUrlPrefix = 'oapi';
			iNeatPartIdx = urlPath.indexOf('/' + sNeatUrlPrefix);
			if (iNeatPartIdx >= 0)
			{
				var sNeatSavedParams = urlPath.slice(iNeatPartIdx + StrLen(sNeatUrlPrefix) + 1);
				if (StrBegins(sNeatSavedParams, '/'))
					sNeatSavedParams = sNeatSavedParams.slice(1);
				urlParam += (urlParam != '' ? '&' : '') + '_p+=' + Base64Encode(sNeatSavedParams);
				urlPath = '/openapi.html';
				if (bIsRequest)
				{
					source.UrlPath = urlPath;
					source.UrlParam = urlParam;
				}
				else
				{
					source = urlPath;
					if (urlParam != '')
						source += '?' + urlParam;
				}
			}
		}

		return source;
	"/>


	<get_lng_fullname PROPERTY="1" PARAM="tePersonParam" PARAM="fldLngParam" EXPR="
			if ( ! fldLngParam.fullname_sequence.HasValue )
				return tePersonParam.fullname;

			return SafeEval( fldLngParam.fullname_sequence, [ { 'lastname': tePersonParam.lastname, 'firstname': tePersonParam.firstname, 'middlename': tePersonParam.middlename } ] );
	"/>

	<get_language_desc PROPERTY="1" PARAM="sDesc" PARAM="oEnv" EXPR="
			/*
				Функция возвращает описание соответствующее языку
				параметры
					sDesc		- текст с описанием
			*/
			try
			{
				sDesc = String( sDesc );
			}
			catch( ex )
			{
				return '';
			}
			sCurLngId = oEnv.GetOptProperty( 'curLngID' );
			sTempDesc = '';
			iStartIndex = 0;
			iFinishIndex = 0;
			iCnt = 0
			while( iCnt < 100 )
			{
				iStartIndex = sDesc.indexOf( '###start_' + sCurLngId, iFinishIndex );
				iFinishIndex = sDesc.indexOf( '###finish_' + sCurLngId, iStartIndex );

				if( iStartIndex < 0 || iFinishIndex < 0 )
					break;

				sTempDesc += StrRangePos( sDesc, iStartIndex + StrLen( '###start_' + sCurLngId ), iFinishIndex );
				iCnt++;
			}
			return sTempDesc;
	"/>


	<set_override_web_params PROPERTY="1" PARAM="curParamsTarget" PARAM="catOverrideWebTemplateParam" EXPR="
			if ( catOverrideWebTemplateParam.wvars_num == 0 )
			{
				return false;
			}

			var fldWvars = catOverrideWebTemplateParam.OptChild( 'wvars' );
			if ( fldWvars == undefined )
			{
				fldWvars = OpenDoc( UrlFromDocID( catOverrideWebTemplateParam.id ) ).TopElem.wvars;
			}
			tools_web.set_web_params( curParamsTarget, fldWvars, true );
			return true;
	"/>


	<access_exists PROPERTY="1" PARAM="fldAccessParam" EXPR="
			return ( ! fldAccessParam.enable_anonymous_access &amp;&amp; ( fldAccessParam.access_level &gt; 0 || fldAccessParam.access_roles.ChildNum &gt; 0 || fldAccessParam.access_groups.ChildNum &gt; 0 || fldAccessParam.conditions.ChildNum &gt; 0 || fldAccessParam.access_org_id.HasValue || fldAccessParam.access_site_id.HasValue || fldAccessParam.access_host_id.HasValue ) );
	"/>


	<str_period_date PROPERTY="1" PARAM="dtParam" PARAM="curLngWeb" EXPR="
			if ( dtParam == null )
			{
				return '';
			}
			try
			{
				curLngWeb;
				arrYears = [ tools_web.get_web_const( 'let_1', curLngWeb ), tools_web.get_web_const( 'god', curLngWeb ), tools_web.get_web_const( 'goda', curLngWeb ) ];
				sMes = tools_web.get_web_const( 'mes', curLngWeb );
			}
			catch ( err )
			{
				arrYears = [ ms_tools.get_const('let_1'), ms_tools.get_const('god'), ms_tools.get_const('goda') ];
				sMes = ms_tools.get_const('mes');
			}
			rPeriod = ( 0.083 * Month( CurDate ) + Year( CurDate ) ) - ( 0.083 * Month( dtParam ) + Year( dtParam ) );
			iPeriod = Int( rPeriod );
			sPeriodMonth = StrReal( ( ( rPeriod - iPeriod ) / 0.083 ), 0 );
			return ( ( iPeriod == 0 ? '' : iPeriod + ' ' + StrNonTitleCase( arrYears[ IntModType( iPeriod ) ] ) + ' ' ) + sPeriodMonth + ' ' + StrNonTitleCase( sMes ) );
	"/>


	<enabled_web_rules_date TYPE="date"/>
	<enabled_web_rules_obj TYPE="variant"/>
	<get_enabled_web_rules PROPERTY="1" EXPR="
			var dtStdWebRules = null;
			var bStdWebRules = ! tools_web.enabled_web_rules_obj.HasValue;
			if ( ! bStdWebRules )
			{
				dtStdWebRules = OptDate( tools_web.get_user_data( 'enabled_web_rules_date' ), null );
				bStdWebRules = OptDate( '' + dtStdWebRules ) &gt; tools_web.enabled_web_rules_date;
			}
			if ( bStdWebRules )
			{
				var arrEnabledWebRoles = ArraySelectAll( XQuery( 'for $elem in web_rules where $elem/is_enabled = true() return $elem/Fields(\'id\',\'is_std\',\'is_pattern\',\'use_matches\',\'url\',\'weight\',\'web_design_id\',\'redirect_type\',\'redirect_url\',\'redirect_web_mode_id\',\'site_id\')' ) );
				EvalCs('
					tools_web.enabled_web_rules_obj = arrEnabledWebRoles;
					tools_web.std_web_rules_obj.Clear();
					tools_web.enabled_web_rules_date = Date();
				');
			}
			return tools_web.enabled_web_rules_obj.Object;
	"/>

	<std_web_rules_obj TYPE="variant"/>
	<get_std_web_rules PROPERTY="1" EXPR="
			if ( ! tools_web.std_web_rules_obj.HasValue )
			{
				var arrEnabledWebRoles = ArrayExtract( ArraySelect( tools_web.get_enabled_web_rules(), 'This.is_std&amp;&amp;!This.is_pattern&amp;&amp;StrBegins(This.url,\'/\')&amp;&amp;String(This.url).indexOf(\'/\',1)&lt;0' ), '({mode:StrRightRangePos(This.url,1),site_id:This.site_id.Value,web_design_id:This.web_design_id.Value})' );
				EvalCs('
					tools_web.std_web_rules_obj = arrEnabledWebRoles;
				');
			}
			return tools_web.std_web_rules_obj.Object;
	"/>
	<clear_std_web_rules PROPERTY="1" EXPR="
			EvalCs('
				tools_web.std_web_rules_obj.Clear();
				tools_web.enabled_web_rules_obj.Clear();
			');
			tools_web.set_user_data( 'enabled_web_rules_date', StrXmlDate( Date() ), null );
			return true;
	"/>

	<get_mode_clean_url PROPERTY="1" PARAM="sModeParam" PARAM="iObjectIDParam" PARAM="oParams" EXPR="
			try
			{
				if ( iObjectIDParam == '' || iObjectIDParam == undefined )
				{
					throw 'no_data';
				}
			}
			catch ( err )
			{
				iObjectIDParam = null;
			}
			try
			{
				if ( oParams == null )
				{
					throw 'no_data';
				}
			}
			catch ( err )
			{
				oParams = new Object;
			}

			if ( sModeParam == 'doc' )
			{
				sModeParam = null;
				iObjectIDParam = oParams.GetOptProperty( 'doc_id', null );
			}

			var sResUrl = '/_wt';
			if ( sModeParam == '' )
			{
				sModeParam = null;
			}
			if ( iObjectIDParam == '' )
			{
				iObjectIDParam = null;
			}

			if ( sModeParam != null )
			{
				arrModeStdWebRules = ArraySelectByKey( tools_web.get_std_web_rules(), sModeParam, 'mode' );
				if ( ArrayCount( arrModeStdWebRules ) != 0 )
				{
					iSiteID_get_mode_clean_url = null;
					iWebDesignID_get_mode_clean_url = null;
					try
					{
						Env = CurRequest.Session.Env;
						iSiteID_get_mode_clean_url = OptInt( Env.GetOptProperty( 'site_id' ), null );
						iWebDesignID_get_mode_clean_url = OptInt( Env.GetOptProperty( 'web_design_id' ), null );
					}
					catch ( err )
					{
					}

					for ( oModeStdWebRuleElem in arrModeStdWebRules )
					{
						if ( ( oModeStdWebRuleElem.site_id == null || oModeStdWebRuleElem.site_id == iSiteID_get_mode_clean_url ) &amp;&amp; ( oModeStdWebRuleElem.web_design_id == null || oModeStdWebRuleElem.web_design_id == iWebDesignID_get_mode_clean_url ) )
						{
							sResUrl = '';
							if ( iObjectIDParam != null )
							{
								oParams.SetProperty( 'object_id', iObjectIDParam );
							}
							for ( sFieldNameElem in oParams )
							{
								sFieldValue = oParams.GetProperty( sFieldNameElem );
								sResUrl += ( sResUrl == '' ? '?' : '&amp;' ) + sFieldNameElem + '=' + ( StrBegins( sFieldValue, '{' ) ? sFieldValue : UrlEncode( sFieldValue ) );
							}
							//sResUrl = UrlEncodeQuery( oParams );
							return '/' + sModeParam + sResUrl;
						}
					}
				}
			}

			if ( sModeParam != null )
			{
				sResUrl += '/' + sModeParam;
			}
			if ( iObjectIDParam != null )
			{
				sResUrl += '/' + iObjectIDParam;
			}
			for ( sFileNameElem in oParams )
			{
				sValue = oParams.GetProperty( sFileNameElem );
				if ( sValue == null || sValue == '' )
				{
					continue;
				}
				switch ( sFileNameElem )
				{
					case 'mode':
					case 'object_id':
					{
						break;
					}

					case 'doc_id':
					{
						if ( sValue != '_' )
						{
							sResUrl += '/' + sFileNameElem + '/' + sValue;
						}
						break;
					}

					default:
					{
						sResUrl += '/' + sFileNameElem + '/' + sValue;
						break;
					}
				}
			}
			return sResUrl;
	"/>

	<get_web_mode_clean_url PROPERTY="1" PARAM="oWebModeParam" PARAM="iObjectIDParam" PARAM="oParams" EXPR="
			try
			{
				if ( iObjectIDParam == '' || iObjectIDParam == undefined )
				{
					throw 'no_data';
				}
			}
			catch ( err )
			{
				iObjectIDParam = null;
			}
			try
			{
				if ( oParams == null )
				{
					throw 'no_data';
				}
			}
			catch ( err )
			{
				oParams = new Object;
			}
			if ( oWebModeParam == null )
			{
				throw 'Error tools_web.get_web_mode_clean_url(): parameter iWebModeID is null.';
			}

			var iWebModeID = OptInt( oWebModeParam );
			if ( iWebModeID != undefined )
			{
				oWebModeParam = OpenDoc( UrlFromDocID( iWebModeID ) ).TopElem;
			}
			return tools_web.get_mode_clean_url( oWebModeParam.code, iObjectIDParam, oParams );
	"/>

	<convert_mode_clean_url PROPERTY="1" PARAM="sUrlParam" EXPR="
			if ( ! StrContains( sUrlParam, 'view_doc.html' ) )
			{
				return sUrlParam;
			}

			var oUrlQuery = UrlQuery( sUrlParam );
			return tools_web.get_mode_clean_url( oUrlQuery.GetOptProperty( 'mode', '' ), oUrlQuery.GetOptProperty( 'object_id', '' ), oUrlQuery );
	"/>

	<get_clean_url_exc_query PROPERTY="1" PARAM="sUrlParam" PARAM="sExcParams" PARAM="oParams" EXPR="
			var arrExcParams = StrContains( sExcParams, '=' ) ? ArrayExtract( String( sExcParams ).split( '&amp;' ), 'This.split(&quot;=&quot;)[0]' ) : String( sExcParams ).split( ';' );

			var oResUrlQuery = new Object;
			var oUrlQuery = tools_web.get_url_query( sUrlParam );
			for ( sFieldNameElem in oUrlQuery )
			{
				if ( ArrayOptFind( arrExcParams, 'StrLowerCase(This)==\'' + sFieldNameElem + '\'' ) == undefined )
				{
					oResUrlQuery.SetProperty( sFieldNameElem, oUrlQuery.GetProperty( sFieldNameElem ) );
				}
			}
			for ( sFieldNameElem in oParams )
			{
				oResUrlQuery.SetProperty( sFieldNameElem, oParams.GetProperty( sFieldNameElem ) );
			}

			return tools_web.get_mode_clean_url( oResUrlQuery.GetOptProperty( 'mode', '' ), oResUrlQuery.GetOptProperty( 'object_id', '' ), oResUrlQuery );
	"/>


	<obtain_shared_temp_file PROPERTY="1" PARAM="sSuffixParam" EXPR="
			try
			{
				if ( sSuffixParam == null )
				{
					throw 'no_data';
				}
			}
			catch ( err )
			{
				sSuffixParam = '';
			}
			if ( LdsIsServer )
			{
				var sTempUrl = 'x-local://share/uploaded_files/' + UniqueStrID( 32 ) + sSuffixParam;
			}
			else
			{
				var sTempUrl = ObtainSessionTempFile( sSuffixParam );
			}
			return sTempUrl;
	"/>


	<encode_url_reserved PROPERTY="1" PARAM="sUrlParam" EXPR="
			return StrReplace( sUrlParam, '+', '_~~_' );
	"/>

	<decode_url_reserved PROPERTY="1" PARAM="sUrlParam" EXPR="
			return StrReplace( StrReplace( sUrlParam, '[~~]', '+' ), '_~~_', '+' );
	"/>

	<get_remote_action_param PROPERTY="1" PARAM="aNames" PARAM="TOPELEM" EXPR="

			try
			{
				TOPELEM.Name
			}
			catch(e)
			{ throw 'No TopElem args'}

			if(TOPELEM.Name != 'remote_action')
			{ throw 'TopElem args is no Remote Action TopElem'}

			var oWvars = tools.wvars_to_object( TOPELEM.wvars );

			var retParam = {};
			var arrMissing = []
			var Value;

			for(sName in aNames)
			{
				if(oWvars.HasProperty(sName))
				{
					Value = oWvars.GetOptProperty(sName);
					if(Value != '' && Value != null && Value != undefined )
					{
						retParam.SetProperty(sName, Value)
					}
					else
					{
						arrMissing.push(sName);
					}
				}
				else
				{
					arrMissing.push(sName);
				}
			}

			var oRow = null
			if(ArrayOptFirstElem(arrMissing) != undefined)
			{
				if(oWvars.HasProperty('_ITEM_'))
				{
					oRow = ParseJson( oWvars.GetProperty('_ITEM_') );
				}
				else if(oWvars.HasProperty('DATA_JSON'))
				{
					oRow = ParseJson( oWvars.GetProperty('DATA_JSON') );
				}

				var itemValue;
				for(sName in arrMissing)
				{
					if(oRow == null || !oRow.HasProperty(sName))
					{
						itemValue = null;
					}
					else
					{
						itemValue = oRow.GetProperty(sName);
					}

					retParam.SetProperty(sName, itemValue)
				}
			}

			return retParam;
	"/>



	<check_collection_access  PROPERTY="1" PARAM="oCurUserParam" PARAM="oObjectParam" PARAM="sPersonAccessType" EXPR="
			if ( sPersonAccessType == null || sPersonAccessType == undefined || sPersonAccessType == '' || sPersonAccessType == 'all' )
			{
				return true;
			}

			switch ( sPersonAccessType )
			{
				case 'self':
				{
					var iCurUserID = OptInt( oCurUserParam );
					if ( iCurUserID == undefined )
					{
						iCurUserID = oCurUserParam.id.Value;
					}
					var iObjectID = OptInt( oObjectParam );
					if ( iObjectID == undefined )
					{
						iObjectID = oObjectParam.id.Value;
					}
					return ( iCurUserID == iObjectID );
					break;
				}

				case 'self_boss':
				{
					var iCurUserID = OptInt( oCurUserParam );
					if ( iCurUserID == undefined )
					{
						iCurUserID = oCurUserParam.id.Value;
					}
					var iObjectID = OptInt( oObjectParam );
					if ( iObjectID == undefined )
					{
						iObjectID = oObjectParam.id.Value;
					}
					if ( iCurUserID == iObjectID )
					{
						return true;
					}
					return tools.is_boss( oCurUserParam, oObjectParam );
					break;
				}

				case 'boss':
				{
					return tools.is_boss( oCurUserParam, oObjectParam );
					break;
				}
			}
			return false;
	"/>


	<get_empty_env PROPERTY="1" EXPR="
			return {
				curUserID: null,
				curUser: null,
				curObjectID: null,
				curObject: null,
				curDocID: null,
				curDoc: null,
				curLngWeb: []
			};
	"/>
	<get_empty_request PROPERTY="1" EXPR="
			return {
				Session: {
					Env: tools_web.get_empty_env(),
					sid: 0
				}
			};
	"/>
	<get_admin_request PROPERTY="1" EXPR="
			var curUser = tools.get_cur_user();
			var oRequest = tools_web.get_empty_request();
			oRequest.Session.Env.curUserID = curUser.id.Value;
			oRequest.Session.Env.curUser = curUser;
			return oRequest;
	"/>

	<parse_multiple_parameter PROPERTY="1" PARAM="Param" EXPR="
		var arrParam = [];
		try
		{
			var oParam =  DataType(Param) == 'object' ? Param : ParseJson(Param);
			if(IsArray(oParam))
			{
				arrParam = oParam;
			}
			else
			{
				for(itemKey in oParam)
					arrParam.push(itemKey);
			}
		}
		catch(e)
		{
			arrParam = StrReplace(Param, ',', ';').split(';');
		}

		var arrElem = ArrayOptFirstElem(arrParam);

		if(arrElem == undefined)
			return [];

		if(ArrayCount(arrParam) == 1 && (arrElem == null || arrElem == '') )
			return [];

		if(DataType(arrElem) == 'object')
		{
			if(arrElem.HasProperty('__value'))
				return ArrayExtract(arrParam, 'OptInt(This.__value, null)');
			else
				return arrParam;
		}

		return ArrayExtract(arrParam, 'OptInt(This, This)');
	"/>

	<get_md5_id PROPERTY="1" PARAM="sHashStr" EXPR="
		var sMd5Str = Md5(sHashStr);
		var iRes = 0;
		for(var i = 0; i<sMd5Str.length; i++)
		{
			iRes *= 256;
			iRes += Int(sMd5Str.charCodeAt(i));
		}
		return ('' + iRes);
	"/>

	<check_object PROPERTY="1" PARAM="xmCurObject" PARAM="sType" EXPR="

		if(ObjectType(xmCurObject) != 'XmElem')
			return false;

		try{xmCurObject.Name}
		catch(e){ return false; }

		try{sType}
		catch(e){ sType = null; }

		if(sType != undefined && sType != null && sType != '')
			return (xmCurObject != undefined && xmCurObject != null && xmCurObject.Name == sType);
		else
			return (xmCurObject != undefined && xmCurObject != null);

	"/>


	<check_redirect_url PROPERTY="1" PARAM="sUrlParam" EXPR="
			if ( StrContains( sUrlParam, '://' ) || StrContains( sUrlParam, '../' ) )
			{
				return false;
			}
			return true;
	"/>
	<check_web_rule_by_url PROPERTY="1" PARAM="sUrlParam" PARAM="Request" EXPR="
			var curHostName = tools_web.get_host_name( Request.Url );
			var resEnv = tools_web.get_user_data( 'cur_host_info_' + curHostName );
			if ( resEnv == null )
			{
				oEnv = Request.Session.GetOptProperty( 'Env' );
				if ( oEnv != undefined )
				{
					Request.Session.Env.curSite = null;
				}
				resEnv = tools_web.get_host_obj( Request );
				if ( oEnv != undefined )
				{
					Request.Session.Env.curSite = resEnv.curSite;
				}
				tools_web.set_user_data( 'cur_host_info_' + curHostName, {
					curWebDesignID: resEnv.curWebDesignID,
					curSiteID: resEnv.curSiteID
				}, global_settings.settings.auth_session_life_time, 'cur_host_info_list' );
			}
			var arrWebRules = ArraySelect( tools_web.get_enabled_web_rules(), '( This.is_pattern || This.url == ' + CodeLiteral( sUrlParam ) + ' ) ' + ( OptInt( resEnv.curWebDesignID ) == undefined ? '' : ' && ( This.web_design_id == null || This.web_design_id == ' + resEnv.curWebDesignID + ')' ) + ( OptInt( resEnv.curSiteID ) == undefined ? '' : ' && ( This.site_id == null || This.site_id == ' + resEnv.curSiteID + ')' ) );
			for ( _catRuleElem in arrWebRules )
			{
				if (!_catRuleElem.is_pattern.Value || StrMatchesPattern( sUrlParam, _catRuleElem.url))
				{
					return true;
				}
			}
			return false;
	"/>


	<check_learning_schedule PROPERTY="1" PARAM="oLearningParam" PARAM="teObjectParam" EXPR="
			var oRes = {
				error: 0,
				error_text: ''
			};

			var teLearning = null;
			var iLearningID = OptInt( oLearningParam );
			if ( iLearningID == undefined )
			{
				teLearning = oLearningParam;
				iLearningID = teLearning.id.Value;
			}
			else
			{
				teLearning = OpenDoc( UrlFromDocID( iLearningID ) ).TopElem;
			}
			try
			{
				teObjectParam;
			}
			catch ( err )
			{
				teObjectParam = null;
			}

			if ( teLearning.ChildExists( 'start_learning_date' ) &amp;&amp; teLearning.start_learning_date.HasValue &amp;&amp; teLearning.start_learning_date &gt; CurDate )
			{
				oRes.error = 1;
				oRes.error_text = 'Start learning date.';
				return oRes;
			}

			if ( teObjectParam == null )
			{
				iObjectID = ( teLearning.Name == 'active_test_learning' ? teLearning.assessment_id.Value : teLearning.course_id.Value );
				teObjectParam = OpenDoc( UrlFromDocID( iObjectID ) ).TopElem;
			}

			if ( ! teObjectParam.schedule.check_week_schedule() )
			{
				oRes.error = 2;
				oRes.error_text = 'Week schedule.';
				return oRes;
			}

			return oRes;
	"/>



	<set_user_status PROPERTY="1" PARAM="curUserIDParam" PARAM="oStatusParam" EXPR="
			var oData = tools_web.get_user_data( 'user_status_' + curUserIDParam );
			if ( oData == null )
			{
				tools_web.set_user_data( 'user_status_' + curUserIDParam, oStatusParam, 600 );
				return oStatusParam;
			}
			else
			{
				for ( sFieldNameElem in oStatusParam )
				{
					oData.SetProperty( sFieldNameElem, oStatusParam.GetProperty( sFieldNameElem ) );
				}
				tools_web.set_user_data( 'user_status_' + curUserIDParam, oData, 600 );
				return oData;
			}
	"/>

	<get_user_status PROPERTY="1" PARAM="curUserIDParam" EXPR="
			return tools_web.get_user_data( 'user_status_' + curUserIDParam );
	"/>


</tools_web>

</SPXML-INLINE-FORM>