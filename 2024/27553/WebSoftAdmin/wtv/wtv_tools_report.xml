<?xml version="1.0" encoding="utf-8"?>
<SPXML-INLINE-FORM>

<tools_report>

	<log_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sMsg" EXPR="
		EnableLog( 'report_log', true );
		try
		{
			LogEvent( 'report_log', sMsg );
		}
		catch( e )
		{
			alert( e );
		}
	"/>
	
	<model_roles PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="curUserID" PARAM="sApplicationID" PARAM="sBlockName" EXPR="
		
		try
		{
			sBlockName;
		}
		catch( _no_block_ )
		{
			sBlockName = '';
		}
		
		sAccessType = '';
		
		if ( sBlockName != '' &amp;&amp; ms_tools.check_access_block_rights( sBlockName, 'read', curUserID ) )
		{
			sAccessType = 'admin';
		}
		
		var oRes = {
			type: sAccessType,
			org_ids: {
				hr: [],
				observer: []
			},
			subordinate_ids: {
				hr: [],
				observer: []
			},
			subdivision_ids: {
				hr: [],
				observer: []
			},
			group_ids: {
				hr: [],
				observer: []
			},
			expert_id: null
		};
		
		try
		{
			if( sApplicationID != undefined &amp;&amp; sApplicationID != null &amp;&amp; sApplicationID != '' )
			{
				var iApplLevel = tools.call_code_library_method( 'libApplication', 'GetPersonApplicationAccessLevel', [ curUserID, sApplicationID ] );

				switch(iApplLevel)
				{
					case 10:
						sAccessType = 'admin';
						break;
					case 7:
						sAccessType = 'manager';
						break;
					case 5: 
						sAccessType = 'hr';
						break;
					case 3: 
						sAccessType = 'expert';
						break;
					case 1: 
						sAccessType = 'observer';
						break;
					default:
						sAccessType = 'reject';
						break;
				}
				
				oRes.type = sAccessType;

				arrSubordinateIDs = []
				switch( sAccessType )
				{
					case 'hr':
					{
						var iAppHRManagerTypeID = tools.call_code_library_method('libApplication', 'GetApplicationHRBossTypeID', [ sApplicationID, curUserID ]);
						arrSubordinateIDs = tools.call_code_library_method( 'libMain', 'get_subordinate_records', [ curUserID, ['func'], true, '', null, '', true, true, true, true, [iAppHRManagerTypeID], true, '' ] );
						
						// subordinate_ids
						for(iSubordinateID in arrSubordinateIDs)
						{
							oRes.subordinate_ids.hr.push(iSubordinateID.Value);
						}
						
						arrObjects = ArrayExtract(tools.call_code_library_method('libMain', 'get_boss_management_objects', [ curUserID ] ), '({id: This.id, name: This.name, type: This.type})');

						for(oObject in arrObjects)
						{
							//org_ids
							if(oObject.type == 'org')
							{
								oRes.org_ids.hr.push(oObject.id);
							}

							// subdivision_ids
							if(oObject.type == 'subdivision')
							{
								oRes.subdivision_ids.hr.push(oObject.id);
							}
							
							// group_ids
							if(oObject.type == 'group')
							{
								oRes.group_ids.hr.push(oObject.id);
							}
						}
						
						break;
					}
					case 'observer':
					{
						arrSubordinateIDs = tools.call_code_library_method( 'libMain', 'get_subordinate_records', [ curUserID, ['func'], true, '', null, '', true, true, true, true, [], true, '' ] );
						
						//subordinate_ids
						for(iSubordinateID in arrSubordinateIDs)
						{
							oRes.subordinate_ids.observer.push(iSubordinateID.Value);
						}
						
						// subdivision_ids
						arrObjects = ArrayExtract(tools.call_code_library_method('libMain', 'get_boss_management_objects', [ curUserID ] ), '({id: This.id, name: This.name, type: This.type})');
						for(oObject in arrObjects)
						{
							// org_ids
							if(oObject.type == 'org')
							{
								oRes.org_ids.observer.push(oObject.id);
							}

							// subdivision_ids
							if(oObject.type == 'subdivision')
							{
								oRes.subdivision_ids.observer.push(oObject.id);
							}
							
							// group_ids
							if(oObject.type == 'group')
							{
								oRes.group_ids.observer.push(oObject.id);
							}
						}

						break;
					}
					case 'expert':
					{
						// найти пользвателя среди экспертов
						sExpertQuery = 'for $elem in experts where $elem/person_id = ' + curUserID + ' return $elem';
						iExpertID = null;
						arrExperts = tools.xquery( sExpertQuery );
						if(ArrayOptFirstElem(arrExperts) != undefined)
						{
							for(oExpert in arrExperts)
							{
								iExpertID = OptInt(oExpert.id.Value);
							}
						}
						
						oRes.expert_id = iExpertID;

						break;
					}
				}
			}

			return oRes;
		}
		catch( e )
		{
			alert( e );
		}
	"/>

	<save_report_to_file PROPERTY="1" PARAM="sHtml" PARAM="sReportName" PARAM="sOutType" PARAM="sFileUrl" PARAM="bIsWebClient" PARAM="sColumns" PARAM="arrData" PARAM="oParams" ALLOW-CALL-FROM-CLIENT="1" EXPR="

		if ( ! LdsIsServer )
			return CallServerMethod( 'tools_report', 'save_report_to_file', [ sHtml, sReportName, sOutType, sFileUrl, bIsWebClient, sColumns, arrData ] );

		CheckCurThread();

		var progress = new TaskProgress;
		progress.TaskName = 'Производится экспорт отчёта';

		try
		{
			bIsWebClient = tools_web.is_true( bIsWebClient )
		}
		catch( ex )
		{
			bIsWebClient = System.IsWebClient;
		}

		var _RESULT = new Binary;

		if ( Trim( String( sHtml ) ) != '' )
		{
			_RESULT.AssignStr( sHtml );
		}
		else
		{
			try
			{
				arrColumns = ParseJson( sColumns );
			}
			catch( ex )
			{
				arrColumns = [];
			}

			_RESULT.AssignStr('<html');
			_RESULT.AppendStr(' xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; xmlns:x=&quot;urn:schemas-microsoft-com:office:excel&quot; xmlns=&quot;http://www.w3.org/TR/REC-html40&quot;')
			_RESULT.AppendStr('><head><meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/>')
			_RESULT.AppendStr('</head><body><table border=&quot;1&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot;&gt;');

			switch ( sReportName )
			{
				case 'test_by_question_report':

					_RESULT.AppendStr('&lt;tr valign=&quot;top&quot;&gt;');

					_RESULT.AppendStr('<td ');

					_RESULT.AppendStr('width=&quot;' + 150 +'&quot; ');

					_RESULT.AppendStr('colspan=&quot;' + 8 + '&quot; ');

					_RESULT.AppendStr('bgcolor=&quot;#FFFFFF&quot;></td>');

					for ( fldQuestionElem in arrData.questions )
					{
						_RESULT.AppendStr('<td ');

						_RESULT.AppendStr('width=&quot;' + 150 +'&quot; ');

						_RESULT.AppendStr('colspan=&quot;' + 4 + '&quot; ');

						_RESULT.AppendStr('bgcolor=&quot;#FF4433&quot;>' + fldQuestionElem.text + '</td>');
					}

					_RESULT.AppendStr('</tr>');

					_RESULT.AppendStr('&lt;tr valign=&quot;top&quot;&gt;');

					_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFCC99&quot;>' + ms_tools.get_const('wrm4ebg7c9') + '</td>');
					_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFCC99&quot;>' + ms_tools.get_const('c_code') + '</td>');
					_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFCC99&quot;>' + ms_tools.get_const('c_org') + '</td>');
					_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFCC99&quot;>' + ms_tools.get_const('c_subd') + '</td>');
					_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFCC99&quot;>' + ms_tools.get_const('c_position') + '</td>');
					_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFCC99&quot;>' + ms_tools.get_const('vdb_aim_date') + '</td>');
					_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFCC99&quot;>' + ms_tools.get_const('c_status') + '</td>');
					_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFCC99&quot;>' + ms_tools.get_const('c_score') + '</td>');

					for ( fldQuestionElem in arrData.questions )
					{
						_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFCC99&quot;>' + ms_tools.get_const('c_type') + '</td>');
						_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFCC99&quot;>' + ms_tools.get_const('c_result') + '</td>');
						_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFCC99&quot;>' + ms_tools.get_const('xahay8meiw') + '</td>');
						_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFCC99&quot;>' + ms_tools.get_const('vieb_correct') + '</td>');
					}

					_RESULT.AppendStr('</tr>');

					for ( fldLearningElem in arrData.learnings )
					{
						_RESULT.AppendStr('&lt;tr valign=&quot;top&quot;&gt;');

						_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFFFFF&quot;>' + fldLearningElem.person_fullname + '</td>');
						_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFFFFF&quot;>' + fldLearningElem.person_code + '</td>');
						_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFFFFF&quot;>' + ( fldLearningElem.person_org_name != '' ? fldLearningElem.person_org_name : ms_tools.get_const( 'jmkcjvkz8n' ) ) + '</td>');
						_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFFFFF&quot;>' + ( oParams.disp_person_list_staff ? fldLearningElem.person_list_staff : fldLearningElem.person_subdivision_name ) + '</td>');
						_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFFFFF&quot;>' + fldLearningElem.person_position_name + '</td>');
						_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFFFFF&quot;>' + StrDate( Date( fldLearningElem.start_usage_date ), true, false ) + '</td>');
						_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFFFFF&quot;>' + fldLearningElem.state_name + '</td>');
						
						if(fldLearningElem.max_score == 0)
						{
							_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFFFFF&quot;>' + 0 + '</td>');
						} else {
							_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFFFFF&quot;>' + ( fldLearningElem.max_score != null ? ( fldLearningElem.score + ' (' + ( ( 100 * fldLearningElem.score ) / fldLearningElem.max_score ) + '%)' ) : fldLearningElem.score ) + '</td>');
						}

						for ( fldQuestionElem in arrData.questions )
						{
							fldQuestionChild = fldLearningElem.questions.GetOptChildByKey( fldQuestionElem.PrimaryKey );
							if ( fldQuestionChild == undefined )
							{
								_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFFFFF&quot;></td>');
								_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFFFFF&quot;></td>');
								_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFFFFF&quot;></td>');
								_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;#FFFFFF&quot;></td>');
							}
							else
							{
								_bgcolor = ( fldQuestionChild.result == StrNonTitleCase( ms_tools.get_const('r1s987zw3e') )) ? '#FFCCCC' : ( fldQuestionChild.result == StrNonTitleCase( ms_tools.get_const('lcnwu5wcgk') ) ? '#CCFFCC' : '#FFFFFF' ) ;

								_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot;>' + fldQuestionChild.quest_type + '</td>');
								_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot; bgcolor=&quot;' + _bgcolor + '&quot;>' + fldQuestionChild.result + '</td>');
								_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot;>' + fldQuestionChild.answer + '</td>');
								_RESULT.AppendStr('<td width=&quot;' + 150 +'&quot;>' + ( StrBegins( fldQuestionChild.correct_answer, '=' ) ? StrRightRangePos( fldQuestionChild.correct_answer, 1 ) : fldQuestionChild.correct_answer ) + '</td>');
							}
						}
					}

					break;

				case 'exceed_course_report':

					_RESULT.AppendStr('&lt;tr valign=&quot;top&quot;&gt;');

					for ( elem in arrColumns )
					{
						_RESULT.AppendStr('<td ');
						_RESULT.AppendStr('width=&quot;' + 150 +'&quot; ');
						_RESULT.AppendStr('bgcolor=&quot;#FFCC99&quot;>' + elem.title + '</td>');
					}

					_RESULT.AppendStr('</tr>');

					for ( elem in arrData )
					{
						_RESULT.AppendStr('<tr valign=&quot;top&quot;>');

						for ( i = 0; i < ArrayCount( arrColumns ); i++ )
						{
							try
							{
								fld = elem.GetOptProperty( arrColumns[i].name )
							}
							catch( ex )
							{
								try
								{
									fld = elem.GetOptChildByKey( arrColumns[i].name )
								}
								catch( ex )
								{
									fld = undefined;
								}
							}

							_RESULT.AppendStr('<td width=&quot;150&quot;>' + ( fld != undefined ? fld : '' ) + '</td>');
						}

						if ( elem.HasProperty( 'parts' ) )
						{
							for ( part in elem.parts )
							{
								_RESULT.AppendStr('<tr valign=&quot;top&quot;>');

								for ( i = 0; i < ArrayCount( arrColumns ); i++ )
								{
									try
									{
										fld = part.GetOptProperty( arrColumns[i].name );
										if ( arrColumns[i].name == 'max_end_date' )
										{
											fld = elem.GetOptProperty( arrColumns[i].name );
										}
									}
									catch( ex )
									{
										try
										{
											fld = part.GetOptChildByKey( arrColumns[i].name );
											if ( arrColumns[i].name == 'max_end_date' )
											{
												fld = elem.GetOptChildByKey( arrColumns[i].name );
											}
										}
										catch( ex )
										{
											fld = undefined;
										}
									}

									_RESULT.AppendStr('<td width=&quot;150&quot;>' + ( fld != undefined ? fld : '' ) + '</td>');
								}

							}
						}

						_RESULT.AppendStr('</tr>');
					}

					break;

				case 'poll_report':

					_RESULT.AppendStr('&lt;tr valign=&quot;top&quot;&gt;');

					if ( oParams.disp_answers || ( ! oParams.disp_answers && oParams.show_comments_in_report ) )
					{
						for ( elem in arrColumns )
						{
							_RESULT.AppendStr('<td ');
							_RESULT.AppendStr('width=&quot;' + 150 +'&quot; ');
							_RESULT.AppendStr('bgcolor=&quot;#FFFFFF&quot;></td>');
						}
					}
					else if ( ! oParams.disp_answers && ! oParams.show_comments_in_report )
					{
						for ( elem in arrColumns )
						{
							_RESULT.AppendStr('<td ');
							_RESULT.AppendStr('width=&quot;' + 150 +'&quot; ');
							_RESULT.AppendStr('bgcolor=&quot;#FFCC99&quot;>' + elem.title + '</td>');
						}
					}

					for ( elem in arrData.questions )
					{
						_RESULT.AppendStr('<td ');
						_RESULT.AppendStr('align=&quot;center&quot; ');
	
						if ( oParams.disp_answers )
						{
							_RESULT.AppendStr('colspan=&quot;' + ( ArrayCount( elem.entries ) + ( oParams.show_comments_in_report ? 1 : 0 ) ) +'&quot; ');
						}
						else
						{
							if ( oParams.show_comments_in_report )
								_RESULT.AppendStr('colspan=&quot;2&quot; ');
						}

						_RESULT.AppendStr('bgcolor=&quot;#FF4433&quot;>' + elem.title + '</td>');
					}

					_RESULT.AppendStr('</tr>');

					if ( oParams.disp_answers || ( ! oParams.disp_answers && oParams.show_comments_in_report ) )
					{
						_RESULT.AppendStr('&lt;tr valign=&quot;top&quot;&gt;');

						for ( elem in arrColumns )
						{
							_RESULT.AppendStr('<td ');
							_RESULT.AppendStr('width=&quot;' + 150 +'&quot; ');
							_RESULT.AppendStr('bgcolor=&quot;#FFCC99&quot;>' + elem.title + '</td>');
						}

						for ( elem in arrData.questions )
						{
							if (  oParams.disp_answers )
							{
								for ( entry in elem.entries )
								{
									_RESULT.AppendStr('<td ');
									_RESULT.AppendStr('width=&quot;' + 150 +'&quot; ');
									_RESULT.AppendStr('bgcolor=&quot;#FFCC99&quot;>' + entry.value + '</td>');
								}
							}
							else
							{
								_RESULT.AppendStr('<td ');
								_RESULT.AppendStr('width=&quot;' + 150 +'&quot; ');
								_RESULT.AppendStr('bgcolor=&quot;#FFCC99&quot;>' + ms_tools.get_const( 'c_question' ) + '</td>');
							}

							if ( oParams.show_comments_in_report )
							{
								_RESULT.AppendStr('<td ');
								_RESULT.AppendStr('width=&quot;' + 150 +'&quot; ');
								_RESULT.AppendStr('bgcolor=&quot;#FFCC99&quot;>' + ms_tools.get_const( 'vkpb_comment' ) + '</td>');
							}
						}
	
						_RESULT.AppendStr('</tr>');
					}


					for ( elem in ( oParams.run_export ? arrData.polls : arrData.poll_results ) )
					{
						_RESULT.AppendStr('&lt;tr valign=&quot;top&quot;&gt;');
						_RESULT.AppendStr('<td width=&quot;150&quot;>' + elem.person_fullname + '</td>');
						_RESULT.AppendStr('<td width=&quot;150&quot;>' + elem.person_code + '</td>');
						_RESULT.AppendStr('<td width=&quot;150&quot;>' + elem.start_date + '</td>');

						for ( question in elem.questions )
						{
							if ( oParams.disp_answers )
							{
								for ( entry in question.entries )
								{
									_RESULT.AppendStr('<td width=&quot;150&quot; align=&quot;center&quot; bgcolor=&quot;' + ( entry.value != '' ? '#e6ffe6' : '#ffffff' ) + '&quot;>' + entry.value + '</td>');
								}
							}
							else
							{
								_RESULT.AppendStr('<td width=&quot;150&quot;>' + question.answers + '</td>');
							}

							if ( oParams.show_comments_in_report )
							{
								_RESULT.AppendStr('<td width=&quot;150&quot;>' + question.comment + '</td>');
							}
						}

						_RESULT.AppendStr('</tr>');
					}


					break;

				default:

					_RESULT.AppendStr('&lt;tr valign=&quot;top&quot;&gt;');

					for ( elem in arrColumns )
					{
						_RESULT.AppendStr('<td ');
						_RESULT.AppendStr('width=&quot;' + 150 +'&quot; ');
						_RESULT.AppendStr('bgcolor=&quot;#FFCC99&quot;>' + elem.title + '</td>');
					}

					_RESULT.AppendStr('</tr>');

					for ( elem in arrData )
					{
						_RESULT.AppendStr('<tr valign=&quot;top&quot;>');

						for ( i = 0; i < ArrayCount( arrColumns ); i++ )
						{
							try
							{
								fld = elem.GetOptProperty( arrColumns[i].name )
							}
							catch( ex )
							{
								try
								{
									fld = elem.GetOptChildByKey( arrColumns[i].name )
								}
								catch( ex )
								{
									fld = undefined;
								}
							}

							_RESULT.AppendStr('<td width=&quot;150&quot;>' + ( fld != undefined ? fld : '' ) + '</td>');
						}

						_RESULT.AppendStr('</tr>');
					}
			}

			_RESULT.AppendStr('</table></body></html>');
		}

		sHTMLReport = _RESULT.GetStr();

		var sResourceUrl;

		sDateTime = StrReplace( StrReplace( StrDate( Date(), true, true ), ':', '_' ), ' ', '_' );

		var sReportFilePath = 'x-local://' + ( bIsWebClient ? 'share' : 'trash/temp' ) + '/' + sReportName + '_' + sDateTime + ' (' + tools.random_string( 4 ) + ').' + sOutType;

		switch ( sOutType )
		{
			case 'pdf':

					sResourceUrl = ObtainTempFile( '.pdf' );
					tools.html_to_pdf( sHTMLReport, '', UrlToFilePath( sResourceUrl ) );

				break;

			case 'docx':

					sResourceUrl = ObtainTempFile( '.docx' );
					oWordDoc = tools.get_object_assembly( 'Word' );
					oWordDoc.OpenHTML( sHTMLReport );
					oWordDoc.SaveAs( UrlToFilePath( sResourceUrl ) );

				break;
	
			case 'xlsx':

					var oXLSX = tools.get_object_assembly( 'Excel' );
					oXLSX.LoadHtmlString( sHTMLReport, '');
					//sResourceUrl = ObtainTempFile( '.xlsx' );
					sResourceUrl = ObtainSessionTempFile( '.xlsx' );

					try
					{
						oXLSX.SaveAs( UrlToFilePath( sResourceUrl ), true );
					}
					catch( ex )
					{
						oXLSX.SaveAs( UrlToFilePath( sResourceUrl ) );
					}

				break;

			case 'html':

					sResourceUrl = ObtainTempFile( '.html' );
					PutUrlText( sResourceUrl, sHTMLReport );

				break;

			default:

				if ( sFileUrl != undefined )
					sResourceUrl = sFileUrl;
				else
					sResourceUrl = ObtainTempFile( '.xlsx' );

				PutUrlData( sResourceUrl, sHTMLReport );

				break;
		}

		if ( sReportFilePath != undefined )
		{
			tools.copy_url( sReportFilePath, sResourceUrl );
			DeleteUrl( sResourceUrl );
		}
		else
			sReportFilePath = sResourceUrl;

		return sReportFilePath

	"/>

	<read_report_settings PROPERTY="1" PARAM="sReportName" PARAM="oTopElem" PARAM="arrParams" ALLOW-CALL-FROM-CLIENT="1" EXPR="

		arrResult = new Array();

		if ( oTopElem != undefined && oTopElem != null )
		{
			bIgnoreParamsArray = true;
		}
		else if ( arrParams != undefined && arrParams != null && ArrayCount( arrParams ) > 0 )
		{
			bIgnoreParamsArray = false;
		}
		else
		{
			bIgnoreParamsArray = true;
		}

		try
		{
			fldReportLocalSettings = local_settings.custom_datas.ObtainChildByKey( sReportName );

			oReportParams = tools.read_object( fldReportLocalSettings.value );

			if ( bIgnoreParamsArray )
			{
				for ( i = 0; i < oTopElem.ChildNum; i++ )
				{
					curParam = oReportParams.GetOptProperty( oTopElem.Child( i ).Name );
					if ( curParam != undefined )
					{
						arrResult.push( { 'name' : oTopElem.Child( i ).Name, 'value' : curParam } )
					}
				}
			}
			else
			{
				for ( sParam in arrParams )
				{
					curParam = oReportParams.GetOptProperty( sParam );
					if ( curParam != undefined )
					{
						arrResult.push( { 'name' : sParam, 'value' : curParam } )
					}
				}
			}

			return arrResult;
		}
		catch( e )
		{
			alert( 'tools_report.read_report_settings error: ' + e );
		}
	"/>

	<save_report_settings PROPERTY="1" PARAM="sReportName" PARAM="arrParams" ALLOW-CALL-FROM-CLIENT="1" EXPR="

		try
		{
			fldReportLocalSettings = local_settings.custom_datas.ObtainChildByKey( sReportName );

			oReportParams = tools.read_object( fldReportLocalSettings.value );

			for ( oParam in arrParams )
			{
				oReportParams.SetProperty( oParam.name, oParam.value );
			}

			fldReportLocalSettings.value = tools.object_to_text( oReportParams, 'json' );

			local_settings.Doc.SetChanged( true );
		}
		catch( e )
		{
			alert( 'tools_report.save_report_settings error: ' + e );
		}
	"/>

	<ExcelColumnsList PROPERTY="1" EXPR="['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','AA','AB','AC','AD','AE','AF','AG','AH','AI','AJ','AK','AL','AM','AN','AO','AP','AQ','AR','AS','AT','AU','AV','AW','AX','AY','AZ','BA','BB','BC','BD','BE','BF','BG','BH','BI','BJ','BK','BL','BM','BN','BO','BP','BQ','BR','BS','BT','BU','BV','BW','BX','BY','BZ','CA','CB','CC','CD','CE','CF','CG','CH','CI','CJ','CK','CL','CM','CN','CO','CP','CQ','CR','CS','CT','CU','CV','CW','CX','CY','CZ','DA','DB','DC','DD','DE','DF','DG','DH','DI','DJ','DK','DL','DM','DN','DO','DP','DQ','DR','DS','DT','DU','DV','DW','DX','DY','DZ']"/>

	<MaxReportVisibleRows PROPERTY="1" EXPR="(global_settings.settings.ChildExists('max_report_visible_rows')?global_settings.settings.max_report_visible_rows:5000)"/>
	<MaxWorksheetRows PROPERTY="1" EXPR="900000"/>

	<bIsLinux PROPERTY="1" EXPR="tools.os_type=='linux'"/>

	<!-- Персонал -->
	<not_studied_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" EXPR="

		oResult = new Object();
		oResult.error = 0;
		oResult.persons = [];
		oResult.immediate_export = false;
		oResult.exported_file_link = '';
		oResult.rows_count = 0;

		arrResult = new Array();

		if ( oParams == null || oParams == undefined )
		{
			oResult.error = 1;
		}

		function fnAddLearning( catPersonParam, bIDFlagParam )
		{
			oTempPerson = {};
			oTempPerson.person_id = catPersonParam.PrimaryKey.Value;
			oTempPerson.position_parent_name = '';
			oTempPerson.last_usage_date = '';

			if ( bIDFlagParam )
			{
				catPerson = ArrayOptFirstElem( XQuery( 'for $elem in collaborators where $elem/id = ' + catPersonParam + ' return $elem' ) );
				if ( catPerson != undefined )
				{
					oTempPerson.fullname = catPerson.fullname.Value;
					oTempPerson.code = catPerson.code.Value;
					oTempPerson.position_name = catPerson.position_name.Value;

					if ( bDispFullPath )
						oTempPerson.position_parent_name = tools.person_list_staff_by_person_id( catPerson.id );
				}
			}
			else
			{
				oTempPerson.fullname = catPerson.fullname.Value;
				oTempPerson.code = catPerson.code.Value;
				oTempPerson.position_name = catPerson.position_name.Value;

				if ( bDispFullPath )
					oTempPerson.position_parent_name = tools.person_list_staff_by_person_id( catPerson.id );

			}

			if ( catFirstElem != undefined && catFirstElem.ChildExists( 'last_usage_date' ) )
				oTempPerson.last_usage_date = catFirstElem.last_usage_date.Value;

			return oTempPerson;
		}

		function fnAddLearnings( sCatalogNameParam, sConditionsParam, catPersonParam, bIDFlagParam, bAddFlagParam, bDispFullPath  )
		{
			oPerson = undefined;

			catFirstElem = ArrayOptFirstElem( XQuery( 'for $elem in ' + sCatalogNameParam + 's where $elem/person_id = ' + catPersonParam.PrimaryKey + ' and ' + sConditionsParam + ' return $elem' ) );

			if ( ( bAddFlagParam && catFirstElem == undefined && oParams.disp_study == 'no' ) || ( catFirstElem != undefined && oParams.disp_study != 'no' ) )
			{
				oPerson = fnAddLearning( catPersonParam, bIDFlagParam, bDispFullPath );
			}

			return oPerson;
		}

		xarrPersons = Array();
		sConditions = '';
		bIDFlag = false;

		var _vrole = 0;
		var arrSubordinateIDs = [];

		if ( ms_tools.check_access_block_rights( 'pers', 'read', CurAuthObject.id.Value ) )
		{
			_vrole = 10;
		}
		else if ( oParams.GetOptProperty( 'APPLICATION', '' ) != '' )
		{
			_vrole = tools.call_code_library_method( 'libApplication', 'GetPersonApplicationAccessLevel', [ CurAuthObject.id.Value, oParams.GetOptProperty( 'APPLICATION', '' ) ] );
			if ( _vrole == 1 || _vrole == 5 )
			{
				arrSubordinateIDs = tools.call_code_library_method( 'libMain', 'get_subordinate_records', [ CurAuthObject.id.Value, ['fact','func'], true, '', null, '', true, true, true, true, [], true ] );
				if ( ArrayCount( arrSubordinateIDs ) == 0 )
				{
					oResult.error = 0;
					return oResult;
				}
			}
		}

		if ( _vrole == 0 )
		{
			oResult.error = 0;
			return oResult;
		}

		if ( oParams.org_id != null || oParams.parent_object_id != null || oParams.group_id != null )
		{
			arrConditions = [];
			arrPersonsIDs = Array();

			if ( oParams.org_id != null || oParams.parent_object_id != null )
			{
				curNodeID = oParams.parent_object_id != null ? oParams.parent_object_id : oParams.org_id;
				arrPersonsIDs = ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( curNodeID ) );
			}

			if ( oParams.group_id != null )
			{
				teGroup = OpenDoc( UrlFromDocID( oParams.group_id ) ).TopElem;
				arrGroupPersonsIDs = ArrayExtract( teGroup.collaborators, 'collaborator_id' );
				arrPersonsIDs = ArrayOptFirstElem( arrPersonsIDs ) == undefined ? arrGroupPersonsIDs : ArrayIntersect( arrPersonsIDs, arrGroupPersonsIDs, 'This', 'This' );
			}

			if ( ArrayCount( arrSubordinateIDs ) &gt; 0 )
			{
				arrPersonsIDs = ArrayIntersect( arrPersonsIDs, arrSubordinateIDs, 'This', 'This' );
			}

			if ( ! oParams.show_dismiss )
				arrConditions.push( 'catPerson.is_dismiss == false' );

			if ( oParams.hire_date_start != null )
				arrConditions.push( 'catPerson.hire_date &gt;= oParams.hire_date_start' );

			if ( oParams.hire_date_finish != null )
				arrConditions.push( 'catPerson.hire_date &lt;= oParams.hire_date_finish' );

			if ( oParams.position_name != null )
				arrConditions.push( 'StrContains( catPerson.position_name, ' + CodeLiteral( oParams.position_name ) + ', true )' );

			sConditions = ArrayCount( arrConditions ) > 0 ? ArrayMerge( arrConditions, 'This', ' && ' ) : '';

			if ( sConditions != '' )
			{
				xarrPersons = XQuery( 'for $elem in collaborators where MatchSome( $elem/id, ( ' + ArrayMerge( arrPersonsIDs, 'This', ',' ) + ' ) ) return $elem' );
			}
			else
			{
				xarrPersons = arrPersonsIDs;
				bIDFlag = true;
			}
		}
		else
		{
			arrXQueryConditions = [];

			if ( ArrayCount( arrSubordinateIDs ) &gt; 0 )
			{
				arrXQueryConditions.push( 'MatchSome( $elem/id, (' + ArrayMerge( arrSubordinateIDs, 'This', ',' ) + ') )' );
			}

			if ( ! oParams.show_dismiss )
				arrXQueryConditions.push( '$elem/is_dismiss = false()' );

			if ( oParams.hire_date_start != null )
				arrXQueryConditions.push( '$elem/hire_date &gt;= ' + XQueryLiteral( oParams.hire_date_start ) );

			if ( oParams.hire_date_finish != null )
				arrXQueryConditions.push( '$elem/hire_date &lt;= ' + XQueryLiteral( oParams.hire_date_finish ) );

			if ( oParams.position_name != '' )
				arrXQueryConditions.push( 'contains( $elem/position_name, ' + XQueryLiteral( oParams.position_name ) + ' )' );

			sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

			xarrPersons = XQuery( 'for $elem in collaborators ' + sXQueryConditions + ' return $elem' );
		}

		if ( oParams.disp_person_list_staff )
			bDispFullPath = true;
		else
			bDispFullPath = false;

		arrXQueryConditions = [];

		if ( oParams.start_date != null )
			arrXQueryConditions.push( '$elem/' + ( oParams.learning_type == 'education_method' ? 'start_date' : 'start_usage_date' ) + ' &gt;= ' + XQueryLiteral( oParams.start_date ) );

		if ( oParams.finish_date != null )
			arrXQueryConditions.push( '$elem/' + ( oParams.learning_type == 'education_method' ? 'start_date' : 'start_usage_date' ) + ' &lt;= ' + XQueryLiteral( oParams.finish_date ) );

		sLearingCatalog = oParams.learning_type == 'assessment' ? 'test_learning' : ( oParams.learning_type == 'course' ? 'learning' : 'event_result' );

		if ( oParams.learning_type == 'education_method' )
		{
			if ( oParams.disp_learning_type == 'active' )
			{
				arrXQueryConditions.push( '$elem/status_id != \'close\' and $elem/status_id != \'cancel\'' );
			}
			else if ( oParams.disp_learning_type == 'finished' )
			{
				arrXQueryConditions.push( '$elem/status_id = \'close\'' );
			}

			arrXQueryConditions.push( '$elem/education_method_id = ' + oParams.method_id );

			sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

			xarrEvents = XQuery( 'for $elem in events ' + sXQueryConditions + ' return $elem' );
		}

		CheckCurThread();

		var progress = new TaskProgress;
		progress.TaskName = 'Идёт построение отчёта';

		for ( catPerson in xarrPersons )
		{
			if ( sConditions != '' && tools.safe_execution( sConditions ) == false )
				continue;

			if ( oParams.learning_type == 'education_method' )
			{
				catFirstElem = undefined;

				bAddFlag = oParams.disp_study == 'no';

				for ( catEventElem in xarrEvents )
				{
					catFirstElem = ArrayOptFirstElem( XQuery( 'for $elem in event_results where $elem/person_id = ' + catPerson.PrimaryKey + ' and $elem/event_id = ' + catEventElem.PrimaryKey + ' and $elem/is_assist = true() return $elem' ) );
					if ( catFirstElem != undefined )
					{
						bAddFlag = oParams.disp_study != 'no';
						break;
					}
				}

				if ( bAddFlag )
				{
					oResult.persons.push( fnAddLearning( catPerson, bIDFlag, bDispFullPath ) );
				}
			}
			else
			{
				bAddFlag = undefined;

				if ( StrContains( oParams.disp_learning_type, 'active', true ) )
				{
 					oPerson = fnAddLearnings( 'active_' + sLearingCatalog, '$elem/' + oParams.learning_type + '_id = ' + oParams.method_id, catPerson, bIDFlag, false, bDispFullPath );

					if ( oPerson != undefined )
					{
						oResult.persons.push( oPerson );
					}

					bAddFlag = oPerson;
				}

				if ( bAddFlag == undefined && StrContains( oParams.disp_learning_type, 'finished', true ) )
				{
					oPerson = fnAddLearnings( sLearingCatalog, '$elem/' + oParams.learning_type + '_id = ' + oParams.method_id, catPerson, bIDFlag, true, bDispFullPath );

					if ( oPerson != undefined )
					{
						oResult.persons.push( oPerson );
					}
				}
			}
		}

		if ( ArrayCount( oResult.persons ) > oParams.max_visible_rows )
		{
			oResult.immediate_export = true;
			oResult.rows_count = ArrayCount( oResult.persons );
		}

		oResult.exported_file_link = tools_report.save_report_to_file( '', oParams.report_name, 'xlsx', '', oParams.bIsWebClient, oParams.columns, oResult.persons );

		return oResult;
	"/>

	<not_certified_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" EXPR="

		oResult = new Object();
		oResult.error = 0;
		oResult.persons = [];

		arrResult = new Array();

		if ( oParams == null || oParams == undefined )
		{
			oResult.error = 1;
		}

		arrCommonPositions = XQuery( 'for $elem in position_commons return $elem' );

		arrPositions = Array();
		arrPositionIDs = Array();
		arrPersons = Array();
		arrCertificatesTypesIDs = Array();

		iCounter = 0;

		for ( catCommonPosition in arrCommonPositions )
		{
			try
			{
				teCommonPosition = OpenDoc( UrlFromDocID( catCommonPosition.id ) ).TopElem;

				if ( ( oParams.certificate_type_id == null && ArrayCount( teCommonPosition.certificate_types ) > 0 ) || ( oParams.certificate_type_id != null && teCommonPosition.certificate_types.ChildByKeyExists( oParams.certificate_type_id )))
				{
					arrPositions = ArrayUnion( arrPositions, XQuery( 'for $elem in positions where $elem/position_common_id = ' + catCommonPosition.id + ' return $elem' ));

					if ( oParams.certificate_type_id == null )
					{
						for ( fldCertificateType in teCommonPosition.certificate_types )
						{
							arrCertificatesTypesIDs[ iCounter ] = fldCertificateType.certificate_type_id;
							iCounter++;
						}
					}
				}
			}
			catch( ee )
			{
				alert( ee );
			}
		}

		arrPositions = ArraySelectDistinct( arrPositions, 'id' );

		iCounter = 0;

		for ( catPosition in arrPositions )
		{
			if ( catPosition.basic_collaborator_id.HasValue && catPosition.basic_collaborator_id.OptForeignElem != undefined )
			{
				arrPositionIDs[ iCounter ] = catPosition.basic_collaborator_id;
				iCounter++;
			}
		}

		var _vrole = 0;
		var arrSubordinateIDs = [];

		if ( ms_tools.check_access_block_rights( 'pers', 'read', CurAuthObject.id.Value ) )
		{
			_vrole = 10;
		}
		else if ( oParams.GetOptProperty( 'APPLICATION', '' ) != '' )
		{
			_vrole = tools.call_code_library_method( 'libApplication', 'GetPersonApplicationAccessLevel', [ CurAuthObject.id.Value, oParams.GetOptProperty( 'APPLICATION', '' ) ] );
			if ( _vrole == 1 || _vrole == 5 )
			{
				arrSubordinateIDs = tools.call_code_library_method( 'libMain', 'get_subordinate_records', [ CurAuthObject.id.Value, ['fact','func'], true, '', null, '', true, true, true, true, [], true ] );
				if ( ArrayCount( arrSubordinateIDs ) == 0 )
				{
					oResult.error = 0;
					return oResult;
				}
			}
		}

		if ( _vrole == 0 )
		{
			oResult.error = 0;
			return oResult;
		}

		if ( ArrayCount( arrSubordinateIDs ) &gt; 0 )
		{
			arrPositionIDs = ArrayIntersect( arrPositionIDs, arrSubordinateIDs, 'This', 'This' );
		}

		arrCertificatesTypesIDs = ArraySelectDistinct( arrCertificatesTypesIDs );

		arrPersons = XQuery( 'for $elem in collaborators where MatchSome( $elem/id, ( ' + ArrayMerge( arrPositionIDs, 'This', ',' ) + ' ) ) return $elem' );

		arrValidCertificates = Array();

		if ( oParams.certificate_type_id != null )
			arrValidCertificates = XQuery( 'for $elem in certificates where $elem/type_id = ' + oParams.certificate_type_id + ' and $elem/valid=true() return $elem' );
		else
		{
			for ( iCertificateTypeID in arrCertificatesTypesIDs )
				arrValidCertificates = ArrayUnion( arrValidCertificates, XQuery( 'for $elem in certificates where $elem/type_id = ' + iCertificateTypeID + ' and $elem/valid=true() return $elem' ) );
		}

		arrValidCertificates = ArraySelectDistinct( arrValidCertificates, 'person_id' );

		arrNotCertified = Array();

		CheckCurThread();

		var progress = new TaskProgress;
		progress.TaskName = 'Строим отчет';
		//progress.ItemCount = ArrayCount( arrPersons );
		//progress.CurrentItemIndex = 0;

		for ( catPerson in arrPersons )
		{
			////progress.CurrentItemName = catPerson.fullname;

			bHasCertificate = false;

			for ( catValidCertificate in arrValidCertificates )
			{
				if ( catPerson.id == catValidCertificate.person_id )
					bHasCertificate = true;
			}

			if ( ! bHasCertificate )
			{
				oTempPerson = {};
				oTempPerson.person_id = catPerson.id.Value;
				oTempPerson.fullname = catPerson.fullname.Value;
				oTempPerson.code = catPerson.code.Value;
				oTempPerson.position_name = catPerson.position_name.Value;
				oTempPerson.position_parent_name = catPerson.position_parent_name.Value;

				oResult.persons.push( oTempPerson );
			}

			//progress.CurrentItemIndex++;
		}

		return oResult;
	"/>

	<qualification_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" EXPR="

		oResult = new Object();
		oResult.error = 0;
		oResult.qualifications = [];

		arrResult = new Array();

		if ( oParams == null || oParams == undefined )
		{
			oResult.error = 1;
		}

		var arrXQueryConditions = [];
		var arrXQueryConditionsTemp = [];

		if ( oParams.qualification_id != null )
			arrXQueryConditions.push( '$qualification/qualification_id = ' + oParams.qualification_id );

		if ( oParams.assignment_date_start_date != null )
			arrXQueryConditions.push( '$qualification/assignment_date >= date( \'' + oParams.assignment_date_start_date + '\' )' );

		if ( oParams.assignment_date_finish_date != null )
			arrXQueryConditions.push( '$qualification/assignment_date <= date( \'' + oParams.assignment_date_finish_date + '\' )' );

		if ( oParams.expiration_date_start_date != null )
			arrXQueryConditions.push( '$qualification/expiration_date >= date( \'' + oParams.expiration_date_start_date + '\' )' );

		if ( oParams.expiration_date_finish_date != null )
			arrXQueryConditions.push( '$qualification/expiration_date <= date( \'' + oParams.expiration_date_finish_date + '\' )' );

		if ( oParams.status != null && Trim( oParams.status ) != '' )
			arrXQueryConditions.push( '$qualification/status = \'' + oParams.status + '\'' );

		var _vrole = 0;
		var arrSubordinateIDs = [];

		if ( ms_tools.check_access_block_rights( 'pers', 'read', CurAuthObject.id.Value ) )
		{
			_vrole = 10;
		}
		else if ( oParams.GetOptProperty( 'APPLICATION', '' ) != '' )
		{
			_vrole = tools.call_code_library_method( 'libApplication', 'GetPersonApplicationAccessLevel', [ CurAuthObject.id.Value, oParams.GetOptProperty( 'APPLICATION', '' ) ] );
			if ( _vrole == 1 || _vrole == 5 )
			{
				arrSubordinateIDs = tools.call_code_library_method( 'libMain', 'get_subordinate_records', [ CurAuthObject.id.Value, ['fact','func'], true, '', null, '', true, true, true, true, [], true ] );
				if ( ArrayCount( arrSubordinateIDs ) == 0 )
				{
					oResult.error = 0;
					return oResult;
				}
			}
		}

		if ( _vrole == 0 )
		{
			oResult.error = 0;
			return oResult;
		}

		arrPersons = Array();
		arrGroupPersonsIDs = new Array();
		arrQualifications = new Array();

		if ( oParams.org_id != null || oParams.parent_object_id != null )
		{
			curNodeID = ( oParams.parent_object_id != null ? oParams.parent_object_id : oParams.org_id );

			if ( oParams.hier_sub_select )
			{
				arrPersonsIDs = ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( curNodeID ) );
			}
			else
			{
				arrSubs = XQuery( 'for $elem in subs where $elem/parent_id = ' + curNodeID + ' and $elem/type=&quot;position&quot; return $elem' );

				arrPersonsIDs = Array();

				count = 0;

				for ( catSub in arrSubs )
				{
					if ( catSub.basic_collaborator_id != null )
					{
						arrPersonsIDs[ count ] = catSub.basic_collaborator_id;
						count++;
					}
				}

				arrPersonsIDs = ArraySelectDistinct( arrPersonsIDs );
			}

			if ( ArrayCount( arrSubordinateIDs ) &gt; 0 )
			{
				arrPersonsIDs = ArrayIntersect( arrPersonsIDs, arrSubordinateIDs, 'This', 'This' );
			}

			arrPersons = XQuery( 'for $elem in collaborators where MatchSome ( $elem/id, ( ' + ArrayMerge( arrPersonsIDs, 'This', ',' ) + ' ) ) return $elem' );
		}


		if ( oParams.group_id != null )
		{
			arrGroupPersonsIDs = new Array();

			docGroup = tools.open_doc( oParams.group_id );
			if ( docGroup != undefined )
			{
				arrGroupPersonsIDs = ArrayExtract( docGroup.TopElem.collaborators, 'collaborator_id' );

				arrPersons = XQuery( 'for $elem in collaborators where MatchSome ( $elem/id, ( ' + ArrayMerge( arrGroupPersonsIDs, 'This', ',' ) + ' ) ) return $elem' );
			}
		}

		if ( oParams.person_id != null )
		{
			if ( ArrayCount( arrSubordinateIDs ) &gt; 0 &amp;&amp; ArrayOptFind( arrSubordinateIDs, 'OptInt( This, 0 ) == OptInt( oParams.person_id, 999 )' ) == undefined )
			{
				return oResult;
			}
			if ( ArrayCount( arrPersons ) > 0 )
			{
				arrPersons = ArraySelect( arrPersons, 'id == oParams.person_id');
			}
			else if ( ! ( oParams.org_id != null || oParams.parent_object_id != null || oParams.group_id != null ) )
			{
				arrPersons = XQuery( 'for $elem in collaborators where $elem/id = ' + oParams.person_id + ' return $elem' );
			}
		}

		if ( oParams.org_id != null || oParams.parent_object_id != null || oParams.group_id != null || oParams.person_id != null )
		{
			for ( catPerson in arrPersons )
			{
				if ( catPerson.id != null )
				{
					arrXQueryConditionsTemp = [];
					arrXQueryConditionsTemp = ArrayUnion( arrXQueryConditionsTemp, arrXQueryConditions );

					arrXQueryConditionsTemp.push( '$qualification/person_id = ' + catPerson.id );

					sXQueryConditionsTemp = ArrayCount( arrXQueryConditionsTemp ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditionsTemp, 'This', ' and ' ) : '';

					arrQualifications = ArrayUnion( arrQualifications, XQuery( 'for $qualification in qualification_assignments ' + sXQueryConditionsTemp + ' return $qualification' ) );
				}
			}
		}
		else
		{
			if ( ArrayCount( arrSubordinateIDs ) &gt; 0 )
			{
				arrXQueryConditions.push( 'MatchSome( $qualification/person_id, (' + ArrayMerge( arrSubordinateIDs, 'This', ',' ) + ') )' );
			}
			sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

			arrQualifications = XQuery( 'for $qualification in qualification_assignments ' + sXQueryConditions + ' return $qualification' );
		}

		CheckCurThread();

		var progress = new TaskProgress;
		progress.TaskName = 'Строим отчет';
		//progress.ItemCount = ArrayCount( arrQualifications );
		//progress.CurrentItemIndex = 0;

		for ( catQualification in arrQualifications )
		{
			////progress.CurrentItemName = catQualification.person_fullname;

			oTempQualification = {};
			oTempQualification.id = catQualification.id.Value;
			oTempQualification.qualification_id = catQualification.qualification_id.Value;
			oTempQualification.person_list_staff = '';

			try
			{
				oTempQualification.code = catQualification.person_id.ForeignElem.code.Value;
			}
			catch( ex )
			{
				oTempQualification.code = ms_tools.get_const( 'jmkcjvkz8n' );
			}

			if ( oParams.disp_person_list_staff )
				oTempQualification.person_list_staff = tools.person_list_staff_by_person_id( catQualification.person_id );

			oTempQualification.person_id = catQualification.person_id.Value;
			oTempQualification.person_fullname = catQualification.person_fullname.Value;
			oTempQualification.person_position_name = catQualification.person_position_name.Value;
			oTempQualification.person_subdivision_name = catQualification.person_subdivision_name.Value;
			oTempQualification.assignment_date = catQualification.assignment_date.Value;
			oTempQualification.expiration_date = catQualification.expiration_date.Value;
			oTempQualification.status = catQualification.status.Value;

			oResult.qualifications.push( oTempQualification );

			//progress.CurrentItemIndex++;
		}

		return oResult;
	"/>

	<statistic_report PROPERTY="1" PARAM="_param_str" ALLOW-CALL-FROM-CLIENT="1" EXPR="

		if ( ! LdsIsServer )
			return CallServerMethod( 'tools_report', 'statistic_report', [ RValue( _param_str ),  ] );

		var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.statistic_report;
		dataForm = OpenNewDoc( 'x-local://wtv/wtv_form_table_data.xmd' ).TopElem;
		bShowAlert=(_params.show_alert)


		sWhere = '';
		if (ArrayOptFirstElem(_params.statistic_recs)!=undefined)
		{
			for (fldStatisticRec in _params.statistic_recs)
			{
				sWhere += ( sWhere == '' ? '' : ' or ' ) + ' $elem/statistic_rec_id = ' + fldStatisticRec.statistic_rec_id ;
			}

			if (sWhere!='')
			{
				sWhere='('+sWhere+')'
			}
		}

		dStartDate = null
		dEndDate = null
		if ( _params.period_type.HasValue )
			sWhere += ( sWhere == '' ? ' ' : ' and ' ) + '$elem/period_type = \'' + _params.period_type + '\'';
		if ( _params.start_date.HasValue )
		{
			sWhere += ( sWhere == '' ? ' ' : ' and ' ) + '$elem/creation_date &gt;= date(\'' + _params.start_date+'\') ';
			dStartDate = _params.start_date
		}
		if ( _params.finish_date.HasValue )
		{
			sWhere += ( sWhere == '' ? ' ' : ' and ' ) + '$elem/creation_date &lt;= date(\'' + _params.finish_date+'\') ';
			dEndDate = _params.start_date
		}


		if ( sWhere != '' )
			sWhere = ' where' + sWhere;
		sQuery='for $elem in statistic_datas '+ sWhere + ' return $elem'
		if ( bShowAlert ) alert(sQuery)
		xarrStatisticData = XQuery( sQuery );

		arrStatisticDataIDs=ArraySelectDistinct(xarrStatisticData,'This.statistic_rec_id')
		for ( catStatisticDataElem in xarrStatisticData )
		{
			_child = dataForm.rs.AddChild();

			fldNewColumn=_child.cs.AddChild();
			fldNewColumn.name = 'id';
			fldNewColumn.t = catStatisticDataElem.statistic_rec_id;
			fldNewColumn.cl = catStatisticDataElem.id;

			for (fldColunm in _params.columns)
			{
				fldNewColumn=_child.cs.AddChild();
				fldNewColumn.name = fldColunm.name;

				switch( fldColunm.name )
				{
					case '0':
							fldNewColumn.t = catStatisticDataElem.statistic_rec_id.OptForeignElem!=undefined?catStatisticDataElem.statistic_rec_id.OptForeignElem.name:global_settings.object_deleted_str;
							break;
					case '1':
							sPeriodType=catStatisticDataElem.period_type
							strDispDate='';
							newDate=null
							iSecond=0
							iMinute=catStatisticDataElem.period_minute.HasValue?catStatisticDataElem.period_minute.Value:0;
							iHour=catStatisticDataElem.period_hour.HasValue?catStatisticDataElem.period_hour.Value:0;
							iDay=catStatisticDataElem.period_day.HasValue?catStatisticDataElem.period_day.Value:1;
							iMonth=catStatisticDataElem.period_month.HasValue?catStatisticDataElem.period_month.Value:1;
							iYear=catStatisticDataElem.period_year.HasValue?catStatisticDataElem.period_year.Value:2000;

							if (sPeriodType=='day')
							{
								strDispDate = StrInt(OptInt(catStatisticDataElem.period_day.Value,1), 2)+' '+common.perioditys.GetChildByKey( sPeriodType ).name;
							}
							else if(sPeriodType=='month' || sPeriodType=='week')
							{
								strDispDate = StrInt(OptInt(catStatisticDataElem.period_month.Value,1), 2) + ' '+common.perioditys.GetChildByKey( sPeriodType ).name +' '+catStatisticDataElem.period_year;
							}
							else if(sPeriodType=='halfyear')
							{
								if (catStatisticDataElem.statistic_date.HasValue)
								{
									strDispDate = (Month(catStatisticDataElem.statistic_date) < 7 ? '1' : '2') + ' ' + common.perioditys.GetChildByKey( sPeriodType ).name + ' ' + catStatisticDataElem.period_year;
									iMonth= (Month(catStatisticDataElem.statistic_date) < 7 ? 1 : 7)
								}
							}
							else if (sPeriodType=='quarter')
							{
								strDispDate = catStatisticDataElem.period_quarter + ms_tools.get_const( 'kvartal_1' ) + ' ' + catStatisticDataElem.period_year;
								if (catStatisticDataElem.period_quarter>=4)
								{
									iMonth=10
								}
								else if (catStatisticDataElem.period_quarter>=3)
								{
									iMonth=7
								}
								else if (catStatisticDataElem.period_quarter>=2)
								{
									iMonth=4
								}
								else if (catStatisticDataElem.period_quarter>=1)
								{
									iMonth=1
								}
							}
							else if (sPeriodType=='year')
							{
								strDispDate=catStatisticDataElem.period_year.Value;
							}
							else if (sPeriodType=='minute')
							{
								strDispDate = StrInt(OptInt(catStatisticDataElem.period_minute.Value,0),2)+' '+common.perioditys.GetChildByKey( sPeriodType ).name;
							}
							else if (sPeriodType=='hour')
							{
								strDispDate=catStatisticDataElem.period_hour.Value+' '+common.perioditys.GetChildByKey( sPeriodType ).name;
							}
							else
							{
								if (catStatisticDataElem.statistic_date.HasValue)
								{
									if(dStartDate != null && dEndDate != null && (DateToRawSeconds(dEndDate) - DateToRawSeconds(dStartDate) < 86400) )
									{
										strDispDate = StrTime(catStatisticDataElem.statistic_date);
									}
									else
									{
										strDispDate=StrDate(catStatisticDataElem.statistic_date,true,false);
									}
									newDate=catStatisticDataElem.statistic_date.Value
								}
							}
							fldNewColumn.t = strDispDate;
							if (newDate==null)
							{
								try
								{
									newDate=DateNewTime(Date( iYear, iMonth, iDay ),iHour,iMinute,iSecond)
								}
								catch(ex)
								{
								}
							}
							if (newDate!=null)
							{
								fldNewColumn.s = StrDate(newDate,true,true)
								fldNewColumn.r = DateToRawSeconds(newDate)
							}
							else
							{
								fldNewColumn.s=ms_tools.get_const('xcsb1rigln');
								fldNewColumn.r = 0;
							}

							break;
					case '2':
							fldNewColumn.t = fldNewColumn.r =  catStatisticDataElem.value;
							break;
				}
			}
		}

		for (fldStatisticData in arrStatisticDataIDs)
		{
			arrData=ArraySelect(dataForm.rs,'This.cs.GetChildByKey( \'id\',\'name\' ).t==\''+fldStatisticData.statistic_rec_id+'\'')
			arrData=ArraySort(arrData,'This.cs.GetChildByKey( \'1\',\'name\' ).r','+')
			oParamObject=new Object()
			oParamObject.show_graph=true
			oParamObject.graph_title=fldStatisticData.statistic_rec_id.OptForeignElem!=undefined?fldStatisticData.statistic_rec_id.OptForeignElem.name:global_settings.object_deleted_str;
			oParamObject.graph_type=_params.graph_type
			oParamObject.columns_array=ArraySelect(_params.columns,'This.name!=\'0\'')
			oParamObject.rows_array=arrData;
			oParamObject.Xdata_column_name='1';
			oParamObject.use_real_value=false
			oParamObject.bIncludeDataInFile=!_params.is_web_client

			//oParamObject.rows_array=arrCourseRows;
			fnCreateExcelFile(oParamObject,_params,dataForm)
		}


		if ( bShowAlert ) alert(dataForm.Xml)
		return dataForm.GetXml( { 'tabs': false } );
	"/>

	<!--Кафетерий-->
	<policy_type_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" EXPR="
    	var oResult = {
    	    ok: false,
    	    code: 'failure',
    	    result: []
    	}

    	if (oParams != null || oParams != undefined)
    	{
    	    var xGoodTypes = tools.xquery('for $elem in good_types where $elem/object_type = \'policy_type\' return $elem');
    	    if (ArrayCount(xGoodTypes) == 0)
    	    {
    	        oResult.code = 'dont_find_good_types';
    	        return oResult;
    	    }

    	    var filters = [];
    	    filters.push('MatchSome($elem/good_type_id, (' + ArrayMerge(xGoodTypes, 'id', ',') + '))');

    	    if (OptInt(oParams.good_id) != undefined)
    	        filters.push('$elem/id = ' + oParams.good_id);

    	    if (OptInt(oParams.policy_type_id) != undefined)
    	        filters.push('$elem/object_id = ' + oParams.policy_type_id);

    	    var xqFilters = ArrayCount(filters) > 0 ? ' where ' + ArrayMerge(filters, 'This', ' and ') : '';
    	    var xGoods = tools.xquery('for $elem in goods ' + xqFilters + ' return $elem');

    	    if (ArrayCount(xGoods) > 0)
    	    {
    	        filters = [];
    	        filters.push('MatchSome($elem/object_id, (' + ArrayMerge(xGoods, 'id', ',') + '))');
				filters.push('MatchSome($elem/request_type_id, (' + ArrayMerge(ArraySelect(ArraySelectDistinct(xGoodTypes,'This.request_type_id'),'This.request_type_id.HasValue'), 'request_type_id', ',') + '))');

    	        if (OptInt(oParams.collaborator_id) != undefined && OptInt(oParams.subdivision_id) == undefined)
    	            filters.push('$elem/person_id = ' + oParams.collaborator_id);
    	        else if (OptInt(oParams.subdivision_id) != undefined)
				{
					var xSubs = [];
					if (tools_web.is_true(oParams.is_subdivision_hierarchy))
						xSubs = tools.call_code_library_method('libGame', 'getXSubsDownHierarchy', [oParams.subdivision_id]);
					else
						xSubs = tools.call_code_library_method('libGame', 'getXSubs', [oParams.subdivision_id]);
					filters.push('MatchSome($elem/person_id, (' + ArrayMerge(xSubs, 'basic_collaborator_id', ',') + '))');
				}
				else if (OptInt(oParams.collaborator_id) == undefined && OptInt(oParams.subdivision_id) == undefined)
				{
					var collaboratorIDs = tools.call_code_library_method('libGame', 'GetPersonSubordinatesApp', [undefined, [], tools.get_cur_user().id, '', 'websoft_cafeteria']);
					if (ArrayCount(collaboratorIDs) > 0)
						filters.push('MatchSome($elem/person_id, (' + ArrayMerge(collaboratorIDs, 'This', ',') + '))');
				}


    	        if (OptInt(oParams.budget_period_id) != undefined)
    	            filters.push('$elem/budget_period_id = ' + oParams.budget_period_id);

				filters.push('$elem/status_id = ' + XQueryLiteral('pay'));

    	        xqFilters = ArrayCount(filters) > 0 ? ' where ' + ArrayMerge(filters, 'This', ' and ') : '';
    	        var xRequests = tools.xquery('for $elem in requests ' + xqFilters + ' return $elem');

    	        if (ArrayCount(xRequests) > 0)
    	        {
    	            CheckCurThread();
    	            var progress = new TaskProgress;
    	            progress.TaskName = 'Загружаем список полисов';
    	            //progress.ItemCount = ArrayCount(xRequests);
    	            //progress.CurrentItemIndex = 0;
    	            for (xRequest in xRequests)
    	            {
    	                //progress.CurrentItemName = xRequest.object_name;
    	                oRequest = {};
    	                oRequest.id = xRequest.object_id.Value;
    	                oRequest.name = xRequest.object_name.Value;
    	                oRequest.collaborator_id = xRequest.person_id.Value;
    	                oRequest.collaborator_fullname = xRequest.person_fullname.Value;
    	                oResult.result.push(oRequest);
    	                //progress.CurrentItemIndex++;
    	            }
    	            oResult.code = 'success';
    	        }
    	        else
    	            oResult.code = 'dont_find_requests';
    	    }
    	    else
    	        oResult.code = 'dont_find_goods';
    	}
    	return oResult;
	"/>

	<benefit_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" EXPR="
    	var oResult = {
    	    ok: false,
    	    code: 'failure',
    	    result: []
    	}

    	if (oParams != null || oParams != undefined)
    	{
    	    var xGoodTypes = tools.xquery('for $elem in good_types where $elem/object_type = \'benefit\' return $elem');
    	    if (ArrayCount(xGoodTypes) == 0)
    	    {
    	        oResult.code = 'dont_find_good_types';
    	        return oResult;
    	    }

    	    var filters = [];
    	    filters.push('MatchSome($elem/good_type_id, (' + ArrayMerge(xGoodTypes, 'id', ',') + '))');

    	    if (OptInt(oParams.good_id) != undefined)
    	        filters.push('$elem/id = ' + oParams.good_id);

    	    if (OptInt(oParams.benefit_id) != undefined)
    	        filters.push('$elem/object_id = ' + oParams.benefit_id);

    	    var xqFilters = ArrayCount(filters) > 0 ? ' where ' + ArrayMerge(filters, 'This', ' and ') : '';
    	    var xGoods = tools.xquery('for $elem in goods ' + xqFilters + ' return $elem');

    	    if (ArrayCount(xGoods) > 0)
    	    {
    	        filters = [];
    	        filters.push('MatchSome($elem/object_id, (' + ArrayMerge(xGoods, 'id', ',') + '))');
    	        filters.push('MatchSome($elem/request_type_id, (' + ArrayMerge(xGoodTypes, 'request_type_id', ',') + '))');

    	        if (OptInt(oParams.collaborator_id) != undefined && OptInt(oParams.subdivision_id) == undefined)
    	            filters.push('$elem/person_id = ' + oParams.collaborator_id);
    	        else if (OptInt(oParams.subdivision_id) != undefined)
				{
					var xSubs = [];
					if (tools_web.is_true(oParams.is_subdivision_hierarchy))
						xSubs = tools.call_code_library_method('libGame', 'getXSubsDownHierarchy', [oParams.subdivision_id]);
					else
						xSubs = tools.call_code_library_method('libGame', 'getXSubs', [oParams.subdivision_id]);
					filters.push('MatchSome($elem/person_id, (' + ArrayMerge(xSubs, 'basic_collaborator_id', ',') + '))');
				}
				else if (OptInt(oParams.collaborator_id) == undefined && OptInt(oParams.subdivision_id) == undefined)
				{
					var collaboratorIDs = tools.call_code_library_method('libGame', 'GetPersonSubordinatesApp', [undefined, [], tools.get_cur_user().id, '', 'websoft_cafeteria']);
					if (ArrayCount(collaboratorIDs) > 0)
						filters.push('MatchSome($elem/person_id, (' + ArrayMerge(collaboratorIDs, 'This', ',') + '))');
				}

    	        if (OptInt(oParams.budget_period_id) != undefined)
    	            filters.push('$elem/budget_period_id = ' + oParams.budget_period_id);

				filters.push('$elem/status_id = ' + XQueryLiteral('pay'));
    	        xqFilters = ArrayCount(filters) > 0 ? ' where ' + ArrayMerge(filters, 'This', ' and ') : '';
    	        var xRequests = tools.xquery('for $elem in requests ' + xqFilters + ' return $elem');

    	        if (ArrayCount(xRequests) > 0)
    	        {
    	            CheckCurThread();
    	            var progress = new TaskProgress;
    	            progress.TaskName = 'Загружаем список привилегий';
    	            //progress.ItemCount = ArrayCount(xRequests);
    	            //progress.CurrentItemIndex = 0;
    	            for (xRequest in xRequests)
    	            {
    	                //progress.CurrentItemName = xRequest.object_name;
    	                oRequest = {};
    	                oRequest.id = xRequest.object_id.Value;
    	                oRequest.name = xRequest.object_name.Value;
    	                oRequest.collaborator_id = xRequest.person_id.Value;
    	                oRequest.collaborator_fullname = xRequest.person_fullname.Value;
    	                oResult.result.push(oRequest);
    	                //progress.CurrentItemIndex++;
    	            }
    	            oResult.code = 'success';
    	        }
    	        else
    	            oResult.code = 'dont_find_requests';
    	    }
    	    else
    	        oResult.code = 'dont_find_goods';
    	}
    	return oResult;
	"/>

	<payment_type_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" EXPR="
    	var oResult = {
    	    ok: false,
    	    code: 'failure',
    	    result: []
    	}

    	if (oParams != null || oParams != undefined)
    	{
    	    var xGoodTypes = tools.xquery('for $elem in good_types where $elem/object_type = \'payment_type\' return $elem');
    	    if (ArrayCount(xGoodTypes) == 0)
    	    {
    	        oResult.code = 'dont_find_good_types';
    	        return oResult;
    	    }

    	    var filters = [];
    	    filters.push('MatchSome($elem/good_type_id, (' + ArrayMerge(xGoodTypes, 'id', ',') + '))');

    	    if (OptInt(oParams.good_id) != undefined)
    	        filters.push('$elem/id = ' + oParams.good_id);

    	    if (OptInt(oParams.payment_type_id) != undefined)
    	        filters.push('$elem/object_id = ' + oParams.payment_type_id);

    	    var xqFilters = ArrayCount(filters) > 0 ? ' where ' + ArrayMerge(filters, 'This', ' and ') : '';
    	    var xGoods = tools.xquery('for $elem in goods ' + xqFilters + ' return $elem');

    	    if (ArrayCount(xGoods) > 0)
    	    {
    	        filters = [];
    	        filters.push('MatchSome($elem/object_id, (' + ArrayMerge(xGoods, 'id', ',') + '))');
    	        filters.push('MatchSome($elem/request_type_id, (' + ArrayMerge(xGoodTypes, 'request_type_id', ',') + '))');

    	        if (OptInt(oParams.collaborator_id) != undefined && OptInt(oParams.subdivision_id) == undefined)
    	            filters.push('$elem/person_id = ' + oParams.collaborator_id);
    	        else if (OptInt(oParams.subdivision_id) != undefined)
				{
					var xSubs = [];
					if (tools_web.is_true(oParams.is_subdivision_hierarchy))
						xSubs = tools.call_code_library_method('libGame', 'getXSubsDownHierarchy', [oParams.subdivision_id]);
					else
						xSubs = tools.call_code_library_method('libGame', 'getXSubs', [oParams.subdivision_id]);
					filters.push('MatchSome($elem/person_id, (' + ArrayMerge(xSubs, 'basic_collaborator_id', ',') + '))');
				}
				else if (OptInt(oParams.collaborator_id) == undefined && OptInt(oParams.subdivision_id) == undefined)
				{
					var collaboratorIDs = tools.call_code_library_method('libGame', 'GetPersonSubordinatesApp', [undefined, [], tools.get_cur_user().id, '', 'websoft_cafeteria']);
					if (ArrayCount(collaboratorIDs) > 0)
						filters.push('MatchSome($elem/person_id, (' + ArrayMerge(collaboratorIDs, 'This', ',') + '))');
				}

    	        if (OptInt(oParams.budget_period_id) != undefined)
    	            filters.push('$elem/budget_period_id = ' + oParams.budget_period_id);

				filters.push('$elem/status_id = ' + XQueryLiteral('pay'));
				
    	        xqFilters = ArrayCount(filters) > 0 ? ' where ' + ArrayMerge(filters, 'This', ' and ') : '';
    	        var xRequests = tools.xquery('for $elem in requests ' + xqFilters + ' return $elem/id, $elem/__data');

    	        if (ArrayCount(xRequests) > 0)
    	        {
    	            CheckCurThread();
    	            var progress = new TaskProgress;
    	            progress.TaskName = 'Загружаем список привилегий';
    	            //progress.ItemCount = ArrayCount(xRequests);
    	            //progress.CurrentItemIndex = 0;
    	            for (xRequest in xRequests)
    	            {
						teRequest = tools.open_doc(xRequest.id.Value).TopElem;
    	                //progress.CurrentItemName = teRequest.object_name;
    	                oRequest = {};
    	                oRequest.id = teRequest.object_id.Value;
    	                oRequest.name = teRequest.object_name.Value;
    	                oRequest.collaborator_id = teRequest.person_id.Value;
    	                oRequest.collaborator_fullname = teRequest.person_fullname.Value;
						oRequest.date = StrDate(teRequest.create_date.Value, false, false);
						_sCurrencyName = '';
						if (lists.currency_types.GetOptChildByKey(teRequest.workflow_fields.ObtainChildByKey('currency').value) != undefined)
							_sCurrencyName = lists.currency_types.GetOptChildByKey(teRequest.workflow_fields.ObtainChildByKey('currency').value).name;
						oRequest.amount = teRequest.workflow_fields.ObtainChildByKey('amount').value.Value + ' ' + _sCurrencyName;
    	                oResult.result.push(oRequest);
    	                //progress.CurrentItemIndex++;
    	            }
    	            oResult.code = 'success';
    	        }
    	        else
    	            oResult.code = 'dont_find_requests';
    	    }
    	    else
    	        oResult.code = 'dont_find_goods';
    	}
    	return oResult;
	"/>

	<no_request_by_good_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" EXPR="
    	var oResult = {
    	    ok: false,
    	    code: 'failure',
    	    result: []
    	}

    	if (oParams != null || oParams != undefined)
    	{
			var filters = [];

    	    if (OptInt(oParams.subdivision_id) != undefined)
			{
				var xSubs = [];
				if (tools_web.is_true(oParams.is_subdivision_hierarchy))
					xSubs = tools.call_code_library_method('libGame', 'getXSubsDownHierarchy', [oParams.subdivision_id]);
				else
					xSubs = tools.call_code_library_method('libGame', 'getXSubs', [oParams.subdivision_id]);
				filters.push('MatchSome($elem/person_id, (' + ArrayMerge(xSubs, 'basic_collaborator_id', ',') + '))');
			}
			else
			{
				var collaboratorIDs = tools.call_code_library_method('libGame', 'GetPersonSubordinatesApp', [undefined, [], tools.get_cur_user().id, '', 'websoft_cafeteria']);
				if (ArrayCount(collaboratorIDs) > 0)
					filters.push('MatchSome($elem/person_id, (' + ArrayMerge(collaboratorIDs, 'This', ',') + '))');
			}

			var xqFilters = ArrayCount(filters) > 0 ? ' where ' + ArrayMerge(filters, 'This', ' and ') : '';
			var xBaskets = tools.xquery('for $elem in baskets ' + xqFilters + ' return $elem/id, $elem/__data');
		    if (ArrayCount(xBaskets) == 0)
    	    {
    	        oResult.code = 'dont_find_baskets';
    	        return oResult;
    	    }

    	    CheckCurThread();
    	    var progress = new TaskProgress;
    	    progress.TaskName = 'Загружаем список заявок';
    	    //progress.ItemCount = ArrayCount(xBaskets);
    	    //progress.CurrentItemIndex = 0;

    	    for (xBasket in xBaskets)
    	    {
				teBasket = tools.open_doc(xBasket.id.Value).TopElem;
				xCollaborator = ArrayOptFirstElem(tools.xquery('for $elem in collaborators where $elem/id = ' + OptInt(teBasket.person_id.Value, 0) + ' return $elem'));
				xqGoods = '';
				if (ArrayCount(teBasket.goods) > 0)
					xqGoods = 'MatchSome($elem/object_id, (' + ArrayMerge(teBasket.goods, 'good_id', ',') + '))';

				if (xqGoods != '')
				{
					xRequests = tools.xquery('for $elem in requests where MatchSome($elem/workflow_state, (\'st_7\', \'st_8\')) and ' + xqGoods + ' return $elem');
					for (good in teBasket.goods)
					{
						xRequest = ArrayOptFindByKey(xRequests, OptInt(good.good_id, 0), 'object_id');
						if (xRequest == undefined && xCollaborator != undefined)
						{
							//progress.CurrentItemName = good.good_id.ForeignElem.name.Value;
    	                	oRequest = {};
    	                	oRequest.id = good.good_id.Value;
    	                	oRequest.name = good.good_id.ForeignElem.name.Value;
							oRequest.amount = '';
							_sCurrencyName = '';
							if (lists.currency_types.GetOptChildByKey(teBasket.currency_type_id.Value) != undefined)
								_sCurrencyName = lists.currency_types.GetOptChildByKey(teBasket.currency_type_id.Value).name;
							xGood = ArrayOptFirstElem(tools.xquery('for $elem in goods where $elem/id = ' + OptInt(good.good_id.Value, 0) + ' return $elem/id, $elem/__data'));
							if (xGood != undefined)
							{
								docGood = tools.open_doc(xGood.id);
								if (docGood != undefined)
								{
									teGood = docGood.TopElem;
									cost = ArrayOptFindByKey(teGood.costs, teBasket.currency_type_id.Value, 'currency_type_id');
									if (cost != undefined)
										oRequest.amount = cost.sum.Value;
								}

							}
							oRequest.amount += oRequest.amount == '' ? 'Нет цены льготы в валюте корзины' : ' ' + _sCurrencyName;

    	                	oRequest.collaborator_id = xCollaborator.id.Value;
    	                	oRequest.collaborator_fullname = xCollaborator.fullname.Value;
							oRequest.collaborator_subdivision_id = xCollaborator.position_parent_id.Value;
							oRequest.collaborator_subdivision_name = xCollaborator.position_parent_name.Value;
							oRequest.collaborator_email = xCollaborator.email.Value;

    	                	oResult.result.push(oRequest);
							//progress.CurrentItemIndex++;
						}
						//progress.CurrentItemIndex++;
					}

					oResult.code = 'success';
				}
				else
    	            oResult.code = 'dont_find_goods';
    	    }
    	}
    	return oResult;
	"/>

	<transaction_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" EXPR="
    	var oResult = {
    	    ok: false,
    	    code: 'failure',
    	    result: []
    	}

    	if (oParams != null || oParams != undefined)
    	{
    	    var filters = [];

    	    if (OptDate(oParams.start_date) != undefined)
    	        filters.push('$elem/date &gt;= date(\'' + DateNewTime(oParams.start_date, 0, 0, 0) + '\')');

    	    if (OptDate(oParams.finish_date) != undefined)
    	        filters.push('$elem/date &lt;= date(\'' + DateNewTime(oParams.finish_date, 23, 59, 59) + '\')');

    	    if (OptInt(oParams.collaborator_id) != undefined && OptInt(oParams.subdivision_id) == undefined)
    	        filters.push('$elem/object_id = ' + oParams.collaborator_id);
    	    else if (OptInt(oParams.subdivision_id) != undefined)
			{
				var xSubs = [];
				if (tools_web.is_true(oParams.is_subdivision_hierarchy))
					xSubs = tools.call_code_library_method('libGame', 'getXSubsDownHierarchy', [oParams.subdivision_id]);
				else
					xSubs = tools.call_code_library_method('libGame', 'getXSubs', [oParams.subdivision_id]);
				filters.push('MatchSome($elem/object_id, (' + ArrayMerge(xSubs, 'basic_collaborator_id', ',') + '))');
			}
			else if (OptInt(oParams.collaborator_id) == undefined && OptInt(oParams.subdivision_id) == undefined)
			{
				var collaboratorIDs = tools.call_code_library_method('libGame', 'GetPersonSubordinatesApp', [undefined, [], tools.get_cur_user().id, '', 'websoft_cafeteria']);
				if (ArrayCount(collaboratorIDs) > 0)
					filters.push('MatchSome($elem/object_id, (' + ArrayMerge(collaboratorIDs, 'This', ',') + '))');
			}

    	    var xqFilters = ArrayCount(filters) > 0 ? ' where ' + ArrayMerge(filters, 'This', ' and ') : '';

    	    var xTransactions = tools.xquery('for $elem in transactions ' + xqFilters + ' order by $elem/object_id return $elem');
    	    if (ArrayCount(xTransactions) == 0)
    	    {
    	        oResult.code = 'dont_find_transactions';
    	        return oResult;
    	    }

    	    filters = [];
    	    filters.push('MatchSome($elem/id, (' + ArrayMerge(xTransactions, 'account_id', ',') + '))');

    	    if (oParams.currency_type_id != null && oParams.currency_type_id != 'all' && oParams.currency_type_id != '')
    	        filters.push('$elem/currency_type_id = \'' + oParams.currency_type_id + '\'');

			if (OptInt(oParams.budget_period_id) != undefined)
    	        filters.push('$elem/budget_period_id = ' + oParams.budget_period_id);

    	    xqFilters = ArrayCount(filters) > 0 ? ' where ' + ArrayMerge(filters, 'This', ' and ') : '';
    	    var xAccounts = tools.xquery('for $elem in accounts ' + xqFilters + ' order by $elem/currency_type_id return $elem');

    	    CheckCurThread();
    	    var progress = new TaskProgress;
    	    progress.TaskName = 'Загружаем список транзакций';
    	    //progress.ItemCount = ArrayCount(xTransactions);
    	    //progress.CurrentItemIndex = 0;

    	    for (xAccount in xAccounts)
    	    {
				curTransaction = {
    	        	collaborator_id: OptInt(ArrayOptFirstElem(xTransactions).object_id),
    	        	increase_amount: 0,
    	        	decrease_amount: 0
    	    	};
				for (xTransaction in xTransactions)
    	    	{
					if (xTransaction.account_id != xAccount.id)
						continue;
    	            //progress.CurrentItemName = xAccount.name.Value;
    	            oTransaction = {};
    	            oTransaction.id = xTransaction.id.Value;
    	            oTransaction.name = xTransaction.code.Value;
    	            oTransaction.date = StrDate(xTransaction.date.Value, false, false);
					oTransaction.increase_amount = 0;
					oTransaction.decrease_amount = 0;
    	            if (xTransaction.direction.Value == 1)
    	            {
    	                oTransaction.increase_amount = xTransaction.amount.Value;
    	                curTransaction.increase_amount += xTransaction.amount.Value;
    	            }
    	            else if (xTransaction.direction.Value == 2)
    	            {
    	                oTransaction.decrease_amount = xTransaction.amount.Value;
    	                curTransaction.decrease_amount += xTransaction.amount.Value;
    	            }

    	            oTransaction.collaborator_id = xAccount.object_id.Value;
    	            oTransaction.collaborator_fullname = xAccount.name.Value;
					_sCurrencyName = '';
						if (lists.currency_types.GetOptChildByKey(xAccount.currency_type_id.Value) != undefined)
							_sCurrencyName = lists.currency_types.GetOptChildByKey(xAccount.currency_type_id.Value).name;
    	            oTransaction.currency_type_id = _sCurrencyName;
    	            oResult.result.push(oTransaction);

				}
				//progress.CurrentItemIndex++;
    	        curTransaction.collaborator_id = OptInt(xTransaction.object_id);
    	        oTransaction = {
    	            id: '',
    	            name: '',
    	            date: '',
    	            increase_amount: curTransaction.increase_amount,
    	            decrease_amount: curTransaction.decrease_amount,
    	            collaborator_id: curTransaction.collaborator_id,
    	            collaborator_fullname: 'Итого:',
    	            currency_type_id: '',
    	        };
    	        oResult.result.push(oTransaction);
    	    }
    	    oResult.code = 'success';
    	}
    	return oResult;
	"/>

	<good_statistics_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" EXPR="
		var oResult = {
			ok: false,
			code: 'failure',
			result: []
		}

		if (oParams != null || oParams != undefined)
		{
			var filters = [];

			if (OptInt(oParams.good_id) != undefined)
					filters.push('$elem/id = ' + oParams.good_id);

			var xqFilters = ArrayCount(filters) > 0 ? ' where ' + ArrayMerge(filters, 'This', ' and ') : '';
			var xGoods = tools.xquery('for $elem in goods ' + xqFilters + ' return $elem');
			if (ArrayCount(xGoods) == 0)
			{
				oResult.code = 'dont_find_goods';
				return oResult;
			}


			filters = [];

			if (OptDate(oParams.start_date) != undefined)
				filters.push('$elem/create_date &gt;= date(\'' + DateNewTime(oParams.start_date, 0, 0, 0) + '\')');

			if (OptDate(oParams.finish_date) != undefined)
				filters.push('$elem/create_date &lt;= date(\'' + DateNewTime(oParams.finish_date, 23, 59, 59) + '\')');

			filters.push('MatchSome($elem/object_id, (' + ArrayMerge(xGoods, 'id', ',') + '))');
			if (OptInt(oParams.subdivision_id) != undefined)
			{
				var xSubs = [];
				if (tools_web.is_true(oParams.is_subdivision_hierarchy))
					xSubs = tools.call_code_library_method('libGame', 'getXSubsDownHierarchy', [oParams.subdivision_id]);
				else
					xSubs = tools.call_code_library_method('libGame', 'getXSubs', [oParams.subdivision_id]);
				filters.push('MatchSome($elem/person_id, (' + ArrayMerge(xSubs, 'basic_collaborator_id', ',') + '))');
			}
			else
			{
				var collaboratorIDs = tools.call_code_library_method('libGame', 'GetPersonSubordinatesApp', [undefined, [], tools.get_cur_user().id, '', 'websoft_cafeteria']);
				if (ArrayCount(collaboratorIDs) > 0)
					filters.push('MatchSome($elem/person_id, (' + ArrayMerge(collaboratorIDs, 'This', ',') + '))');
			}
			xqFilters = ArrayCount(filters) > 0 ? ' where ' + ArrayMerge(filters, 'This', ' and ') : '';
			var xRequests = tools.xquery('for $elem in requests ' + xqFilters + ' return $elem');
			var xBaskets = tools.xquery('for $elem in baskets return $elem/id, $elem/__data');

			CheckCurThread();
			var progress = new TaskProgress;
			progress.TaskName = 'Загружаем список льгот';
			//progress.ItemCount = ArrayCount(xGoods);
			//progress.CurrentItemIndex = 0;

			for (xGood in xGoods)
			{
				//progress.CurrentItemName = xGood.name;
				oGood = {};
				oGood.id = xGood.id.Value;
				oGood.name = xGood.name.Value;
				oGood.agreement_amount = 0;
				oGood.agreed_amount = 0;
				oGood.pay_amount = 0;
				oGood.cancel_amount = 0;
				oGood.reject_amount = 0;
				oGood.basket_amount = 0;
				for (xRequest in ArraySelect(xRequests, 'This.object_id == xGood.id'))
				{
					if (xRequest.workflow_state.Value == 'st_7')
						oGood.cancel_amount++;
					if (xRequest.workflow_state.Value == 'st_8')
						oGood.reject_amount++;
					if (xRequest.workflow_state.Value == 'st_5')
						oGood.agreed_amount++;
					if (xRequest.workflow_state.Value == 'st_6')
						oGood.pay_amount++;
					if (xRequest.workflow_state.Value == 'st_2' || xRequest.workflow_state.Value == 'st_3' || xRequest.workflow_state.Value == 'st_4')
						oGood.agreement_amount++;
				}
				for (xBasket in xBaskets)
				{
					teBasket = tools.open_doc(xBasket.id.Value).TopElem;
					if (ArrayCount(teBasket.goods) > 0)
					{
						fldGood = ArrayOptFindByKey(teBasket.goods, OptInt(xGood.id, 0), 'good_id');
						if (fldGood != undefined)
							oGood.basket_amount += fldGood.number;
					}
				}
				oResult.result.push(oGood);
				//progress.CurrentItemIndex++;
			}
			oResult.code = 'success';
		}
		return oResult;
	"/>

	<request_statistics_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" EXPR="
    	var oResult = {
    	    ok: false,
    	    code: 'failure',
    	    result: []
    	}

    	if (oParams != null || oParams != undefined)
    	{
    	    var filters = [];

    	    if (OptDate(oParams.start_date) != undefined)
    	        filters.push('$elem/close_date &gt;= date(\'' + DateNewTime(oParams.start_date, 0, 0, 0) + '\')');

    	    if (OptDate(oParams.finish_date) != undefined)
    	        filters.push('$elem/close_date &lt;= date(\'' + DateNewTime(oParams.finish_date, 23, 59, 59) + '\')');

    	    if (OptInt(oParams.subdivision_id) != undefined)
    	    {
    	        var xSubs = [];
    	        if (tools_web.is_true(oParams.is_subdivision_hierarchy))
    	            xSubs = tools.call_code_library_method('libGame', 'getXSubsDownHierarchy', [oParams.subdivision_id]);
    	        else
    	            xSubs = tools.call_code_library_method('libGame', 'getXSubs', [oParams.subdivision_id]);
    	        filters.push('MatchSome($elem/person_id, (' + ArrayMerge(xSubs, 'basic_collaborator_id', ',') + '))');
    	    }
    	    else
    	    {
    	        var collaboratorIDs = tools.call_code_library_method('libGame', 'GetPersonSubordinatesApp', [undefined, [], tools.get_cur_user().id, '', 'websoft_cafeteria']);
    	        if (ArrayCount(collaboratorIDs) > 0)
    	            filters.push('MatchSome($elem/person_id, (' + ArrayMerge(collaboratorIDs, 'This', ',') + '))');
    	    }

			if (OptInt(oParams.budget_period_id) != undefined)
    	        filters.push('$elem/budget_period_id = ' + oParams.budget_period_id);

    	    filters.push('$elem/type = \'good\'');
    	    filters.push('$elem/status_id = \'close\'');
    	    var xqFilters = ArrayCount(filters) > 0 ? ' where ' + ArrayMerge(filters, 'This', ' and ') : '';

    	    var xRequests= tools.xquery('for $elem in requests ' + xqFilters + ' return $elem/id, $elem/__data');
    	    if (ArrayCount(xRequests) == 0)
    	    {
    	        oResult.code = 'dont_find_requests';
    	        return oResult;
    	    }

    	    CheckCurThread();
    	    var progress = new TaskProgress;
    	    progress.TaskName = 'Загружаем список транзакций';
    	    //progress.ItemCount = ArrayCount(xRequests);
    	    //progress.CurrentItemIndex = 0;

    	    var requests = [];
    	    for (xRequest in xRequests)
    	    {
    	        docRequest = tools.open_doc(xRequest.id);
    	        if (docRequest != undefined)
    	        {
    	            teRequest = docRequest.TopElem;
    	            //progress.CurrentItemName = teRequest.code.Value;
    	            request = {};
    	            request.request_id = teRequest.id.Value;
    	            request.request_code = teRequest.code.Value;
    	            request.good_id = teRequest.object_id.Value;
    	            request.good_name = teRequest.object_name.Value;
    	            request.date = (OptDate(teRequest.create_date) != undefined ? StrDate(teRequest.create_date.Value, false, false) : '');
    	            request.collaborator_id = teRequest.person_id.Value;
    	            request.collaborator_fullname = teRequest.person_fullname.Value;
    	            request.subdivision_id = teRequest.person_subdivision_id.Value;
    	            request.subdivision_name = teRequest.person_subdivision_name.Value;
    	            request.currency_type_id = teRequest.workflow_fields.ObtainChildByKey('currency').value.Value;
    	            request.amount = OptReal(teRequest.workflow_fields.ObtainChildByKey('amount').value.Value, 0);
    	            requests.push(request);
    	        }
    	        //progress.CurrentItemIndex++;
    	    }

    	    if (ArrayCount(requests) > 0)
    	    {
    	        requests = ArraySort(requests, 'subdivision_id', '+', 'currency_type_id', '+');
    	        var curRequest = {
    	            subdivision_id: 0,
    	            currency_type_id: '',
    	            amount_sum: 0,
    	            is_final: false
    	        }
    	        var is_final = false;
    	        var is_start = false;
    	        var index = 0;
    	        for (request in requests)
    	        {
    	            if (curRequest.subdivision_id != OptInt(request.subdivision_id))
    	            {
    	                curRequest.subdivision_id = OptInt(request.subdivision_id);
    	                is_start = true;
    	                if (index > 0)
    	                    is_final = true;
    	            }
    	            if (curRequest.currency_type_id != request.currency_type_id)
    	            {
    	                curRequest.currency_type_id = request.currency_type_id;
    	                if (index > 0)
    	                    is_final = true;
    	            }
    	            if (is_final)
    	            {
    	                oRequest = {};
    	                oRequest.request_id = request.request_id;
    	                oRequest.request_code = 'Итого:';
    	                oRequest.good_id = '';
    	                oRequest.good_name = '';
    	                oRequest.date = '';
    	                oRequest.collaborator_id = '';
    	                oRequest.collaborator_fullname = '';
    	                oRequest.subdivision_id = '';
    	                oRequest.subdivision_name = '';
    	                oRequest.currency_type_id = '';
    	                oRequest.amount = curRequest.amount_sum;
    	                oResult.result.push(oRequest);
    	                is_final = false;
    	                curRequest.amount_sum = 0;
    	            }
    	            if (is_start)
    	            {
    	                oRequest = {};
    	                oRequest.request_id = request.request_id;
    	                oRequest.request_code = '';
    	                oRequest.good_id = request.good_id;
    	                oRequest.good_name = '';
    	                oRequest.date = '';
    	                oRequest.collaborator_id = request.collaborator_id;
    	                oRequest.collaborator_fullname = request.subdivision_name;
    	                oRequest.subdivision_id = request.subdivision_id;
    	                oRequest.subdivision_name = '';
    	                oRequest.currency_type_id = '';
    	                oRequest.amount = '';
    	                oResult.result.push(oRequest);
    	                is_start = false;
    	            }

    	            curRequest.amount_sum += request.amount;
    	            _sCurrencyName = '';
    	            if (lists.currency_types.GetOptChildByKey(request.currency_type_id) != undefined)
    	                _sCurrencyName = lists.currency_types.GetOptChildByKey(request.currency_type_id).name;
    	            request.amount = request.amount + ' ' + _sCurrencyName;
    	            index++;
    	            oResult.result.push(request);
    	        }
    	        oRequest = {};
    	        oRequest.request_id = request.request_id;
    	        oRequest.request_code = 'Итого:';
    	        oRequest.good_id = '';
    	        oRequest.good_name = '';
    	        oRequest.date = '';
    	        oRequest.collaborator_id = '';
    	        oRequest.collaborator_fullname = '';
    	        oRequest.subdivision_id = '';
    	        oRequest.subdivision_name = '';
    	        oRequest.currency_type_id = '';
    	        oRequest.amount = curRequest.amount_sum;
    	        oResult.result.push(oRequest);
    	    }
    	    oResult.code = 'success';
    	}

    	return oResult;
	"/>


	<!-- Портал -->
	<poll_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" EXPR="

		oResult = new Object();
		oResult.error = 0;
		oResult.poll_results = [];
		oResult.questions = [];
		oResult.immediate_export = false;
		oResult.exported_file_link = '';
		oResult.rows_count = 0;
		oResult.too_much_columns = false;
		oResult.columns_count = 0;

		if ( oParams == null || oParams == undefined )
		{
			oResult.error = 1;
		}

		arrPersonsIDs = Array();

		arrXQueryConditions = [];

		arrXQueryConditions.push( '$elem/poll_id = ' + oParams.poll_id );

		if ( oParams.start_date != null )
		{
			arrXQueryConditions.push( '$elem/create_date >= ' + XQueryLiteral( DateNewTime( Date( oParams.start_date ), 0, 0, 0 ) ) );
		}

		if ( oParams.finish_date != null )
		{
			arrXQueryConditions.push( '$elem/create_date <= ' + XQueryLiteral( DateNewTime( Date( oParams.finish_date ), 23, 59, 59 ) ) );
		}

		if ( oParams.person_id != null )
			arrXQueryConditions.push( '$elem/person_id = ' + oParams.person_id );

		if ( oParams.group_id != null )
		{
			arrGroupPersonsIDs = new Array();

			docGroup = tools.open_doc( oParams.group_id );
			if ( docGroup != undefined )
			{
				arrGroupPersonsIDs = ArrayExtract( docGroup.TopElem.collaborators, 'collaborator_id' );

				arrXQueryConditions.push( 'MatchSome( $elem/person_id, ( ' + ArrayMerge( arrGroupPersonsIDs, 'This.PrimaryKey', ',' ) + ' ) ) ' );
			}
		}

		if ( oParams.parent_object_id != null )
		{
			catSub = ArrayOptFirstElem( XQuery('for $elem in subdivisions where $elem/id = ' + oParams.parent_object_id + ' return $elem') );

			arrPersonsIDs = ArrayExtract( tools.xquery( 'for $elem in person_hierarchys where MatchSome( $elem/subdivision_id, ( ' + ( catSub != undefined ? catSub.id : null ) + ' ) ) return $elem/Fields( \'collaborator_id\')' ), 'This.collaborator_id' );

			if ( oParams.hier_sub_select )
			{
				arrXQueryConditions.push( 'MatchSome( $elem/person_id, ( ' + ArrayMerge( arrPersonsIDs, 'This.PrimaryKey', ',' ) + ' ) ) ' );
			}
			else
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/position_parent_id = ' + oParams.parent_object_id + ' )' );
			}
		}

		if ( oParams.org_id != null && oParams.parent_object_id == null )
		{
			if ( oParams.hier_sub_select )
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/org_id = ' + oParams.org_id + ' )' );
			}
			else
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/org_id = ' + oParams.org_id + ' and $person/position_parent_id = null() )' );
			}
		}

		arrXQueryConditions.push('and $elem/main_value != \'\'');

		sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

		sQuery = 'for $elem in poll_results ' + sXQueryConditions + ' return $elem/Fields( \'id\' )';

		arrPollResults = XQuery( sQuery );

		CheckCurThread();

		var progress = new TaskProgress;
		progress.TaskName = 'Загружаем список результатов опросов';

		collaborator_fullname_count = 0;

		docPoll = tools.open_doc( oParams.poll_id );
		if ( docPoll != undefined )
		{
			tePoll = docPoll.TopElem;

			for ( catPollResult in arrPollResults )
			{
				try
				{
					if ( ( oParams.disp_poll_type == '(true,false)' ) || ( String( tePoll.completed ) == oParams.disp_poll_type ) )
					{
						tePollResult = OpenDoc( UrlFromDocID( catPollResult.id ) ).TopElem;

						// <!-- Создаем запись результата опроса в Ps.polls -->
						oTempPollResult = {};
						oTempPollResult.id = tePollResult.id.Value;
						oTempPollResult.name = tePoll.name.Value;
						oTempPollResult.start_date = tePollResult.create_date.Value;
						oTempPollResult.person_fullname = tePollResult.person_fullname.Value;
						oTempPollResult.person_code = tePollResult.person_code.Value;
						oTempPollResult.questions = [];

						arrCollaboratorIDs = ArrayExtract(tePollResult.questions, 'This.value.Value')
						sQuery = 'for $elem in collaborators where MatchSome( $elem/id, ( ' + ArrayMerge( arrCollaboratorIDs, 'This', ',' ) + ' ) ) return $elem';
						xarrCollaborator = tools.xquery(sQuery);
						arrCollaborator = ArrayOptFirstElem(xarrCollaborator);
						
						oTempPollResult.collaborator_fullname = '';
						if(arrCollaborator != undefined)
						{
							oTempPollResult.collaborator_fullname = arrCollaborator.fullname.Value;
							collaborator_fullname_count++;
						}

						for ( oQuestion in tePoll.questions )
						{
							if ( oQuestion.type == 'title' || oQuestion.type == 'table' )
								continue;

							if ( oParams.disp_answers )
							{
								if ( oQuestion.entries.ChildNum == 0 && oQuestion.type != 'bool' )
									continue;

								// <!-- Создаем запись вопроса в Ps.polls.questions -->
								oPollResultQuestion = ArrayOptFind( oTempPollResult.questions, 'This.question_id == oQuestion.PrimaryKey' );
								if ( oPollResultQuestion == undefined )
								{
									oTempPollResultQuestion = {};
									oTempPollResultQuestion.question_id = oQuestion.PrimaryKey;
									oTempPollResultQuestion.comment = '';
									oTempPollResultQuestion.answers = '';
									oTempPollResultQuestion.entries = [];
								}
								else
								{
									oTempPollResultQuestion = oPollResultQuestion;
								}

								// <!-- Создаем запись вопроса в Ps.questions -->
								oResultQuestion = ArrayOptFind( oResult.questions, 'This.question_id == oQuestion.PrimaryKey' );
								if ( oResultQuestion == undefined )
								{
									oTempResultQuestion = {};
									oTempResultQuestion.question_id = oQuestion.PrimaryKey;
									oTempResultQuestion.title = oQuestion.title;
									oTempResultQuestion.entries = [];
								}
								else
								{
									oTempResultQuestion = oResultQuestion;
								}
			
								if ( oQuestion.type == 'bool' )
								{
									arrEntries = [ { 'PrimaryKey' : 1, 'value' : ms_tools.get_const( 'c_yes' ) }, { 'PrimaryKey' : 0, 'value' : ms_tools.get_const( 'c_no' ) } ];
								}
								else
								{
									arrEntries = oQuestion.entries;
								}


								for ( _entry in arrEntries )
								{
									// <!-- Создаем массив entries в Ps.polls.questions.entries -->
									oPollChildEntry = ArrayOptFind( oTempPollResultQuestion.entries, 'This.id == _entry.PrimaryKey' );
									if ( oPollChildEntry == undefined )
									{
										oTempPollResultQuestionEntry = {};
										oTempPollResultQuestionEntry.id = _entry.PrimaryKey;
										oTempPollResultQuestionEntry.value = '';
									}
									else
									{
										oTempPollResultQuestionEntry = oPollChildEntry;
										oTempPollResultQuestionEntry.value = '';
									}

									// <!-- Создаем массив entries в Ps.questions.entries -->
									oChildEntry = ArrayOptFind( oTempResultQuestion.entries, 'This.id == _entry.PrimaryKey' );
									if ( oChildEntry == undefined )
									{
										oTempResultQuestionEntry = {};
										oTempResultQuestionEntry.id = _entry.PrimaryKey;
										oTempResultQuestionEntry.value = _entry.value;
									}
									else
									{
										oTempResultQuestionEntry = oChildEntry;
										oTempResultQuestionEntry.value = _entry.value;
									}

									answerValue = ( oQuestion.type == 'bool' ? ( oTempResultQuestionEntry.id == 0 ? 'false' : 'true' ) : oTempResultQuestionEntry.id );
			
									if ( ArrayOptFind( String( tePollResult.questions.ObtainChildByKey( oQuestion.PrimaryKey ).value ).split( ';' ), 'This==&quot;' + answerValue + '&quot;'  ) != undefined )
									{
										oTempPollResultQuestionEntry.value = 'v';
									}

									if ( oPollChildEntry == undefined )
										oTempPollResultQuestion.entries.push( oTempPollResultQuestionEntry );
									
									if ( oChildEntry == undefined )
										oTempResultQuestion.entries.push( oTempResultQuestionEntry );
								}

								if ( oResultQuestion == undefined )
									oResult.questions.push( oTempResultQuestion );
							}
							else
							{
								// <!-- Создаем запись вопроса в Ps.polls.questions -->
								oPollResultQuestion = ArrayOptFind( oTempPollResult.questions, 'This.question_id == oQuestion.PrimaryKey' );
								if ( oPollResultQuestion == undefined )
								{
									oTempPollResultQuestion = {};

									oTempPollResultQuestion.question_id = oQuestion.PrimaryKey;
									oTempPollResultQuestion.answers = '';
									oTempPollResultQuestion.comment = '';
									oTempPollResultQuestion.entries = [];
								}
								else
								{
									oTempPollResultQuestion = oPollResultQuestion;
								}

								// <!-- Создаем запись вопроса в Ps.questions -->
								oResultQuestion = ArrayOptFind( oResult.questions, 'This.question_id == oQuestion.PrimaryKey' );
								if ( oResultQuestion == undefined )
								{
									oTempResultQuestion = {};
									oTempResultQuestion.question_id = oQuestion.PrimaryKey;
									oTempResultQuestion.title = oQuestion.title;
									oTempResultQuestion.entries = [];
								}
								else
								{
									oTempResultQuestion = oResultQuestion;
								}
			
								if ( oQuestion.type == 'bool' )
								{
									try
									{
										oTempPollResultQuestion.answers = tePollResult.questions.GetChildByKey( oQuestion.PrimaryKey ).value == 'true' ? ms_tools.get_const( 'c_yes' ) : ms_tools.get_const( 'c_no' );
									}
									catch( ex )
									{
										oTempPollResultQuestion.answers ='';
									}
								}
								else if ( oQuestion.type == 'link_to_database_object' )
								{
									oTempPollResultQuestion.answers = '';
									answer = tePollResult.questions.ObtainChildByKey( oQuestion.PrimaryKey );
									if ( answer.value.HasValue )
									{
										try
										{
											arrIds = String( answer.value ).split( ';' );
											if ( ArrayCount( arrIds ) <= 1 )
											{
												arrCatalogEntries = XQuery( 'for $elem in ' + oQuestion.catalog + 's where $elem/id = '+ Int( answer.value ) + ' return $elem' );
											}
											else
											{
												arrSelObjIDs = ArrayExtract( arrIds, 'Int(This)' );
												arrCatalogEntries = QueryCatalogByKeys( oQuestion.catalog + 's', 'id', arrSelObjIDs );
											}
			
											strValue = '';
											for ( fldCatalogElem in arrCatalogEntries )
											{
												strValue = strValue + ( strValue != '' ? ', ' : '' ) + fldCatalogElem.EvalPath( common.exchange_object_types.GetChildByKey( fldCatalogElem.Name ).disp_name );
											}
			
											oTempPollResultQuestion.answers = strValue;
										}
										catch( ex )
										{
											oTempPollResultQuestion.answers = global_settings.object_deleted_str;
										}
									}
								}
								else if ( oQuestion.type == 'choice' || oQuestion.type == 'select' || oQuestion.type == 'combo' )
								{
									if ( oQuestion.entries.ChildNum != 0 )
									{
										for ( _entry in oQuestion.entries )
										{
											if ( ArrayOptFind( String( tePollResult.questions.ObtainChildByKey( oQuestion.PrimaryKey ).value ).split( ';' ), 'This==&quot;' + _entry.PrimaryKey + '&quot;'  ) != undefined )
											{
												if ( oTempPollResultQuestion.answers != '' )
												{
													oTempPollResultQuestion.answers = oTempPollResultQuestion.answers + '; ' + _entry.value;
												}
												else
												{
													oTempPollResultQuestion.answers = _entry.value;
												}
											}
										}
									}
								}
								else if ( oQuestion.type == 'order' )
								{
									arrAnswers = Array();
									arrOrderAnswers = String( tePollResult.questions.ObtainChildByKey( oQuestion.PrimaryKey ).value ).split( ';' );
									for ( sAnswer in arrOrderAnswers )
									{
										try
										{
											arrAnswers.push( ArrayOptFind( oQuestion.entries, 'This.id == OptInt( sAnswer )' ).value )
										}
										catch( e )
										{
										}
									}
			
									if ( ArrayCount( arrAnswers ) > 0 )
										oTempPollResultQuestion.answers = ArrayMerge( arrAnswers, 'This', ';' )
									else
										oTempPollResultQuestion.answers = '';
								}
								else
								{
									try
									{
										oTempPollResultQuestion.answers = tePollResult.questions.GetChildByKey( oQuestion.PrimaryKey ).value;
									}
									catch( ex )
									{
										oTempPollResultQuestion.answers = '';
									}
								}
							}
			
							if ( oParams.show_comments_in_report )
							{
								try
								{
									oTempPollResultQuestion.comment = tePollResult.comment;
									//oTempPollResultQuestion.comment = tePollResult.questions.ObtainChildByKey( oQuestion.PrimaryKey ).comment;
								}
								catch( ex )
								{
									alert( ex )
								}
							}

							if ( oResultQuestion == undefined && ! oParams.disp_answers )
								oResult.questions.push( oTempResultQuestion );

							if ( oPollResultQuestion == undefined )
								oTempPollResult.questions.push( oTempPollResultQuestion );
						}

						oResult.poll_results.push( oTempPollResult );
					}
				}
				catch ( err )
				{
					alert( err );
				}
			}

			bExport = false;

			if ( ! oParams.disp_answers )
			{
				iColumnsCount = ArrayCount( oResult.questions );

				if ( oParams.show_comments_in_report && iColumnsCount >= 9 )
					bExport = true;
				else if ( ! oParams.show_comments_in_report && iColumnsCount > 17 )
					bExport = true;
			}
			else
			{
				iColumnsCount = 0;
				for ( question in oResult.questions )
				{
					iColumnsCount += ArrayCount( question.entries );
					if ( oParams.show_comments_in_report )
						iColumnsCount += 1
				}

				if ( iColumnsCount > 17 )
					bExport = true;
			}

			oResult.collaborator_fullname_has_count = false;
			if(collaborator_fullname_count > 0)
			{
				oResult.collaborator_fullname_has_count = true;
			}
			
			oResult.too_much_columns = bExport;
			oResult.columns_count = iColumnsCount;

			if ( ArrayCount( oResult.poll_results ) > oParams.max_visible_rows || bExport )
			{
				oResult.immediate_export = true;
				oResult.rows_count = ArrayCount( oResult.poll_results );
			}
			
			oResult.exported_file_link = tools_report.save_report_to_file( '', oParams.report_name, 'xlsx', '', oParams.bIsWebClient, oParams.columns, oResult, oParams );
		}
		else
		{
			oResult.error = 1;
		}

		return oResult;

	"/>

	<poll_procedure_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" EXPR="

		oResult = new Object();
		oResult.error = 0;
		oResult.poll_results = [];

		if ( oParams == null || oParams == undefined )
		{
			oResult.error = 1;
		}

		arrXQueryConditions = [];

		if ( oParams.person_id != null )
		{
			arrXQueryConditions.push( '$elem/person_id = ' + oParams.person_id );
		}

		if ( oParams.poll_id != null )
		{
			arrXQueryConditions.push( '$elem/poll_id = ' + oParams.poll_id );
		}

		if ( oParams.poll_procedure_id != null )
		{
			arrXQueryConditions.push( '$elem/poll_procedure_id = ' + oParams.poll_procedure_id );
		}

		if ( oParams.start_date != null )
		{
			arrXQueryConditions.push( '$elem/create_date >= ' + XQueryLiteral( DateNewTime( oParams.start_date, 0, 0, 0 ) ) );
		}

		if ( oParams.finish_date != null )
		{
			arrXQueryConditions.push( '$elem/create_date <= ' + XQueryLiteral( DateNewTime( oParams.finish_date, 23, 59, 59 ) ) );
		}

		if ( oParams.disp_select >= 0 )
		{
			if ( oParams.disp_select == 1 )
			{
				arrXQueryConditions.push( '$elem/is_done = true() and $elem/status = 2' );
			}
			else if ( oParams.disp_select == 2 )
			{
				arrXQueryConditions.push( '$elem/is_done = false() and $elem/status = 0' );
			}
			else if ( oParams.disp_select == 3 )
			{
				arrXQueryConditions.push( '$elem/status = 1' );
			}
		}

		arrXQueryConditions.push( '$elem/poll_id != null() and $elem/poll_procedure_id != null()' );

		sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

		xarrPollResults = XQuery( 'for $elem in poll_results ' + sXQueryConditions + ' order by $elem/person_id return $elem' );

		CheckCurThread();

		var progress = new TaskProgress;
		progress.TaskName = 'Строим отчет';
		//progress.ItemCount = ArrayCount( xarrPollResults );
		//progress.CurrentItemIndex = 0;

		oResult.poll_results = [];
		oResult.questions = [];

		arrPolls = new Array();

		for ( catPollResult in xarrPollResults )
		{
			//progress.CurrentItemName = catPollResult.person_fullname;

			oPersonPollResult = ArrayOptFind( oResult.poll_results, 'This.person_id == OptInt( catPollResult.person_id )' );

			try
			{
				tePollResult = OpenDoc( UrlFromDocID( catPollResult.PrimaryKey ) ).TopElem;
			}
			catch( ex )
			{
				CallServerMethod( 'tools_report', 'log_report', [ 'catPollResult.PrimaryKey ex: ' + ex ] );
				continue;
			}

			if ( oPersonPollResult != undefined )
			{
				oTempPollResult = oPersonPollResult;
				bNewPerson = false;
			}
			else
			{
				oTempPollResult = {};

				oTempPollResult.person_id = catPollResult.person_id.Value;
				oTempPollResult.person_fullname = catPollResult.person_fullname.Value;

				try
				{
					oTempPollResult.person_code = catPollResult.person_id.ForeignElem.code.Value;
				}
				catch( err )
				{
					oTempPollResult.person_code = '';
				}

				oTempPollResult.polls = [];
				bNewPerson = true;
			}

			if ( catPollResult.poll_procedure_id.HasValue && catPollResult.poll_id.HasValue )
			{
				oPoll = ArrayOptFind( arrPolls, 'This.id == ' + catPollResult.poll_id );
				if ( oPoll == undefined )
				{
					try
					{
						oPoll = OpenDoc( UrlFromDocID( catPollResult.poll_id ) ).TopElem;
					}
					catch( ex )
					{
						continue;
					}

					arrPolls.push( oPoll );
				}

				oPollResultPersonPoll = ArrayOptFind( oTempPollResult.polls, 'This.poll_id == OptInt( oPoll.id )' );
				if ( oPollResultPersonPoll != undefined )
				{
					oTempPollResultPersonPoll = oPollResultPersonPoll;
					bNewPersonPoll = false;
				}
				else
				{
					oTempPollResultPersonPoll = {};
					oTempPollResultPersonPoll.poll_id = oPoll.id.Value;
					oTempPollResultPersonPoll.name = oPoll.name.Value;
					oTempPollResultPersonPoll.questions = [];
					bNewPersonPoll = true;
				}

				for ( fldQuestion in oPoll.questions )
				{
					if ( fldQuestion.id.HasValue )
					{
						oPollResultPersonPollQuestion = ArrayOptFind( oTempPollResultPersonPoll.questions, 'This.question_id == fldQuestion.id' );
						if ( oPollResultPersonPollQuestion != undefined )
						{
							oTempPollResultPersonPollQuestion = oPollResultPersonPollQuestion;
							bNewPersonPollQuestion = false;
						}
						else
						{
							oTempPollResultPersonPollQuestion = {};
							oTempPollResultPersonPollQuestion.question_id = fldQuestion.id.Value;
							oTempPollResultPersonPollQuestion.title = fldQuestion.title.Value;
							oTempPollResultPersonPollQuestion.value = '';
							oTempPollResultPersonPollQuestion.comment = '';
							bNewPersonPollQuestion = true;
						}

						oQuestion = ArrayOptFind( oResult.questions, 'This.question_id == fldQuestion.id' );
						if ( oQuestion != undefined )
						{
							oTempPollResultQuestion = oQuestion;
							bNewQuestion = false;
						}
						else
						{
							oTempPollResultQuestion = {};
							oTempPollResultQuestion.question_id = fldQuestion.id.Value;
							oTempPollResultQuestion.title = fldQuestion.title.Value;
							oTempPollResultQuestion.type = fldQuestion.type.Value;
							oTempPollResultQuestion.entries = [];
							bNewQuestion = true;
						}

						if ( fldQuestion.type == 'choice' || fldQuestion.type == 'select' || fldQuestion.type == 'combo' )
						{
							if ( ArrayOptFirstElem( oTempPollResultQuestion.entries ) == undefined )
							{
								for ( fldQuestionEntry in fldQuestion.entries )
								{
									fldTempEntry = {};
									fldTempEntry.id = fldQuestionEntry.id.Value;
									fldTempEntry.value = fldQuestionEntry.value.Value;
									fldTempEntry.encounters = 0;
									fldTempEntry.hits = 0;

									oTempPollResultQuestion.entries.push( fldTempEntry )
								}
							}

							for ( fldEntry in oTempPollResultQuestion.entries )
							{
								fldEntry.encounters = fldEntry.encounters + 1;
							}
						}

						oPollQuestion = ArrayOptFind( tePollResult.questions, 'This.id == ' + CodeLiteral( fldQuestion.id ) );

						if ( oPollQuestion != undefined )
						{
							if ( fldQuestion.type == 'link_to_database_object' )
							{
								try
								{
									arrPollQuestionValues = String( oPollQuestion.value ).split( ';' );
									arrPollQuestionValues = ArrayExtract( arrPollQuestionValues, 'Int( This )' );

									xarrPollQuestionValues = XQuery( 'for $elem in ' + fldQuestion.catalog + 's where MatchSome( $elem/id, ( ' + ArrayMerge( arrPollQuestionValues, 'This', ',' ) + ' ) ) return $elem' );

									sDispName = common.exchange_object_types.GetChildByKey( fldQuestion.catalog ).disp_name;
									oTempPollResultPersonPollQuestion.value = ArrayMerge( xarrPollQuestionValues, 'This.' + sDispName, ';' );
								}
								catch( err )
								{
									oTempPollResultPersonPollQuestion.value = oPollQuestion.value.Value;
								}
							}
							else
							{
								oTempPollResultPersonPollQuestion.value = oPollQuestion.value.Value;
							}

							if ( fldQuestion.type == 'choice' )
							{
								oCurEntry = ArrayOptFind( oTempPollResultQuestion.entries, 'id + \'\' == \'' + oTempPollResultPersonPollQuestion.value + '\'' );
								if ( oCurEntry != undefined )
								{
									oCurEntry.hits = oCurEntry.hits + 1;
								}
							}

							if ( fldQuestion.type == 'select' )
							{
								arrCurQuestionValues = String( oTempPollResultPersonPollQuestion.value ).split( ';' );
								for ( oCurQuestionValue in arrCurQuestionValues )
								{
									oCurEntry = ArrayOptFind( oTempPollResultQuestion.entries, 'id + \'\' == \'' + oCurQuestionValue + '\'' );
									if ( oCurEntry != undefined )
									{
										oCurEntry.hits = oCurEntry.hits + 1;
									}
								}
							}

							oTempPollResultPersonPollQuestion.comment = oPollQuestion.comment.Value;
						}

						if ( bNewQuestion )
						{
							oResult.questions.push( oTempPollResultQuestion )
						}

						if ( bNewPersonPollQuestion )
						{
							oTempPollResultPersonPoll.questions.push( oTempPollResultPersonPollQuestion );
						}
					}
				}

				if ( bNewPersonPoll )
				{
					oTempPollResult.polls.push( oTempPollResultPersonPoll );
				}
			}

			if ( bNewPerson )
			{
				oResult.poll_results.push( oTempPollResult );
			}

			//progress.CurrentItemIndex++;
		}

		arrPolls = [];

		return oResult;

	"/>

	<view_accounts PROPERTY="1" PARAM="Ps" PARAM="curUserID" PARAM="sApplicationID" ALLOW-CALL-FROM-CLIENT="1" EXPR="
		
		oResult = new Object();
		oResult.error = 0;
		oResult.accounts = [];

		var arrXQueryConditions = [];
		var sXQueryQual = '';
		var sQueryString = '';
		
		if( sApplicationID != undefined || sApplicationID != null )
		{
			oModelRoles = CallServerMethod( 'tools_report', 'model_roles', [ curUserID, sApplicationID ] );
		
			arrSubordinateIDs = [];
			
			if(oModelRoles.type != '')
			{
				switch( oModelRoles.type )
				{
					case 'hr':
					{
						arrSubordinateIDs = oModelRoles.subordinate_ids.hr;
						break;
					}
					case 'observer':
					{
						arrSubordinateIDs = oModelRoles.subordinate_ids.observer;
						break;
					}
				}
				
				if(ArrayCount(arrSubordinateIDs) > 0){
					sXQueryQual = ' MatchSome($elem/object_id, (' + ArrayMerge(arrSubordinateIDs, 'This', ',') + '))';
				}
			}
		}

		if(sXQueryQual != '')
		{
			arrXQueryConditions.push( sXQueryQual );
		}

		if ( Ps.currency_type_id.HasValue )
		{
			arrXQueryConditions.push( '$elem/currency_type_id = \'' + Ps.currency_type_id + '\'' );
		}

		if ( Ps.status.HasValue && Ps.status != 'all')
		{
			arrXQueryConditions.push( '$elem/status = \'' + Ps.status + '\'' );
		}


		if ( IsArray(Ps.currencies) && ArrayCount(Ps.currencies) > 0)
		{
			arrTmpXQCond = [];
			for(oCurrency in Ps.currencies)
			{
				arrTmpXQCond.push( '$elem/currency_type_id = \'' + oCurrency.id + '\'' );
			}

			if(ArrayCount(Ps.currencies) > 0)
			{
				arrXQueryConditions.push( '( ' + ArrayMerge(arrTmpXQCond, 'This', ' or ') + ' )' )
			}
			
		}

		if ( Ps.parent_object_id != null )
		{
			catSub = ArrayOptFirstElem( XQuery('for $elem in subdivisions where $elem/id = ' + Ps.parent_object_id + ' return $elem') );

			arrPersonsIDs = ArrayExtract( tools.xquery( 'for $elem in person_hierarchys where MatchSome( $elem/subdivision_id, ( ' + ( catSub != undefined ? catSub.id : null ) + ' ) ) return $elem/Fields( \'collaborator_id\')' ), 'This.collaborator_id' );

			if ( Ps.hier_sub_select )
			{
				arrXQueryConditions.push( 'MatchSome( $elem/object_id, ( ' + ArrayMerge( arrPersonsIDs, 'This.PrimaryKey', ',' ) + ' ) ) ' );
			}
			else
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/object_id = $person/id and $person/position_parent_id = ' + Ps.parent_object_id + ' )' );
			}
		}

		if ( Ps.org_id != null && Ps.parent_object_id == null )
		{
			if ( Ps.hier_sub_select )
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/object_id = $person/id and $person/org_id = ' + Ps.org_id + ' )' );
			}
			else
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/object_id = $person/id and $person/org_id = ' + Ps.org_id + ' and $person/position_parent_id = null() )' );
			}
		}

		var sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

		_accounts_array = tools.xquery( 'for $elem in accounts' + sQueryString + sXQueryConditions + ' return $elem' );

		for ( _account in _accounts_array )
		{
			_child = {};

			_child = {
				id: _account.id.Value,
				person_fullname: '',
				person_position_name: '',
				person_subdivision_name: '',
				person_org_name: '',
				status: '',
				balance: '',
				currency: ''
			};

			if(_account.object_id.Value != undefined)
			{
				_coll_array = ArrayOptFirstElem(tools.xquery( 'for $elem in collaborators where MatchSome( $elem/id, ( ' + _account.object_id.Value + ' ) ) return $elem' ));
				
				if(_coll_array != undefined)
				{	
					_child.id = _account.id.Value;

					_child.person_fullname = _coll_array.fullname.Value;
					_child.person_position_name = _coll_array.position_name.Value;
					_child.person_subdivision_name = _coll_array.position_parent_name.Value;
					_child.person_org_name = _coll_array.org_name.Value;
					
					// статус
					_child.status = _account.status.HasValue ? common.account_status_types.GetChildByKey( _account.status.Value ).name : '';

					_child.status_id = _account.status.HasValue ? common.account_status_types.GetChildByKey( _account.status.Value ).id : '';

					// цвет статуса - status_text_color
					_child.status_text_color = '';

					if(_child.status_id.HasValue && _child.status_id.Value != '')
					{
						switch(_child.status_id.Value)
						{
						 case 'active':
							_child.status_text_color = '#00be00' // зеленый
							break;
						 case 'close':
							_child.status_text_color = '#ff0000' // красный
							break;
						}
					}

					// баланс
					_child.balance = _account.balance.Value;

					// валюта
					_child.currency = _account.currency_type_id.OptForeignElem.name.Value;

					oResult.accounts.push(_child);
				}
			}
		}

		return oResult
	"/>

	<view_badges PROPERTY="1" PARAM="Ps" PARAM="curUserID" PARAM="sApplicationID" ALLOW-CALL-FROM-CLIENT="1" EXPR="
		
		oResult = new Object();
		oResult.error = 0;
		oResult.badges = [];

		var arrXQueryConditions = [];
		var sXQueryQual = '';
		var sQueryString = 'where $elem/is_reward != true() '; // не является наградой
		
		if( sApplicationID != undefined || sApplicationID != null )
		{
			oModelRoles = CallServerMethod( 'tools_report', 'model_roles', [ curUserID, sApplicationID ] );
		
			arrSubordinateIDs = [];
			
			if(oModelRoles.type != '')
			{
				switch( oModelRoles.type )
				{
					case 'hr':
					{
						arrSubordinateIDs = oModelRoles.subordinate_ids.hr;
						break;
					}
					case 'observer':
					{
						arrSubordinateIDs = oModelRoles.subordinate_ids.observer;
						break;
					}
				}
				
				if(ArrayCount(arrSubordinateIDs) > 0){
					sXQueryQual = 'MatchSome($elem/id, (' + ArrayMerge(arrSubordinateIDs, 'This', ',') + '))';
				}
			}
		}

		if(sXQueryQual != '')
		{
			arrXQueryConditions.push( sXQueryQual );
		}

		if ( Ps.qualification_id != null )
			arrXQueryConditions.push( 'MatchSome( $elem/qualification_id, ( ' + Ps.qualification_id + ' ) )' );

		if ( Ps.parent_object_id != null )
		{
			catSub = ArrayOptFirstElem( XQuery('for $elem in subdivisions where $elem/id = ' + Ps.parent_object_id + ' return $elem') );

			arrPersonsIDs = ArrayExtract( tools.xquery( 'for $elem in person_hierarchys where MatchSome( $elem/subdivision_id, ( ' + ( catSub != undefined ? catSub.id : null ) + ' ) ) return $elem/Fields( \'collaborator_id\')' ), 'This.collaborator_id' );

			if ( Ps.hier_sub_select )
			{
				arrXQueryConditions.push( 'MatchSome( $elem/person_id, ( ' + ArrayMerge( arrPersonsIDs, 'This.PrimaryKey', ',' ) + ' ) ) ' );
			}
			else
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/position_parent_id = ' + Ps.parent_object_id + ' )' );
			}
		}

		if ( Ps.org_id != null && Ps.parent_object_id == null )
		{
			if ( Ps.hier_sub_select )
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/org_id = ' + Ps.org_id + ' )' );
			}
			else
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/org_id = ' + Ps.org_id + ' and $person/position_parent_id = null() )' );
			}
		}

		if ( IsArray(Ps.statuses) && ArrayCount(Ps.statuses) > 0)
		{
			arrTmpXQCond = [];
			for(oStatus in Ps.statuses)
			{
				arrTmpXQCond.push( '$elem/status = \'' + oStatus.id + '\'' );
			}

			if(ArrayCount(Ps.statuses) > 0)
			{
				arrXQueryConditions.push( '( ' + ArrayMerge(arrTmpXQCond, 'This', ' or ') + ' )' )
			}
		}

		if ( Ps.start_date != null )
			arrXQueryConditions.push( '$elem/assignment_date >= date( \'' + DateNewTime( Ps.start_date, 0, 0, 0 ) + '\' )' );

		if ( Ps.finish_date != null )
			arrXQueryConditions.push( '$elem/assignment_date <= date( \'' + DateNewTime( Ps.finish_date, 23, 59, 59 ) + '\' )' );

		//var sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';
		var sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

		if(sXQueryConditions != '')
		{
			sXQueryConditions = ' and ' + sXQueryConditions;
		}

		_badges_array = tools.xquery( 'for $elem in qualification_assignments ' + sQueryString + sXQueryConditions + ' return $elem' );

		for ( _badge in _badges_array )
		{
			_child = {
				id: _badge.id.Value,
				qualif_ass_date: '',
				badge_name: '',
				person_fullname: '',
				person_position_name: '',
				person_subdivision_name: '',
				person_org_name: '',
				status: '',
				competence_name: '',
				comment: ''
			};

			_child.qualif_ass_date = StrDate(_badge.assignment_date.Value, true, false);

			arrQualification = ArrayOptFirstElem(XQuery( 'for $elem in qualifications where MatchSome( $elem/id, ( ' + _badge.qualification_id.Value + ' ) ) return $elem' ));
			
			if ( arrQualification != undefined )
				_child.badge_name = arrQualification.name.Value
			
			_child.person_fullname = _badge.person_fullname.Value;
			
			if(_badge.person_id.Value != undefined)
			{
				_coll_array = ArrayOptFirstElem(tools.xquery( 'for $elem in collaborators where MatchSome( $elem/id, ( ' + _badge.person_id.Value + ' ) ) return $elem' ));
			
				if(_coll_array != undefined)
				{
					_child.person_position_name = _coll_array.position_name.Value;
					_child.person_subdivision_name = _coll_array.position_parent_name.Value;
					_child.person_org_name = _coll_array.org_name.Value;
				}
			}

			_child.status = _badge.status.HasValue ? common.qualification_assignment_states.GetChildByKey( _badge.status.Value ).name : '';
			
			arrCompetence = ArrayOptFirstElem(XQuery( 'for $elem in competences where MatchSome( $elem/id, ( ' + _badge.competence_id.Value + ' ) ) return $elem' ));
			
			if ( arrCompetence != undefined )
				_child.competence_name = arrCompetence.name.Value
			
			docBadge = tools.open_doc(_badge.id.Value);
			docBadgeTE = docBadge.TopElem;

			_child.comment = docBadgeTE.comment;

			oResult.badges.push(_child);
		}

		return oResult
	"/>

	<view_awards PROPERTY="1" PARAM="Ps" PARAM="curUserID" PARAM="sApplicationID" ALLOW-CALL-FROM-CLIENT="1" EXPR="
		
		oResult = new Object();
		oResult.error = 0;
		oResult.awards = [];

		var arrXQueryConditions = [];
		var sXQueryQual = '';
		var sQueryString = 'where $elem/is_reward = true()'; // является наградой
		
		if( sApplicationID != undefined || sApplicationID != null )
		{
			oModelRoles = CallServerMethod( 'tools_report', 'model_roles', [ curUserID, sApplicationID ] );
		
			arrSubordinateIDs = [];
			
			if(oModelRoles.type != '')
			{
				switch( oModelRoles.type )
				{
					case 'hr':
					{
						arrSubordinateIDs = oModelRoles.subordinate_ids.hr;
						break;
					}
					case 'observer':
					{
						arrSubordinateIDs = oModelRoles.subordinate_ids.observer;
						break;
					}
				}
				
				if(ArrayCount(arrSubordinateIDs) > 0){
					sXQueryQual = 'MatchSome($elem/id, (' + ArrayMerge(arrSubordinateIDs, 'This', ',') + '))';
				}
			}
		}

		if(sXQueryQual != '')
		{
			arrXQueryConditions.push( sXQueryQual );
		}

		if ( Ps.qualification_id != null )
			arrXQueryConditions.push( 'MatchSome( $elem/qualification_id, ( ' + Ps.qualification_id + ' ) )' );

		if ( Ps.parent_object_id != null )
		{
			catSub = ArrayOptFirstElem( XQuery('for $elem in subdivisions where $elem/id = ' + Ps.parent_object_id + ' return $elem') );

			arrPersonsIDs = ArrayExtract( tools.xquery( 'for $elem in person_hierarchys where MatchSome( $elem/subdivision_id, ( ' + ( catSub != undefined ? catSub.id : null ) + ' ) ) return $elem/Fields( \'collaborator_id\')' ), 'This.collaborator_id' );

			if ( Ps.hier_sub_select )
			{
				arrXQueryConditions.push( 'MatchSome( $elem/person_id, ( ' + ArrayMerge( arrPersonsIDs, 'This.PrimaryKey', ',' ) + ' ) ) ' );
			}
			else
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/position_parent_id = ' + Ps.parent_object_id + ' )' );
			}
		}

		if ( Ps.org_id != null && Ps.parent_object_id == null )
		{
			if ( Ps.hier_sub_select )
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/org_id = ' + Ps.org_id + ' )' );
			}
			else
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/org_id = ' + Ps.org_id + ' and $person/position_parent_id = null() )' );
			}
		}

		if ( IsArray(Ps.statuses) && ArrayCount(Ps.statuses) > 0)
		{
			arrTmpXQCond = [];
			for(oStatus in Ps.statuses)
			{
				arrTmpXQCond.push( '$elem/status = \'' + oStatus.id + '\'' );
			}

			if(ArrayCount(Ps.statuses) > 0)
			{
				arrXQueryConditions.push( '( ' + ArrayMerge(arrTmpXQCond, 'This', ' or ') + ' )' )
			}
		}

		if ( Ps.start_date != null )
			arrXQueryConditions.push( '$elem/assignment_date >= date( \'' + DateNewTime( Ps.start_date, 0, 0, 0 ) + '\' )' );

		if ( Ps.finish_date != null )
			arrXQueryConditions.push( '$elem/assignment_date <= date( \'' + DateNewTime( Ps.finish_date, 23, 59, 59 ) + '\' )' );

		//var sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';
		var sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

		if(sXQueryConditions != '')
		{
			sXQueryConditions = ' and ' + sXQueryConditions;
		}

		_awards_array = tools.xquery( 'for $elem in qualification_assignments ' + sQueryString + sXQueryConditions + ' return $elem' );
	
		for ( _award in _awards_array )
		{
			_child = {
				id: _award.id.Value,
				award_name: '',
				person_fullname: '',
				person_position_name: '',
				person_subdivision_name: '',
				person_org_name: '',
				qualif_ass_date: '',
				sender_name: '',
				status: '',
				competence_name: '',
				comment: ''
			};

			_child.qualif_ass_date = StrDate(_award.assignment_date.Value, true, false);

			arrQualification = ArrayOptFirstElem(XQuery( 'for $elem in qualifications where MatchSome( $elem/id, ( ' + _award.qualification_id.Value + ' ) ) return $elem' ));

			if ( arrQualification != undefined )
				_child.award_name = arrQualification.name.Value

			if(_award.person_id.Value != undefined)
			{
				_coll_array = ArrayOptFirstElem(tools.xquery( 'for $elem in collaborators where MatchSome( $elem/id, ( ' + _award.person_id.Value + ' ) ) return $elem' ));

				if(_coll_array != undefined)
				{
					_child.person_fullname = _coll_array.fullname.Value;
					_child.person_position_name = _coll_array.position_name.Value;
					_child.person_subdivision_name = _coll_array.position_parent_name.Value;
					_child.person_org_name = _coll_array.org_name.Value;
				} else {
					oColls = tools.open_doc(_award.id.Value);
					oCollsTE = oColls.TopElem;
					_child.person_fullname = oCollsTE.person_fullname.Value;
				}
			}

			if(_award.sender_id != undefined)
			{
				_coll_array = ArrayOptFirstElem(tools.xquery( 'for $elem in collaborators where MatchSome( $elem/id, ( ' + _award.sender_id.Value + ' ) ) return $elem' ));

				if(_coll_array != undefined)
				{
					_child.sender_name = _coll_array.fullname.Value;
				}
			}

			_child.status = _award.status.HasValue ? common.qualification_assignment_states.GetChildByKey( _award.status.Value ).name : '';
			
			arrCompetence = ArrayOptFirstElem(XQuery( 'for $elem in competences where MatchSome( $elem/id, ( ' + _award.competence_id.Value + ' ) ) return $elem' ));

			if ( arrCompetence != undefined )
				_child.competence_name = arrCompetence.name.Value
			
			docAward = tools.open_doc(_award.id.Value);
			docAwardTE = docAward.TopElem;

			_child.comment = docAwardTE.comment;

			oResult.awards.push(_child);
		}

		return oResult
	"/>
	
	<!-- УЦ -->
	<events_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" PARAM="curUser" EXPR="

		oResult = new Object();
		oResult.error = 0;
		oResult.events = [];
		oResult.immediate_export = false;
		oResult.exported_file_link = '';
		oResult.rows_count = 0;

		if ( oParams == null || oParams == undefined )
		{
			oResult.error = 1;
		}

		var arrXQueryConditions = [];

		if ( oParams.lector_id != null )
		{
			arrLectorEvents = ArraySelectDistinct( XQuery( 'for $elem in event_lectors where $elem/lector_id = ' + oParams.lector_id + ' return $elem'), 'event_id' );

			if ( ArrayOptFirstElem( arrLectorEvents ) != undefined )
				arrXQueryConditions.push( 'MatchSome( $elem/id, ( ' + ArrayMerge( arrLectorEvents, 'event_id', ',' ) + ' ) )' );
			else
				arrXQueryConditions.push( '$elem/id = null()' );
		}

		if ( oParams.education_method_id != null )
			arrXQueryConditions.push( '$elem/education_method_id = ' + oParams.education_method_id );

		if ( oParams.education_org_id != null )
			arrXQueryConditions.push( '$elem/education_org_id = ' + oParams.education_org_id );

		if ( oParams.disp_type_id != null && oParams.disp_type_id != 'all' )
			arrXQueryConditions.push( '$elem/type_id = \'' + oParams.disp_type_id + '\'' );

		if ( oParams.start_date != null )
			arrXQueryConditions.push( '$elem/start_date &gt;= date(\'' + DateNewTime( oParams.start_date, 0, 0, 0 ) + '\')' );

		if ( oParams.finish_date != null )
			arrXQueryConditions.push( '$elem/start_date &lt;= date(\'' + DateNewTime( oParams.finish_date, 23, 59, 59 ) + '\')' );

		if ( oParams.disp_status_id != null && oParams.disp_status_id != 'all' )
			arrXQueryConditions.push( '$elem/status_id = \'' + oParams.disp_status_id + '\'' );

		arrXQueryConditions.push( '$elem/is_model = false()' );

		var sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

		arrEvents = XQuery( 'for $elem in events ' + sXQueryConditions + ' return $elem' );



		CheckCurThread();

		var progress = new TaskProgress;
		progress.TaskName = 'Загружаем список мероприятий';
		//progress.ItemCount = ArrayCount( arrEvents );
		//progress.CurrentItemIndex = 0;

		for ( catEvent in arrEvents )
		{
			if ( ! tools.check_cur_user_admin_access( catEvent ) )
			{
				continue;
			}

			//progress.CurrentItemName = catEvent.name;

			oTempEvent = {};
			oTempEvent.id = catEvent.id;
			oTempEvent.name = catEvent.name;
			oTempEvent.type_id = catEvent.type_id;

			try
			{
				oTempEvent.type_name = catEvent.type_id.ForeignElem.name;
			}
			catch( e )
			{
				oTempEvent.type_name = ms_tools.get_const( 'jmkcjvkz8n' );
			}

			oTempEvent.status_id = catEvent.status_id;

			try
			{
				oTempEvent.status_name = catEvent.status_id.ForeignElem.name;
			}
			catch( e )
			{
				oTempEvent.status_name = ms_tools.get_const( 'jmkcjvkz8n' );
			}

			oTempEvent.start_date = catEvent.start_date.HasValue ? StrDate( catEvent.start_date, true, false ) : '';
			oTempEvent.finish_date = catEvent.finish_date.HasValue ? StrDate( catEvent.finish_date, true, false ) : '';
			oTempEvent.person_num = catEvent.person_num;

			oTempEvent.education_method_name = '';
			oTempEvent.education_org_name = '';
			oTempEvent.total_cost = null;

			if ( catEvent.education_method_id.HasValue )
				try
				{
					oTempEvent.education_method_name = catEvent.education_method_id.ForeignElem.name;
				}
				catch ( dd )
				{
					oTempEvent.education_method_name = ms_tools.get_const( 'jmkcjvkz8n' );
				}

			if ( catEvent.education_org_id.HasValue )
				try
				{
					oTempEvent.education_org_name = catEvent.education_org_id.ForeignElem.disp_name;
				}
				catch ( dd )
				{
					oTempEvent.education_org_name = ms_tools.get_const( 'jmkcjvkz8n' );
				}

			if ( catEvent.total_cost.HasValue )
			{
				oTempEvent.total_cost = StrRealFixed( Real( catEvent.total_cost ), 2 )
				if ( catEvent.currency.HasValue )
				{
					try
					{
						oTempEvent.total_cost = oTempEvent.total_cost + ' (' + lists.currency_types.GetChildByKey( catEvent.currency ).name + ')';
					}
					catch( ex )
					{
					}
				}
			}

			oTempEvent.fact_person_num = ArrayCount( XQuery( 'for $elem in event_results where $elem/is_assist = true() and $elem/event_id = ' + catEvent.id + ' return $elem' ) );

			oTempEvent.lector_names = ArrayMerge( ArraySort( QueryCatalogByKeys( 'lectors', 'id', ArrayExtract( XQuery( 'for $elem in event_lectors where $elem/event_id = ' + catEvent.id + ' return $elem' ), 'lector_id' ) ),'lector_fullname', '+' ), 'lector_fullname', ', ' );

			oResult.events.push( oTempEvent );

			//progress.CurrentItemIndex++;
		}

		if ( ArrayCount( oResult.events ) > oParams.max_visible_rows )
		{
			oResult.immediate_export = true;
			oResult.rows_count = ArrayCount( oResult.events );
		}
		
		oResult.exported_file_link = tools_report.save_report_to_file( '', oParams.report_name, 'xlsx', '', oParams.bIsWebClient, oParams.columns, oResult.events );

		return oResult;
	"/>

	<persons_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="Ps" EXPR="

		oResult = new Object();
		oResult.error = 0;
		oResult.learnings = [];

		arrResult = new Array();
		
		oParams = new Object();
		
		if ( Ps == null || Ps == undefined )
		{
			oResult.error = 1;
		}
		
		/*
		if ( arrSettings == null || arrSettings == undefined )
		{
			oResult.error = 1;
		}
		
		// persons_ids 
		
		for ( param in arrSettings )
		{
			oParams.SetProperty( param.name, param.value )
		}
		*/

		if ( Ps.type == 'collaborator' )
		{
			oParams.persons_ids = Ps.person_id;
		}
		else if ( Ps.type == 'group' )
		{
			docGroup = tools.open_doc( Ps.group_id );
			if ( docGroup != undefined )
			{
				oParams.persons_ids = ArrayMerge( docGroup.TopElem.collaborators, 'This.PrimaryKey', ',' );
			}
		}
		else if ( Ps.type == 'subdivision' )
		{
			curNodeID = Ps.parent_object_id != null ? Ps.parent_object_id : Ps.org_id;
			if ( Ps.hier_sub_select )
			{
				arrSubPersonsIDs = ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( curNodeID ) );
				oParams.persons_ids = ArrayMerge( arrSubPersonsIDs, 'This', ',' );
			}
			else
			{
				sQuery = 'for $elem in subs where $elem/parent_id = ' + curNodeID + ' and $elem/type = \'position\' return $elem';
				arrSubs = XQuery( sQuery );

				oParams.persons_ids = ArrayMerge( arrSubs, 'This.basic_collaborator_id', ',' );
			}
		}

		if ( Ps.disp_active_learning || Ps.disp_learning || Ps.disp_active_test_learning || Ps.disp_test_learning )
		{
			arrActiveCourses = new Array();
			arrFinishedCourses = new Array();
			arrActiveTests = new Array();
			arrFinishedTests = new Array();

			arrXQueryConditions = [];

			arrXQueryConditions.push( 'MatchSome( $elem/person_id, ( ' + Ps.persons_ids + ' ) )' );

			if ( Ps.start_date != null )
				arrXQueryConditions.push( '$elem/start_usage_date &gt;= date( \'' + Ps.start_date + '\' )' );

			if ( Ps.finish_date != null )
				arrXQueryConditions.push( '$elem/start_usage_date &lt;= date( \'' + Ps.finish_date + '\' )' );

			sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

			if ( Ps.disp_active_learning )
				arrActiveCourses = XQuery( 'for $elem in active_learnings ' + sXQueryConditions + ' return $elem' );

			if ( Ps.disp_learning )
				arrFinishedCourses = XQuery( 'for $elem in learnings ' + sXQueryConditions + ' return $elem' );

			if ( Ps.disp_active_test_learning )
				arrActiveTests = XQuery( 'for $elem in active_test_learnings ' + sXQueryConditions + ' return $elem' );

			if ( Ps.disp_test_learning )
				arrFinishedTests = XQuery( 'for $elem in test_learnings ' + sXQueryConditions + ' return $elem' );

			arrResult = ArrayUnion( arrActiveCourses, arrFinishedCourses, arrActiveTests, arrFinishedTests );
		}

		if ( Ps.disp_event )
		{
			arrXQueryConditions = [];

			arrXQueryConditions.push( 'MatchSome( $elem/person_id, ( ' + Ps.persons_ids + ' ) )' );

			if ( Ps.start_date != null )
				arrXQueryConditions.push( '$elem/event_start_date &gt;= date( \'' + Ps.start_date + '\' )' );

			if ( Ps.finish_date != null )
				arrXQueryConditions.push( '$elem/event_start_date &lt;= date( \'' + Ps.finish_date + '\' )' );

			sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

			arrEventResults = XQuery( 'for $elem in event_results ' + sXQueryConditions + ' return $elem' );

			sEventsIDs = ArrayMerge( ArraySelectDistinct( ArrayExtractKeys( arrEventResults, 'event_id' ), 'This' ) , 'This', ',' );

			arrEvents = XQuery( 'for $elem in events where MatchSome( $elem/id, ( ' + sEventsIDs + ' ) ) return $elem' );

			arrResult = ArrayUnion( arrResult, arrEventResults );
		}

		CheckCurThread();

		var progress = new TaskProgress;
		progress.TaskName = 'Загружаем список активностей';

		for ( oLearning in arrResult )
		{
			oTempLearning = {};
			oTempLearning.id = oLearning.id;

			switch ( oLearning.Name )
			{
				case 'active_learning':
						oTempLearning.name = oLearning.course_name;
						oTempLearning.type = ms_tools.get_const( '7ysqgbcg0z' );
					break;
				case 'learning':
						oTempLearning.name = oLearning.course_name;
						oTempLearning.type = ms_tools.get_const( '4ev2fyo518' );
					break;
				case 'active_test_learning':
						oTempLearning.name = oLearning.assessment_name;
						oTempLearning.type = ms_tools.get_const( '8fx0ngrjex' );
					break;
				case 'test_learning':
						oTempLearning.name = oLearning.assessment_name;
						oTempLearning.type = ms_tools.get_const( '9km66hzf4u' );
					break;
				case 'event_result':
						oTempLearning.name = oLearning.event_name;
						oTempLearning.type = ms_tools.get_const( 'c_event' );
					break;
			}

			oTempLearning.status = '';

			if ( oLearning.Name != 'event_result' )
			{
				oTempLearning.status = common.learning_states.GetChildByKey( Int( oLearning.state_id ) ).name;
			}
			else
			{
				oLearningEvent = ArrayOptFind( arrEvents, 'This.id == oLearning.event_id' );
				if ( oLearningEvent != undefined )
				{
					oTempLearning.status = common.event_status_types.GetChildByKey( oLearningEvent.status_id ).name;
				}
			}

			try
			{
				oTempLearning.max_score = oLearning.max_score;
			}
			catch( e )
			{
				oTempLearning.max_score = 0;
			}
			
			oTempLearning.score = oLearning.score; // + ' (' + StrReal( ( 100 * Real( oLearning.score ) ) / Real( oLearning.max_score ), 1 ) + '%)'

			try
			{
				oTempLearning.start_usage_date = ( oLearning.Name != 'event_result' ? oLearning.start_usage_date : ArrayOptFind( arrEvents, 'This.id == oLearning.event_id' ).start_date );
			}
			catch( e )
			{
				oTempLearning.start_usage_date = null;
			}

			try
			{
				oTempLearning.last_usage_date = ( oLearning.Name != 'event_result' ? oLearning.last_usage_date : ArrayOptFind( arrEvents, 'This.id == oLearning.event_id' ).finish_date );
			}
			catch( e )
			{
				oTempLearning.last_usage_date = null;
			}

			oTempLearning.person_id = oLearning.person_id;
			oTempLearning.person_fullname = oLearning.person_fullname;

			try
			{
				oTempLearning.person_code = oLearning.person_id.ForeignElem.code;
			}
			catch( e )
			{
				oTempLearning.person_code = 'ОШИБКА: ' + e;
			}

			oTempLearning.person_org_name = oLearning.person_org_name;
			oTempLearning.person_position_name = oLearning.person_position_name;
			oTempLearning.person_subdivision_name = oLearning.person_subdivision_name;

			if ( Ps.disp_person_list_staff )
			{
				oTempLearning.person_list_staff = tools.person_list_staff_by_person_id( oLearning.person_id );
			}
			
			if(oLearning.Name == 'event_result')
			{
				oTempLearning.is_assist = false;
			}
			if(tools_web.is_true( oLearning.GetOptProperty( 'is_assist' )))
			{
				oTempLearning.is_assist = true;
			}

			oResult.learnings.push( oTempLearning );
			
			//progress.CurrentItemIndex++;
		}
		return oResult;
	"/>

	<course_part_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" PARAM="curUser" EXPR="

		oResult = new Object();
		oResult.error = 0;
		oResult.courses = [];
		oResult.section_number = 0;

		if ( oParams == null || oParams == undefined )
		{
			oResult.error = 1;
		}

		if ( oParams.group_id != null || oParams.org_id != null || oParams.parent_object_id != null )
		{
			arrGroupPersonsIDs = Array();
			if ( oParams.group_id != null )
			{
				try
				{
					teGroup = OpenDoc( UrlFromDocID( oParams.group_id ) ).TopElem;
				}
				catch( err )
				{
					teGroup = undefined;
				}

				if ( teGroup != undefined )
					arrGroupPersonsIDs = teGroup.collaborators;
			}

			arrPersonsIDs = Array();
			if ( oParams.org_id != null || oParams.parent_object_id != null )
			{
				curNodeID = oParams.parent_object_id != null ? oParams.parent_object_id : oParams.org_id;
				if ( oParams.hier_sub_select )
					arrPersonsIDs = ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( curNodeID ) );
				else
					arrPersonsIDs = ArraySelectDistinct( ArrayExtract( ArraySelect( XQuery( 'for $elem in subs where $elem/parent_id=' + curNodeID + ' and $elem/type=&quot;position&quot; return $elem' ), 'basic_collaborator_id.HasValue' ), 'basic_collaborator_id' ) );

				if ( ArrayCount( arrGroupPersonsIDs ) != 0 )
					arrPersonsIDs = ArraySelect( arrPersonsIDs, 'ArrayOptFindByKey( arrGroupPersonsIDs, This, \'collaborator_id\' ) != undefined' );
			}
			else
			{
				arrPersonsIDs = ArrayExtract( arrGroupPersonsIDs, 'collaborator_id' );
			}

			arrFinishedCourses = XQuery( 'for $elem in learnings where MatchSome( $elem/person_id, ( ' + ArrayMerge( arrPersonsIDs, 'This', ',' ) + ' ) ) return $elem' );

			sSelectConditions = oParams.course_id != null ? 'course_id == ' + oParams.course_id : '';

			if ( oParams.date_start != null )
				sSelectConditions += ( sSelectConditions == '' ? '' : '&amp;&amp;' ) + 'start_usage_date &gt;= oParams.date_start';

			if ( oParams.date_end != null )
				sSelectConditions += ( sSelectConditions == '' ? '' : '&amp;&amp;' ) + 'last_usage_date &lt;= DateNewTime( oParams.date_end, 23, 59, 59 )';

			if ( sSelectConditions != '' )
				arrFinishedCourses = ArraySelect( arrFinishedCourses, sSelectConditions );
		}
		else
		{
			var arrXQueryConditions = [];

			if ( oParams.person_id != null )
				arrXQueryConditions.push( '$elem/person_id = ' + oParams.person_id );

			if ( oParams.course_id != null )
				arrXQueryConditions.push( '$elem/course_id = ' + oParams.course_id );

			if ( oParams.date_start != null )
				arrXQueryConditions.push( '$elem/start_usage_date &gt;= date(\'' + DateNewTime( oParams.date_start, 0, 0, 0 ) + '\')' );

			if ( oParams.date_end != null )
				arrXQueryConditions.push( '$elem/last_usage_date &lt;= date(\'' + DateNewTime( oParams.date_end, 23, 59, 59 ) + '\')' );

			var sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

			arrFinishedCourses = XQuery( 'for $elem in learnings ' + sXQueryConditions + ' return $elem' );
		}

		CheckCurThread();

		var progress = new TaskProgress;
		progress.TaskName = 'Строим отчёт...';
		//progress.ItemCount = ArrayCount( arrFinishedCourses );
		//progress.CurrentItemIndex = 0;

		for ( catFinishedCourse in arrFinishedCourses )
		{
			teFinishedCourse = OpenDoc( UrlFromDocID( catFinishedCourse.PrimaryKey ) ).TopElem;

			//progress.CurrentItemName = teFinishedCourse.course_name;

			oCurCourse = {};

			oCurCourse.course_id   = teFinishedCourse.course_id;
			oCurCourse.course_name = teFinishedCourse.course_name;
			oCurCourse.course_code = teFinishedCourse.course_code;
			oCurCourse.sum = 0;
			oCurCourse.count = 0;

			try
			{
				oCurCourse.sum += Real( teFinishedCourse.score );
				oCurCourse.count += 1;
			}
			catch ( err )
			{

			}

			oCurCourse.persons = [];
			oCurCoursePerson = {};

			oCurCoursePerson.person_id	 			 = teFinishedCourse.person_id;
			oCurCoursePerson.score 		 			 = teFinishedCourse.score;
			oCurCoursePerson.learning_id 			 = catFinishedCourse.PrimaryKey;
			oCurCoursePerson.person_fullname 		 = teFinishedCourse.person_fullname;
			oCurCoursePerson.person_position_name 	 = teFinishedCourse.person_position_name;
			oCurCoursePerson.person_subdivision_name = teFinishedCourse.person_subdivision_name;
			oCurCoursePerson.start_date 			 = teFinishedCourse.start_usage_date;
			oCurCoursePerson.end_date 				 = teFinishedCourse.last_usage_date;

			if ( oParams.disp_person_list_staff )
				oCurCoursePerson.person_list_staff = tools.person_list_staff_by_person_id( teFinishedCourse.person_id );

			try
			{
				oCurCoursePerson.person_code = teFinishedCourse.person_id.ForeignElem.code;
			}
			catch(ex)
			{
			}


			oCurCourse.parts = [];
			oCurCoursePerson.parts = [];

			for ( fldPart in teFinishedCourse.parts )
			{
				oCurCoursePart = {};

				oCurCoursePart.part_id = fldPart.PrimaryKey;
				oCurCoursePart.name = fldPart.name;
				oCurCoursePart.sum = 0;
				oCurCoursePart.count = 0;

				try
				{
					oCurCoursePart.sum += Real( fldPart.score );
					oCurCoursePart.count += 1;
				}
				catch( err )
				{
				}

				oCurCoursePartPerson = {};

				oCurCoursePartPerson.part_id = fldPart.PrimaryKey;
				oCurCoursePartPerson.score = fldPart.score;
				oCurCoursePartPerson.start_date = fldPart.start_usage_date;
				oCurCoursePartPerson.end_date = fldPart.last_usage_date;

				oCurCoursePerson.parts.push( oCurCoursePartPerson );

				oCurCourse.parts.push( oCurCoursePart );
			}

			oCurCourse.persons.push( oCurCoursePerson );

			oResult.courses.push( oCurCourse );

			if ( oResult.section_number &lt; teFinishedCourse.parts.ChildNum )
				oResult.section_number = teFinishedCourse.parts.ChildNum;

			//progress.CurrentItemIndex++;
		}

		return oResult;

	"/>

	<exceed_course_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" PARAM="curUser" EXPR="

		oResult = new Object();
		oResult.error = 0;
		oResult.courses = new Array();
		oResult.immediate_export = false;
		oResult.exported_file_link = '';

		var arrXQueryConditions = [];
		arrPersonsIDs = [];

		arrXQueryConditions.push( '$elem/max_end_date != null()' );
		arrXQueryConditions.push( '$elem/max_end_date < ' + XQueryLiteral( Date( oParams.exceed_date ) ) );
		arrXQueryConditions.push( '$elem/state_id < 2' );

		if ( oParams.course_id != null )
			arrXQueryConditions.push( '$elem/course_id = ' + oParams.course_id );

		if ( oParams.start_date != null )
			arrXQueryConditions.push( '$elem/start_usage_date >= date( \'' + DateNewTime( oParams.start_date, 0, 0, 0 ) + '\' )' );

		if ( oParams.finish_date != null )
			arrXQueryConditions.push( '$elem/start_usage_date <= date( \'' + DateNewTime( oParams.finish_date, 23, 59, 59 ) + '\' )' );

		if ( oParams.person_id != null )
			arrXQueryConditions.push( '$elem/person_id = ' + oParams.person_id );

		if ( oParams.group_id != null )
		{
			arrGroupPersonsIDs = new Array();

			docGroup = tools.open_doc( oParams.group_id );
			if ( docGroup != undefined )
			{
				arrGroupPersonsIDs = ArrayExtract( docGroup.TopElem.collaborators, 'collaborator_id' );

				arrXQueryConditions.push( 'MatchSome( $elem/person_id, ( ' + ArrayMerge( arrGroupPersonsIDs, 'This.PrimaryKey', ',' ) + ' ) ) ' );
			}
		}

		if ( oParams.parent_object_id != null )
		{
			catSub = ArrayOptFirstElem( XQuery('for $elem in subdivisions where $elem/id = ' + oParams.parent_object_id + ' return $elem') );

			arrPersonsIDs = ArrayExtract( tools.xquery( 'for $elem in person_hierarchys where MatchSome( $elem/subdivision_id, ( ' + ( catSub != undefined ? catSub.id : null ) + ' ) ) return $elem/Fields( \'collaborator_id\')' ), 'This.collaborator_id' );

			if ( oParams.hier_sub_select )
			{
				arrXQueryConditions.push( 'MatchSome( $elem/person_id, ( ' + ArrayMerge( arrPersonsIDs, 'This.PrimaryKey', ',' ) + ' ) ) ' );
			}
			else
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/position_parent_id = ' + oParams.parent_object_id + ' )' );
			}
		}

		if ( oParams.org_id != null && oParams.parent_object_id == null )
		{
			if ( oParams.hier_sub_select )
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/org_id = ' + oParams.org_id + ' )' );
			}
			else
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/org_id = ' + oParams.org_id + ' and $person/position_parent_id = null() )' );
			}
		}

		var sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

		arrActiveCourses = XQuery( 'for $elem in active_learnings ' + sXQueryConditions + ' order by $elem/person_id return $elem' );
		
		CheckCurThread();

		var progress = new TaskProgress;
		progress.TaskName = 'Идёт построение отчёта';

		sCourseName = '';

		if ( oParams.course_id != null )
		{
			docCourse = tools.open_doc( oParams.course_id );
			if ( docCourse != undefined )
			{
				sCourseName = docCourse.TopElem.name;
			}
		}

		iPartsNum = 0;

		for ( oActiveCourse in arrActiveCourses )
		{
			oTempCourse = {};
			
			if ( ! oParams.disp_parts )
			{
				oTempCourse.id 						= oActiveCourse.id.Value;
				oTempCourse.person_id 				= oActiveCourse.person_id.Value;
				oTempCourse.person_fullname 		= oActiveCourse.person_fullname.Value;
				oTempCourse.person_code 			= oActiveCourse.person_id.ForeignElem.code.Value;
				oTempCourse.person_org_name 		= oActiveCourse.person_org_name.Value;
				oTempCourse.person_subdivision_name = oActiveCourse.person_subdivision_name.Value;
				oTempCourse.person_list_staff 		= ( oParams.disp_person_list_staff ? tools.person_list_staff_by_person_id( oActiveCourse.person_id ) : oActiveCourse.person_subdivision_name.Value );
				oTempCourse.person_position_name 	= oActiveCourse.person_position_name.Value;
				oTempCourse.course_id 				= oActiveCourse.course_id.Value;
				oTempCourse.course_name 			= ( oParams.course_id != null ? sCourseName : oActiveCourse.course_id.ForeignElem.name.Value );
				oTempCourse.start_usage_date 		= ( oActiveCourse.start_usage_date.HasValue ? StrDate( oActiveCourse.start_usage_date, true, false ) : '' );
				oTempCourse.last_usage_date  		= ( oActiveCourse.last_usage_date.HasValue ? StrDate( oActiveCourse.last_usage_date, true, false ) : '' );
				oTempCourse.max_end_date 			= ( oActiveCourse.max_end_date.HasValue ? StrDate( oActiveCourse.max_end_date, true, false ) : '' );
				oTempCourse.score 					= oActiveCourse.score.Value;
				oTempCourse.max_score 				= oActiveCourse.max_score.Value;
				oTempCourse.state_id 				= oActiveCourse.state_id.Value;
				oTempCourse.state_name 				= oActiveCourse.state_id.ForeignElem.name.Value;
				oTempCourse.state_color 			= oActiveCourse.state_id.ForeignElem.text_color.Value;
				oTempCourse.parent_id 				= null;
				oTempCourse.score_with_percent 		= oActiveCourse.score.Value;

				if ( oActiveCourse.max_score > 0 )
				{
					try
					{
						oTempCourse.score_with_percent = oActiveCourse.score + ' (' + ( ( 100 * Real( oActiveCourse.score ) ) / Real( oActiveCourse.max_score ) ) + '%)';
					}
					catch( ex )
					{
					}
				}
			
				oResult.courses.push( oTempCourse );
			}
			else
			{
				docActiveCourse = tools.open_doc( oActiveCourse.id );
				if ( docActiveCourse != undefined )
				{
					teActiveCourse 						= docActiveCourse.TopElem;
					oTempCourse.id 						= teActiveCourse.id.Value;
					oTempCourse.person_id 				= teActiveCourse.person_id.Value;
					oTempCourse.person_fullname 		= teActiveCourse.person_fullname.Value;
					oTempCourse.person_code 			= teActiveCourse.person_code.Value;
					oTempCourse.person_org_name 		= teActiveCourse.person_org_name.Value;
					oTempCourse.person_subdivision_name = teActiveCourse.person_subdivision_name.Value;
					oTempCourse.person_list_staff 		= ( oParams.disp_person_list_staff ? tools.person_list_staff_by_person_id( teActiveCourse.person_id ) : teActiveCourse.person_subdivision_name.Value );
					oTempCourse.person_position_name 	= teActiveCourse.person_position_name.Value;
					oTempCourse.course_id 				= teActiveCourse.course_id.Value;
					oTempCourse.course_name 			= teActiveCourse.course_name.Value;
					oTempCourse.start_usage_date 		= ( teActiveCourse.start_usage_date.HasValue ? StrDate( teActiveCourse.start_usage_date, true, false ) : '' );
					oTempCourse.last_usage_date  		= ( teActiveCourse.last_usage_date.HasValue ? StrDate( teActiveCourse.last_usage_date, true, false ) : '' );
					oTempCourse.max_end_date 			= ( teActiveCourse.max_end_date.HasValue ? StrDate( teActiveCourse.max_end_date, true, false ) : '' );
					oTempCourse.score 					= teActiveCourse.score.Value;
					oTempCourse.max_score 				= teActiveCourse.max_score.Value;
					oTempCourse.state_id 				= teActiveCourse.state_id.Value;
					oTempCourse.state_name 				= teActiveCourse.state_id.ForeignElem.name.Value;
					oTempCourse.state_color 			= teActiveCourse.state_id.ForeignElem.text_color.Value;
					oTempCourse.parent_id 				= null;
					oTempCourse.score_with_percent 		= teActiveCourse.score.Value;
					oTempCourse.parts 					= [];

					if ( teActiveCourse.max_score > 0 )
					{
						try
						{
							oTempCourse.score_with_percent = oActiveCourse.score + ' (' + ( ( 100 * Real( teActiveCourse.score ) ) / Real( teActiveCourse.max_score ) ) + '%)';
						}
						catch( ex )
						{
						}
					}

					for ( oPart in teActiveCourse.parts )
					{
						oTempCoursePart = {};
						oTempCoursePart.parent_id = teActiveCourse.id.Value;

						// oTempCoursePart.id 						= null;
						// oTempCoursePart.person_id 				= null;
						// oTempCoursePart.person_fullname 		= '';
						// oTempCoursePart.person_code 			= '';
						// oTempCoursePart.person_org_name 		= '';
						// oTempCoursePart.person_subdivision_name = '';
						// oTempCoursePart.person_list_staff 		= '';
						// oTempCoursePart.person_position_name 	= '';
						// oTempCoursePart.course_id 				= null;
						oTempCoursePart.course_name 			= ( oPart.name != '' ? oPart.name.Value : oPart.code.Value );
						oTempCoursePart.start_usage_date 		= ( oPart.start_usage_date.HasValue ? StrDate( oPart.start_usage_date, true, false ) : '' );
						oTempCoursePart.last_usage_date  		= ( oPart.last_usage_date.HasValue ? StrDate( oPart.last_usage_date, true, false ) : '' );
						// oTempCoursePart.max_end_date 			= null;
						// oTempCoursePart.score 					= oPart.score.Value;
						// oTempCoursePart.max_score 				= oPart.max_score.Value;
						// oTempCoursePart.state_id 				= oPart.state_id.Value;
						oTempCoursePart.state_name 				= oPart.state_id.ForeignElem.name.Value;
						oTempCoursePart.state_color 			= oPart.state_id.ForeignElem.text_color.Value;
						oTempCoursePart.score_with_percent		= oPart.score.Value;

						if ( oPart.max_score > 0 )
						{
							try
							{
								oTempCoursePart.score_with_percent = oPart.score + ' (' + ( ( 100 * Real( oPart.score ) ) / Real( oPart.max_score ) ) + '%)';
							}
							catch( ex )
							{
							}
						}

						oTempCourse.parts.push( oTempCoursePart );
						iPartsNum ++;
					}

					oResult.courses.push( oTempCourse );
				}
			}
		}

		
		if ( ! oParams.disp_parts && ArrayCount( oResult.courses ) > oParams.max_visible_rows )
		{
			oResult.immediate_export = true;
			oResult.rows_count = ArrayCount( oResult.courses );
		}

		if ( oParams.disp_parts && ( ArrayCount( oResult.courses ) + iPartsNum ) > oParams.max_visible_rows )
		{
			oResult.immediate_export = true;
			oResult.rows_count = ArrayCount( oResult.courses ) + iPartsNum;
		}

		oResult.exported_file_link = tools_report.save_report_to_file( '', oParams.report_name, 'xlsx', '', oParams.bIsWebClient, oParams.columns, oResult.courses );

		return oResult;
	"/>

	<!-- Тестирование -->
	<question_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" PARAM="curUser" EXPR="

		oResult = new Object();
		oResult.error = 0;

		if ( oParams == null || oParams == undefined )
		{
			oResult.error = 1;
		}

		var arrXQueryConditions = new Array();
		var arrPersonIDs = new Array();

		if ( oParams.assessment_id != null )
			arrXQueryConditions.push( '$elem/assessment_id = ' + oParams.assessment_id );

		if ( oParams.start_date != null )
			arrXQueryConditions.push( '$elem/start_usage_date >= date( \'' + DateNewTime( oParams.start_date, 0, 0, 0 ) + '\' )' );

		if ( oParams.finish_date != null )
			arrXQueryConditions.push( '$elem/start_usage_date <= date( \'' + DateNewTime( oParams.finish_date, 23, 59, 59 ) + '\' )' );

		if ( oParams.person_id != null )
		{
			arrPersonIDs.push( oParams.person_id );
		}
		else if ( oParams.org_id != null || oParams.parent_object_id != null || oParams.group_id != null )
		{
			if ( oParams.org_id != null || oParams.parent_object_id != null )
			{
				iSubdivisionID = oParams.parent_object_id != null ? oParams.parent_object_id : oParams.org_id;

				if ( oParams.hier_sub_select )
				{
					arrPersonIDs = tools.get_sub_person_ids_by_subdivision_id( iSubdivisionID );
				}
				else
				{
					arrPersonIDs = ArrayExtract( XQuery( 'for $elem in subs where $elem/parent_id = ' + iSubdivisionID + ' and $elem/basic_collaborator_id != null() and $elem/type=&quot;position&quot; return $elem' ), 'basic_collaborator_id' );
				}

				arrPersonIDs = ArraySelectDistinct( arrPersonIDs );
			}

			if ( oParams.group_id != null )
			{
				arrGroupPersonsIDs = new Array();

				docGroup = tools.open_doc( oParams.group_id );
				if ( docGroup != undefined )
				{
					arrGroupPersonsIDs = ArrayExtract( docGroup.TopElem.collaborators, 'collaborator_id' );
				}

				arrPersonIDs = ArrayCount( arrPersonIDs ) > 0 ? tools_report.arrayCross( arrPersonIDs, arrGroupPersonsIDs ) : arrGroupPersonsIDs;
			}
		}

		if ( ArrayCount( arrPersonIDs ) > 0 )
		{
			arrXQueryConditions.push( 'MatchSome( $elem/person_id, ( ' + ArrayMerge( arrPersonIDs, 'This', ',' ) + ' ) )' );
		}

		sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

		arrTypes = String( oParams.disp_learning_type ).split( ',' );

		arrAllTests = new Array();

		for ( sTypeElem in arrTypes )
		{
			arrTests = XQuery( 'for $elem in ' + sTypeElem + sXQueryConditions + ' return $elem' );
			arrAllTests = ArrayUnion( arrAllTests, arrTests );
		}

		CheckCurThread();

		var progress = new TaskProgress;
		progress.TaskName = 'Идёт построение отчёта';

		oResult.questions = [];

		arrAllQuestions = ArraySelectAll( XQuery( 'for $elem in items order by $elem/id return $elem/Fields( \'id\', \'name\', \'question_points\' )' ) );

		dataForm = OpenNewDoc( 'x-local://wtv/wtv_question_report_table_data.xmd' ).TopElem;

		for ( catTest in arrAllTests )
		{
			oTempTest = {};
			oTempTest.id = catTest.id;

			try
			{
				teTest = OpenDoc( UrlFromDocID( catTest.id ) ).TopElem;
			}
			catch( ex )
			{
				continue;
			}

			teAnnals = tools.annals_decrypt( teTest );
			if ( teAnnals == null )
				continue;

			oCurHistory = teAnnals.au.history;

			if ( ArrayCount( oCurHistory.objects ) == 0 )
				continue;

			arrCurSections = ArrayFirstElem( oCurHistory.objects ).section;

			try
			{
				sAssessmentName = teTest.assessment_name;
			}
			catch ( ex )
			{
				sAssessmentName = ms_tools.get_const( 'jmkcjvkz8n' );
			}

			for ( oSection in arrCurSections )
			{
				_child = dataForm.sections.ObtainChildByKey( oSection.PrimaryKey );
				_child.AssignElem( oSection );

				for ( oQuestion in oSection.question )
				{
					try
					{
						oCurQuestion = dataForm.questions.ObtainChildByKey( oQuestion.PrimaryKey + '_' + catTest.assessment_id );

						bIsWeight = ( ArrayOptFind( oQuestion.variant, 'varscore.HasValue' ) != undefined );

						oCurQuestion.qtype = oQuestion.qtype;
						oCurQuestion.state = oQuestion.state;

						catItem = ArrayOptFindBySortedKey( arrAllQuestions, OptInt( oQuestion.ident, 0 ), 'id' );
						oCurQuestion.maxweight = ( catItem != undefined ? catItem.question_points : 0 );

						oCurQuestion.text = StrBegins( oQuestion.text, '<' ) ? '<' + HtmlToPlainText( StrRightRangePos( oQuestion.text, 1 ) ) : HtmlToPlainText( oQuestion.text );
						oCurQuestion.assessment_id = teTest.assessment_id;
						oCurQuestion.assessment_name = sAssessmentName;
						oCurQuestion.section_id = oSection.PrimaryKey;
						oCurQuestion.section_name = oSection.title;
						oCurQuestion.num = oCurQuestion.num + 1;

						if ( tools_web.is_correct_question( oQuestion )) //( oQuestion.state == 'passed' )
							oCurQuestion.correct_num += 1;
						else
							oCurQuestion.incorrect_num += 1;

						for ( oVariant in oQuestion.variant )
						{
							oAnswer = oCurQuestion.variants.ObtainChildByKey( oVariant.PrimaryKey );
							oAnswer.AssignElem( oVariant );
							oAnswer.text = StrBegins( oVariant.text, '<' ) ? '<' + HtmlToPlainText( StrRightRangePos( oVariant.text, 1 ) ) : HtmlToPlainText( oVariant.text );

							switch ( oQuestion.qtype )
							{
								case 'range':
									oAnswer.cor_text = StrInt( oAnswer.ChildIndex + 1 );
									break;
								case 'numeric':
									sCorrectText = '';
									for ( sCondition in oVariant.cond )
									{
										sCorrectText = sCorrectText + sCondition.operator.ForeignElem.name + Trim( sCondition ) + '; ';
									}
									oAnswer.cor_text = sCorrectText;
									break;
								case 'text':
									sCorrectText = '';
									for ( sCondition in oVariant.cond )
									{
										sCorrectText = sCorrectText + ( sCondition.operator == 'cn' ? '...' + Trim( sCondition ) + '...' : Trim( sCondition ) ) + '; ';
									}
									oAnswer.cor_text = sCorrectText;
									break;
								case 'oto':
									oAnswer.cor_text = Trim( oVariant.cor_value );
									break;
								default:
									oAnswer.cor_text = ( oVariant.correct == '1' ? 'v' : '' );
									break;
							}

							if ( Trim( oVariant ) == '1' )
								oAnswer.correct_num = oAnswer.correct_num + 1;
						}
					}
					catch ( error )
					{
						alert( error )
					}
				}
			}
		}

		oResult.sDataUrl = fnSaveFile( dataForm.GetXml( { 'tabs': false } ), 'Xml' );

		return oResult;
	"/>

	<test_question_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" PARAM="curUser" EXPR="

		oResult = new Object();
		oResult.error = 0;

		arrPersons = new Array();
		arrAllTests = new Array();

		if ( oParams == null || oParams == undefined )
		{
			oResult.error = 1;
		}

		var arrXQueryConditions = new Array();
		var arrPersonIDs = new Array();

		if ( oParams.assessment_id != null )
			arrXQueryConditions.push( '$elem/assessment_id = ' + oParams.assessment_id );

		if ( oParams.start_date != null )
			arrXQueryConditions.push( '$elem/start_usage_date >= date( \'' + DateNewTime( oParams.start_date, 0, 0, 0 ) + '\' )' );

		if ( oParams.finish_date != null )
			arrXQueryConditions.push( '$elem/start_usage_date <= date( \'' + DateNewTime( oParams.finish_date, 23, 59, 59 ) + '\' )' );

		if ( oParams.person_id != null )
			arrXQueryConditions.push( '$elem/person_id = ' + oParams.person_id );

		if ( oParams.group_id != null )
		{
			arrGroupPersonsIDs = new Array();

			docGroup = tools.open_doc( oParams.group_id );
			if ( docGroup != undefined )
			{
				arrGroupPersonsIDs = ArrayExtract( docGroup.TopElem.collaborators, 'collaborator_id' );

				arrXQueryConditions.push( 'MatchSome( $elem/person_id, ( ' + ArrayMerge( arrGroupPersonsIDs, 'This.PrimaryKey', ',' ) + ' ) ) ' );
			}
		}

		if ( oParams.parent_object_id != null )
		{
			catSub = ArrayOptFirstElem( XQuery('for $elem in subdivisions where $elem/id = ' + oParams.parent_object_id + ' return $elem') );

			arrPersonsIDs = ArrayExtract( tools.xquery( 'for $elem in person_hierarchys where MatchSome( $elem/subdivision_id, ( ' + ( catSub != undefined ? catSub.id : null ) + ' ) ) return $elem/Fields( \'collaborator_id\')' ), 'This.collaborator_id' );

			if ( oParams.hier_sub_select )
			{
				arrXQueryConditions.push( 'MatchSome( $elem/person_id, ( ' + ArrayMerge( arrPersonsIDs, 'This.PrimaryKey', ',' ) + ' ) ) ' );
			}
			else
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/position_parent_id = ' + oParams.parent_object_id + ' )' );
			}
		}

		if ( oParams.org_id != null && oParams.parent_object_id == null )
		{
			if ( oParams.hier_sub_select )
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/org_id = ' + oParams.org_id + ' )' );
			}
			else
			{
				arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/org_id = ' + oParams.org_id + ' and $person/position_parent_id = null() )' );
			}
		}

		var sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

		if ( oParams.disp_learning_type == '(active_test_learnings,test_learnings)' )
		{
			arrAllTests = XQuery( 'for $elem in active_test_learnings ' + sXQueryConditions + ' return $elem' );

			arrAllTests = ArrayUnion( arrAllTests, XQuery( 'for $elem in test_learnings ' + sXQueryConditions + ' return $elem' ) );
		}
		else
		{
			arrAllTests = XQuery( 'for $elem in ' + oParams.disp_learning_type + sXQueryConditions + ' return $elem' );
		}

		CheckCurThread();

		var progress = new TaskProgress;
		progress.TaskName = 'Идёт построение отчёта';

		dataForm = OpenNewDoc( 'x-local://wtv/wtv_test_question_report_table_data.xmd' ).TopElem;

		for ( catTest in arrAllTests )
		{
			try
			{
				teTest = OpenDoc( UrlFromDocID( catTest.PrimaryKey ) ).TopElem;

				_child = dataForm.learnings.AddChild();
				_child.AssignElem( teTest );

				if ( oParams.disp_person_list_staff )
					_child.person_list_staff = tools.person_list_staff_by_person_id( catTest.person_id );

				try
				{
					_child.person_code = catTest.person_id.ForeignElem.code
				}
				catch(ex)
				{
					_child.person_code = '';
				}

				try
				{
					_child.person_org_name = catTest.person_id.ForeignElem.org_name;
				}
				catch(ex)
				{
					_child.person_org_name = '';
				}

				try
				{
					_child.state_name = catTest.state_id.ForeignElem.name;
				}
				catch(ex)
				{
					_child.state_name = '';
				}

				_child.per_cent = _child.max_score.HasValue &amp;&amp; _child.max_score != 0 ? ( _child.score / _child.max_score ) * 100. : 0;

				fldAnnals = tools.annals_decrypt( teTest );
				if ( fldAnnals == null )
					continue;

				_cur_history = fldAnnals.au.history;

				if ( ArrayCount( _cur_history.objects ) == 0 )
					continue;

				_cur_sections = ArrayFirstElem( _cur_history.objects ).section;

				for ( _section in _cur_sections )
				{
					for ( _question in _section.question )
					{
						try
						{
							_cur_ques = dataForm.questions.ObtainChildByKey( _question.PrimaryKey );
							
							sQuestText = HtmlToPlainText( _question.text );

							if (oParams.disp_full_question_text==false)
							{
								_cur_ques.text = StrCharCount( sQuestText ) &gt; oParams.text_length ? StrLeftCharRange( sQuestText, oParams.text_length ) + '...' : sQuestText;
							}
							else
							{
								_cur_ques.text = sQuestText;
							}

							bIsWeight=(ArrayOptFind( _question.variant, 'varscore.HasValue' ) != undefined)

							_cur_ques = _child.questions.ObtainChildByKey( _question.PrimaryKey );

							_cur_ques.result = (! bIsWeight ? (tools_web.is_correct_question( _question )?StrNonTitleCase( ms_tools.get_const('lcnwu5wcgk') ):StrNonTitleCase( ms_tools.get_const('r1s987zw3e') )):'');
							
							_cur_ques.quest_type = (_question.qtype.OptForeignElem!=undefined?_question.qtype.ForeignElem.name:'') + ( bIsWeight ? ' ' + ms_tools.get_const('ruqnhtrz42') : '' )
							
							
							switch ( _question.qtype )
							{
								case 'choice':
								case 'select':
									_cur_ques.correct_answer = ArrayMerge( ArraySelect( _question.variant, 'correct==\'1\'' ), 'HtmlToPlainText(text)', '; ' );
									break;

								case 'range':
									_str = '';
									_counter = 0;
									for ( _answer in _question.variant )
										_str += ( _str == '' ? '' : '; ' ) + _counter++;
									_cur_ques.correct_answer = _str;
									break;

								case 'numeric':
									_cur_ques.correct_answer = ArrayMerge( _question.variant, 'ArrayMerge(cond,\'operator.ForeignElem.name+Trim(Value)\',\', \')', '; ' );
									break;

								case 'text':
									_cur_ques.correct_answer = ArrayMerge( _question.variant, 'ArrayMerge(cond,\'operator==\\\'cn\\\'?\\\'...\\\'+Trim(Value)+\\\'...\\\':Trim(Value)\',\', \')', '; ' );
									break;

								default:
									_cur_ques.correct_answer = ArrayMerge( _question.variant, 'HtmlToPlainText(cor_value)', '; ' );
									break;
							}
							
							switch ( _question.qtype )
							{
								case 'choice':
								case 'select':
									_cur_ques.answer = ArrayMerge( ArraySelect( _question.variant, 'Trim( This )==\'1\'' ), 'HtmlToPlainText(text)', '; ' );
									break;

								case 'range':
									_cur_ques.answer = ArrayMerge(  ArraySelect( _question.variant, 'Trim( value )!=\'\'' ), 'HtmlToPlainText(value)', '; ' );
									break;
								default:
									_cur_ques.answer = ArrayMerge( _question.variant, 'HtmlToPlainText(value)', '; ' );
									break;
							}
							
						}
						catch ( fff )
						{
							alert(fff)
						}
					}
				}

			}
			catch ( err )
			{
				alert( err )
			}
		}

		oResult.sDataUrl = fnSaveFile( dataForm.GetXml( { 'tabs': false } ), 'Xml' );

		return oResult;
	"/>

	<!-- План преемственности -->
	<successors_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" PARAM="curUser" EXPR="

//key_position_id

		oResult = new Object();
		oResult.error = 0;
		oResult.successors = new Array();

		if ( oParams == null || oParams == undefined )
		{
			oResult.error = 1;
		}

		var arrXQueryConditions = new Array();
		var arrPersonsIDs = new Array();
		var arrPersons = new Array();

		curUser = tools.get_cur_user();
		var teApplication = null;
		var iApplLevel = 0;

		teApplication = tools_app.get_cur_application();

		if ( teApplication != null )
		{
			iApplLevel = tools.call_code_library_method( 'libApplication', 'GetPersonApplicationAccessLevel', [ curUser.id, teApplication.id ] );
			if ( teApplication != null && teApplication != undefined )
			{
				switch ( iApplLevel )
				{
					case 10:
					case 7:
						break;

					case 5:
							arrBossTypes = [];
							
							if ( teApplication.wvars.GetOptChildByKey( 'manager_type_id' ) != undefined )
							{
								iManagerTypeID = OptInt( teApplication.wvars.GetOptChildByKey( 'manager_type_id' ).value, 0 );
								if ( iManagerTypeID > 0 )
									arrBossTypes.push( iManagerTypeID )
							}

							if ( ArrayOptFirstElem( arrBossTypes ) == undefined )
							{
								arrBossTypes = ArrayExtract( tools.xquery( 'for $elem in boss_types where $elem/code = \'education_manager\' return $elem' ), 'id' );
							}

							arrPersonsIDs = tools.call_code_library_method( 'libMain', 'get_subordinate_records', [ curUser.id, [ 'func' ], true, '', [ 'id', 'position_parent_id' ], '', true, true, true, true, arrBossTypes, true ] )

						break;

					case 3:

						catExpert = ArrayOptFirstElem( tools.xquery( 'for $elem in experts where $elem/type = \'collaborator\' and $elem/person_id = ' + curUser.id + ' return $elem/Fields( \'id\' )' ) );

						arrRoles = [];
						if ( catExpert != undefined )
						{
							arrRoles = tools.xquery( 'for $elem in roles where $elem/catalog_name = \'key_position\' and contains( $elem/experts, ' + OptInt( catExpert.id, 0 ) + ' ) return $elem/Fields( \'id\')' );
						}

						arrKeyPositions = XQuery( 'for $elem in key_positions where MatchSome( $elem/role_id, ( ' + ArrayMerge( arrRoles, 'This.id', ',' ) + ' ) ) order by $elem/id return $elem/Fields( \'id\' )' );

						arrXQueryConditions.push( 'MatchSome( $elem/key_position_id, ( ' + ArrayMerge( arrKeyPositions, 'This.id', ',' ) + ' ) )' )

						break;

					case 1:

							arrPersonsIDs = tools.call_code_library_method( 'libMain', 'get_subordinate_records', [ curUser.id, [ 'func' ], true, '', [ 'id', 'position_parent_id' ], '', true, true, true, true, [], true ] )

						break;

				}
			}
		}

		if ( oParams.parent_object_id != null )
		{
			iSubdivisionID = oParams.parent_object_id != null ? oParams.parent_object_id : oParams.org_id;

			if ( oParams.hier_sub_select )
			{
				arrSubDivisions = tools.xquery( 'for $elem in subdivisions where IsHierChildOrSelf( $elem/id, ' + XQueryLiteral( iSubdivisionID ) + ' ) order by $elem/Hier() return $elem' );
				arrPersons = tools.xquery( 'for $elem_qc in collaborators where MatchSome( $elem_qc/position_parent_id, ( ' + ArrayMerge( arrSubDivisions, 'This.id', ',' ) + ' ) ) order by $elem/id return $elem_qc' );
			}
			else
			{
				arrPersons = tools.xquery( 'for $elem_qc in collaborators where $elem_qc/position_parent_id = iSubdivisionID order by $elem/id return $elem_qc' );
			}

			if ( ArrayCount( arrPersonsIDs ) > 0 )
			{
				arrPersonsIDs = arrayCross( arrPersonsIDs, ArrayExtract( arrPersons, 'This.id' ) )
			}
			else
			{
				arrPersonsIDs = ArrayExtract( arrPersons, 'This.id' )
			}
		}

		if ( ArrayCount( arrPersonsIDs ) > 0 )
		{
			arrXQueryConditions.push( 'MatchSome( $elem/person_id, ( ' + ArrayMerge( arrPersonsIDs, 'This', ',' ) + ' ) )' )
		}

		if ( oParams.statuses != null && ArrayCount( oParams.statuses.status ) > 0 )
			arrXQueryConditions.push( 'MatchSome( $elem/status, ( ' + ArrayMerge( oParams.statuses.status, 'XQueryLiteral( This.id )', ',' ) + ' ) )' );

		if ( oParams.development_potentials != null && ArrayCount( oParams.development_potentials.development_potential ) > 0 )
			arrXQueryConditions.push( 'MatchSome( $elem/development_potential_id, ( ' + ArrayMerge( oParams.development_potentials, 'This.id', ',' ) + ' ) )' );

		if ( oParams.efficiency_estimations != null && ArrayCount( oParams.efficiency_estimations.efficiency_estimation ) > 0 )
			arrXQueryConditions.push( 'MatchSome( $elem/efficiency_estimation_id, ( ' + ArrayMerge( oParams.efficiency_estimations, 'This.id', ',' ) + ' ) )' );

		if ( oParams.readiness_levels != null && ArrayCount( oParams.readiness_levels.readiness_level ) > 0 )
			arrXQueryConditions.push( 'MatchSome( $elem/readiness_level_id, ( ' + ArrayMerge( oParams.readiness_levels, 'This.id', ',' ) + ' ) )' );
		
		// ключевая должность
		if ( oParams.key_position_id != null )
			arrXQueryConditions.push( 'MatchSome( $elem/key_position_id, ( ' + oParams.key_position_id + ' ) )' );

		// типовая должность
		if ( oParams.position_common_id != null )
		{
			sQuery = 'for $elem in positions where MatchSome($elem/position_common_id, ' + oParams.position_common_id + ') return $elem'
			xarrPositions = tools.xquery(sQuery);
			aBasicCollaboratorIDs = ArrayExtract(xarrPositions, 'basic_collaborator_id');
			arrXQueryConditions.push( 'MatchSome( $elem/key_person_id, ( ' + ArrayMerge( aBasicCollaboratorIDs, 'This', ',' ) + ' ) )' );
		}

		sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';
		sQuery = 'for $elem in successors ' + sXQueryConditions + ' order by $elem/id return $elem/Fields( \'id\' )'
		arrSuccessors = XQuery( sQuery );

		arrDevelopmentPotentialNames = ArraySelectAll( XQuery( 'for $elem in development_potentials order by $elem/id return $elem/Fields( \'id\', \'name\' )' ) );
		arrEfficiencyEstimations = ArraySelectAll( XQuery( 'for $elem in efficiency_estimations order by $elem/id return $elem/Fields( \'id\', \'name\' )' ) );
		arrReadinessLevels = ArraySelectAll( XQuery( 'for $elem in readiness_levels order by $elem/id return $elem/Fields( \'id\', \'name\' )' ) );

		for ( catSuccessor in arrSuccessors )
		{
			docSuccessor = tools.open_doc( catSuccessor.id );
			if ( docSuccessor != undefined )
			{
				teSuccessor = docSuccessor.TopElem;
			}
			else
			{
				continue;
			}

			oTempSuccessor = new Object();
			oTempSuccessor.id						= teSuccessor.id.Value;
			oTempSuccessor.person_fullname			= teSuccessor.person_fullname.Value;
			oTempSuccessor.position_id				= teSuccessor.person_position_id.Value;
			oTempSuccessor.position_name			= teSuccessor.person_position_name.Value;
			oTempSuccessor.subdivision_id			= teSuccessor.person_subdivision_id.Value;
			oTempSuccessor.subdivision_name			= teSuccessor.person_subdivision_name.Value;
			oTempSuccessor.key_position_id			= teSuccessor.key_position_id.Value;
			oTempSuccessor.key_position_name		= teSuccessor.key_position_id.person_position_name.Value;
			oTempSuccessor.key_position_sub_name	= teSuccessor.key_position_id.person_subdivision_name.Value;
			
			oTempSuccessor.development_potential_id	= teSuccessor.development_potential_id.Value;
			oTempSuccessor.efficiency_estimation_id	= teSuccessor.efficiency_estimation_id.Value;
			oTempSuccessor.readiness_level_id		= teSuccessor.readiness_level_id.Value;
			oTempSuccessor.status					= common.successor_status_types.GetOptChildByKey( teSuccessor.status.Value ).name.Value;

			oColl = tools.open_doc(teSuccessor.person_id.Value);
			oCollTE = oColl.TopElem;
			
			// Пол 
				oTempSuccessor.sex = '';
				sSex = oCollTE.sex;
				if(sSex != undefined)
				{
					oTempSuccessor.sex	= sSex.Value;
				}
				
			// Возраст 
				oTempSuccessor.age = null;
				
				sAge = tools.call_code_library_method ('libAnalytics', 'GetAge', [oCollTE.birth_date.Value]);
				if(sAge != undefined || sAge != null)
				{
					oTempSuccessor.age = sAge;
				}
			
			// Образование 
				//oTempSuccessor.education = ''; // в разработке
			
			// Стаж в компании (лет)
				oTempSuccessor.exp_years_company = '';
				
				_experience = tools.call_code_library_method ('libAnalytics', 'GetAge', [oCollTE.hire_date.Value])
				if(_experience == 0)
				{
					oTempSuccessor.exp_years_company = 'до 1 года'
				} else if(_experience == 1)
				{
					oTempSuccessor.exp_years_company = '1 год'
				} else 
				{
					oTempSuccessor.exp_years_company = _experience + ' года'
				}
				
				if(_experience >= 5 && _experience <= 20)
				{
					oTempSuccessor.exp_years_company = _experience + ' лет'
				}
				
				if(_experience > 20)
				{
					oTempSuccessor.exp_years_company = 'больше 20 лет'
				}
				
				if(_experience == null)
				{
					oTempSuccessor.exp_years_company = ''
				}
			
			// Стаж на должности (лет) 
				oTempSuccessor.exp_years_position = '';
				
				_position_date = tools.call_code_library_method ('libAnalytics', 'GetAge', [oCollTE.position_date.Value])
				if(_position_date == 0)
				{
					oTempSuccessor.exp_years_position = 'до 1 года'
				} else if(_position_date == 1)
				{
					oTempSuccessor.exp_years_position = '1 год'
				} else 
				{
					oTempSuccessor.exp_years_position = _position_date + ' года'
				}
				
				if(_position_date >= 5 && _position_date <= 20)
				{
					oTempSuccessor.exp_years_position = _position_date + ' лет'
				}
				
				if(_position_date > 20)
				{
					oTempSuccessor.exp_years_position = 'больше 20 лет'
				}
				
				if(_position_date == null)
				{
					oTempSuccessor.exp_years_position = ''
				}

			// Длительность нахождения в резерве (мес.)
				oTempSuccessor.exp_month_reserve = '';
				
				if(teSuccessor.person_id.HasValue)
				{
					sIncludeReserveDate = '';
					arrPersonnelReserves = tools.xquery( 'for $elem in personnel_reserves where MatchSome( $elem/person_id, ( ' + teSuccessor.person_id.Value + ' ) ) and $elem/status = \'in_reserve\' return $elem' );
					
					if(ArrayOptFirstElem(arrPersonnelReserves) != undefined)
					{
						aIncludeReserveDate = ArrayExtract(arrPersonnelReserves, 'This.include_reserve_date.Value');
	
						sIncludeReserveDate = ParseDate( ArrayOptFirstElem(aIncludeReserveDate) );
						
						iMohthDiff = tools.call_code_library_method ('libAnalytics', 'monthDiff', [ sIncludeReserveDate, Date() ]);
						
							if(iMohthDiff == 0)
							{
								oTempSuccessor.exp_month_reserve = 'до 1 мес.' // duration
							} else 
							{
								oTempSuccessor.exp_month_reserve = iMohthDiff + ' мес.'
							}
							
							if(iMohthDiff > 12)
							{
								oTempSuccessor.exp_month_reserve = 'больше 1 года'
							}
							
							if(iMohthDiff == null)
							{
								oTempSuccessor.exp_month_reserve = ''
							}
						
						//LogEvent('DEVELOPER_REPORT_SERVER', alert(tools.object_to_text(iMohthDiff,'json')))
					}
				}
			
			// Эффективность 
				oTempSuccessor.efficiency = null;
				
				sQuery = 'for $elem in career_reserves where MatchSome( $elem/person_id, ( ' + teSuccessor.person_id.Value + ' ) ) return $elem'
				arrCareerReserves = tools.xquery( sQuery );
				if(ArrayOptFirstElem(arrCareerReserves) != undefined)
				{
					oCareerReserves = ArrayOptFirstElem(arrCareerReserves);
					oTempSuccessor.efficiency = oCareerReserves != undefined ? oCareerReserves.readiness_percent.Value + '%': null;
				}
			
			// Выполнение ИПР
				oTempSuccessor.pdp_score_summary = null;
				
				aPDPScoreSummary = tools.call_code_library_method ('libAssessment', 'GetPDPScoreSummary', [ teSuccessor.person_id.Value ]);
				for(oItem in aPDPScoreSummary.array)
				{
					oTempSuccessor.pdp_score_summary = OptInt(oItem.value) + '%';
				}
			
			// Оценка эффективности 
				oTempSuccessor.efficiency_estimation_name = '';
				
				if(teSuccessor.efficiency_estimation_id.HasValue)
				{
					arrDevelopmentPotentials = tools.xquery( 'for $elem in efficiency_estimations where MatchSome( $elem/id, ( ' + teSuccessor.efficiency_estimation_id.Value + ' ) ) return $elem' );
					
					if(ArrayOptFirstElem(arrDevelopmentPotentials) != undefined)
					{
						oTempSuccessor.efficiency_estimation_name = ArrayOptFirstElem(ArrayExtract(arrDevelopmentPotentials, 'This.name.Value'));
					}
				}

			// Потенциал развития 
				oTempSuccessor.development_potential_name = '';
				
				if(teSuccessor.development_potential_id.HasValue)
				{
					arrDevelopmentPotentials = tools.xquery( 'for $elem in development_potentials where MatchSome( $elem/id, ( ' + teSuccessor.development_potential_id.Value + ' ) ) return $elem' );
					
					if(ArrayOptFirstElem(arrDevelopmentPotentials) != undefined)
					{
						oTempSuccessor.development_potential_name = ArrayOptFirstElem(ArrayExtract(arrDevelopmentPotentials, 'This.name.Value'));
					}
				}
			
			// Уровень готовности
				oTempSuccessor.readiness_level_name = '';

				if(teSuccessor.readiness_level_id.HasValue)
				{
					arrReadinessLevels = tools.xquery( 'for $elem in readiness_levels where MatchSome( $elem/id, ( ' + teSuccessor.readiness_level_id.Value + ' ) ) return $elem' );
					
					if(ArrayOptFirstElem(arrReadinessLevels) != undefined)
					{
						oTempSuccessor.readiness_level_name = ArrayOptFirstElem(ArrayExtract(arrReadinessLevels, 'This.name.Value'));
					}
				}
			
			// Регион
				oTempSuccessor.region_name = '';

				if(oCollTE.region_id.HasValue)
				{
					arrRegions = tools.xquery( 'for $elem in regions where MatchSome( $elem/id, ( ' + oCollTE.region_id.Value + ' ) ) return $elem' );
					
					if(ArrayOptFirstElem(arrRegions) != undefined)
					{
						oTempSuccessor.region_name = ArrayOptFirstElem(ArrayExtract(arrRegions, 'This.name.Value'));
					}
				}

			oResult.successors.push( oTempSuccessor );
		}

		return oResult;

	"/>

	<key_positions_protection_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oParams" PARAM="curUser" EXPR="

		oResult = new Object();
		oResult.error = 0;
		oResult.key_positions = new Array();

		if ( oParams == null || oParams == undefined )
		{
			oResult.error = 1;
		}

		var arrXQueryConditions = new Array();
		var arrPersonsIDs = new Array();
		var arrPersons = new Array();
		var arrSubsIDs = new Array();

		curUser = tools.get_cur_user();
		var teApplication = null;
		var iApplLevel = 0;

		teApplication = tools_app.get_cur_application();

		if ( teApplication != null )
		{
			iApplLevel = tools.call_code_library_method( 'libApplication', 'GetPersonApplicationAccessLevel', [ curUser.id, teApplication.id ] );
			if ( teApplication != null && teApplication != undefined )
			{
				switch ( iApplLevel )
				{
					case 10:
					case 7:
						break;

					case 5:
							arrBossTypes = [];
							
							if ( teApplication.wvars.GetOptChildByKey( 'manager_type_id' ) != undefined )
							{
								iManagerTypeID = OptInt( teApplication.wvars.GetOptChildByKey( 'manager_type_id' ).value, 0 );
								if ( iManagerTypeID > 0 )
									arrBossTypes.push( iManagerTypeID )
							}

							if ( ArrayOptFirstElem( arrBossTypes ) == undefined )
							{
								arrBossTypes = ArrayExtract( tools.xquery( 'for $elem in boss_types where $elem/code = \'education_manager\' return $elem' ), 'id' );
							}

							arrPersons = tools.call_code_library_method( 'libMain', 'get_subordinate_records', [ curUser.id, [ 'func' ], false, '', [ 'id', 'position_parent_id' ], '', true, true, true, true, arrBossTypes, true ] )
							arrSubsIDs = ArraySelectDistinct( ArrayExtractKeys( arrPersons, 'position_parent_id' ), 'This' );

						break;

					case 3:

							catExpert = ArrayOptFirstElem( tools.xquery( 'for $elem in experts where $elem/type = \'collaborator\' and $elem/person_id = ' + curUser.id + ' return $elem/Fields( \'id\' )' ) );

							arrRoles = [];
							if ( catExpert != undefined )
							{
								arrRoles = tools.xquery( 'for $elem in roles where $elem/catalog_name = \'key_position\' and contains( $elem/experts, ' + OptInt( catExpert.id, 0 ) + ' ) return $elem/Fields( \'id\')' );
							}

							arrXQueryConditions.push( 'MatchSome( $elem/role_id, ( ' + ArrayMerge( arrRoles, 'This.id', ',' ) + ' ) )' )

						break;

					case 1:

							arrPersons = tools.call_code_library_method( 'libMain', 'get_subordinate_records', [ curUser.id, [ 'func' ], false, '', [ 'id', 'position_parent_id' ], '', true, true, true, true, [], true ] )
							arrSubsIDs = ArraySelectDistinct( ArrayExtractKeys( arrPersons, 'position_parent_id' ), 'This' );

						break;

				}
			}
		}

		if ( oParams.parent_object_id != null || oParams.org_id != null)
		{
			iSubdivisionID = oParams.parent_object_id != null ? oParams.parent_object_id : oParams.org_id;

			if (oParams.org_id != null && oParams.parent_object_id == null)
			{
				arrSubDivisions = tools.xquery('for $elem in subdivisions where $elem/org_id = '+XQueryLiteral(OptInt(oParams.org_id, 0))+' return $elem');
			}
			else
			if ( oParams.hier_sub_select )
			{
				arrSubDivisions = tools.xquery( 'for $elem in subdivisions where IsHierChildOrSelf( $elem/id, ' + XQueryLiteral( iSubdivisionID ) + ' ) order by $elem/Hier() return $elem' );
			}
			else
			{
				arrSubDivisions = tools.xquery( 'for $elem_qc in subdivisions where $elem_qc/id = iSubdivisionID order by $elem/id return $elem_qc' );
			}

			if ( ArrayCount( arrSubsIDs ) > 0 )
			{
				arrSubDivisionsIDs = arrayCross( ArrayExtractKeys( arrSubDivisions, 'id' ), arrSubsIDs )
			}
			else
			{
				arrSubDivisionsIDs = ArrayExtract( arrSubDivisions, 'This.id' )
			}
			if (ArrayOptFirstElem(arrSubDivisionsIDs) == undefined)
			{
				return oResult;
			}
			
			xarrPositions = tools.xquery('for $elem in positions where MatchSome( $elem/parent_object_id, ( ' + ArrayMerge( arrSubDivisionsIDs, 'XQueryLiteral( OptInt(This, 0) )', ',' ) + ' ) ) return $elem/Fields( \'id\', \'name\' )');

			if (ArrayOptFirstElem(xarrPositions) == undefined)
			{
				return oResult;
			}

			arrXQueryConditions.push('MatchSome( $elem/position_id, ( ' + ArrayMerge( xarrPositions, 'XQueryLiteral( OptInt(This.id, 0) )', ',' ) + ' ) )')
		}

		if ( oParams.statuss != null && ArrayCount( oParams.statuss.status ) > 0 )
			arrXQueryConditions.push( 'MatchSome( $elem/status, ( ' + ArrayMerge( oParams.statuss.status, 'XQueryLiteral( This.id )', ',' ) + ' ) )' );

		if ( oParams.key_position_threat_id != null )
			arrXQueryConditions.push( '$elem/key_position_threat_id = ' + oParams.key_position_threat_id );

		sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

		arrKeyPositions = XQuery( 'for $elem in key_positions ' + sXQueryConditions + ' order by $elem/id return $elem/Fields( \'id\', \'position_id\' )' );

		arrKeyPositionThreats = ArraySelectAll( XQuery( 'for $elem in key_position_threats order by $elem/id return $elem/Fields( \'id\', \'name\' )' ) );

		arrSuccessors = XQuery( 'for $elem in successors where MatchSome( $elem/key_position_id, ( ' + ArrayMerge( arrKeyPositions, 'This.id', ',' ) + ' ) ) order by $elem/id return $elem/Fields( \'id\', \'key_position_id\',  \'status\' )' );

	
		for ( catKeyPosition in arrKeyPositions )
		{
			docKeyPosition = tools.open_doc( catKeyPosition.id );
			if ( docKeyPosition != undefined )
			{
				teKeyPosition = docKeyPosition.TopElem;
			}
			else
			{
				continue;
			}

			oTempKeyPosition = new Object();
			oTempKeyPosition.id					= teKeyPosition.id;
			oTempKeyPosition.name				= teKeyPosition.position_name;
			oTempKeyPosition.org_name			= teKeyPosition.person_org_name;
			oTempKeyPosition.subdivision_name	= teKeyPosition.person_subdivision_name;
			oTempKeyPosition.person_fullname 	= teKeyPosition.person_fullname;

			oTempKeyPosition.region_name = '';

			arrParentObjectID = ArrayExtract(tools.xquery('for $elem in positions where MatchSome( $elem/id, ( ' + catKeyPosition.position_id.Value + ' ) ) return $elem/Fields( \'parent_object_id\' ) '), 'This.parent_object_id.Value');

			iParentObjectID = null;
			if(ArrayCount(arrParentObjectID) > 0)
			{
				iParentObjectID = ArrayOptFirstElem(arrParentObjectID);

				arrRegionID = ArrayExtract(tools.xquery('for $elem in subdivisions where MatchSome( $elem/id, ( ' + iParentObjectID + ' ) ) return $elem/Fields( \'region_id\' ) '), 'This.region_id.Value');

				if(ArrayCount(arrRegionID) > 0)
				{
					iRegionID = ArrayOptFirstElem(arrRegionID);

					arrRegionName = ArrayExtract(tools.xquery('for $elem in regions where MatchSome( $elem/id, ( ' + iRegionID + ' ) ) return $elem/Fields( \'name\' ) '), 'This.name.Value');
					
					if(ArrayOptFirstElem(arrRegionName) != undefined)
					{
						oTempKeyPosition.region_name = ArrayOptFirstElem(arrRegionName);
					}
				}
			}
			
			if(oTempKeyPosition.region_name == '')
			{
				arrOrgID = ArrayExtract(tools.xquery('for $elem in positions where MatchSome( $elem/id, ( ' + catKeyPosition.position_id.Value + ' ) ) return $elem/Fields( \'org_id\' ) '), 'This.org_id.Value');

				if(ArrayOptFirstElem(arrOrgID) != undefined)
				{
					docOrg = tools.open_doc( ArrayOptFirstElem(arrOrgID) );
					if ( docOrg != undefined )
					{
						teOrg = docOrg.TopElem;
						
						if(teOrg.region_id.Value != undefined || teOrg.region_id.Value != null)
						{
							arrRegionName = ArrayExtract(tools.xquery('for $elem in regions where MatchSome( $elem/id, ( ' + teOrg.region_id.Value + ' ) ) return $elem/Fields( \'name\' ) '), 'This.name.Value');
					
							if(ArrayOptFirstElem(arrRegionName) != undefined)
							{
								oTempKeyPosition.region_name = ArrayOptFirstElem(arrRegionName);
							}
						}
					}
				}
			}


			/*
			try
			{
				oTempKeyPosition.region_name = teKeyPosition.person_subdivision_id.ForeignElem.region_id.ForeignElem.name;
			}
			catch( ex )
			{
				try
				{
					oTempKeyPosition.region_name = teKeyPosition.person_org_id.ForeignElem.region_id.ForeignElem.name;
				}
				catch( ex )
				{
					oTempKeyPosition.region_name = '';
				}
			}
			*/

			try
			{
				oTempKeyPosition.key_position_threat_name = ArrayOptFind( arrKeyPositionThreats, 'This.id == teKeyPosition.key_position_threat_id' ).name;
			}
			catch( ex )
			{
				oTempKeyPosition.key_position_threat_name = '';
			}

			oTempKeyPosition.status = common.key_position_status_types.GetOptChildByKey( teKeyPosition.status.Value ).name;
			oTempKeyPosition.risk_levels_num = ArrayCount( teKeyPosition.risk_levels );
			oTempKeyPosition.active_successors_num = ArrayCount( ArraySelect( arrSuccessors, 'This.key_position_id == teKeyPosition.id && This.status == \'active\'' ) );
			oTempKeyPosition.approved_successors_num = ArrayCount( ArraySelect( arrSuccessors, 'This.key_position_id == teKeyPosition.id && This.status == \'approved\'' ) );

			try
			{
				oTempKeyPosition.position_common_id = teKeyPosition.person_position_id.ForeignElem.position_common_id;
			}
			catch( ex )
			{
				oTempKeyPosition.position_common_id = null;
			}

			try
			{
				oTempKeyPosition.position_common_name = teKeyPosition.person_position_id.ForeignElem.position_common_id.ForeignElem.name;
			}
			catch( ex )
			{
				oTempKeyPosition.position_common_name = '';
			}



			oResult.key_positions.push( oTempKeyPosition );
		}

		return oResult;

	"/>

	<fnGetCourseVersionFromUrl PROPERTY="1" PARAM="strUrlParam" EXPR="
		var sReturn=''
		try
		{
			if (Trim(strUrlParam)!='')
			{
				sReturn=1;
				arrStrings=strUrlParam.split('/');
				iLength=ArrayCount(arrStrings);
				if (iLength>1)
				{
					sReturn=arrStrings[iLength-1]
					sReturn=Trim(sReturn)!=''?sReturn:1;
				}
			}
		}
		catch(ex)
		{
		}
		return sReturn
	"/>

	<fnCreateExcelFile PROPERTY="1" PARAM="oParam" PARAM="fldParamFormParam" PARAM="fldDataFormParam" EXPR="
		// Создание документа в формате Excel
		if (oParam==null)
		{
			oParam=new Object;
		}
		var sOrientation=oParam.GetOptProperty( 'orientation', 'Landscape')//'Portrait','Landscape'
		var sPageSize=oParam.GetOptProperty( 'page_size', 'PaperA4') //Размер бумаги
		var iNameLength = oParam.GetOptProperty( 'name_length', 20);// длина строки, умещающейся в одной строке в колонке
		var iRowHeigth=oParam.GetOptProperty( 'row_heigth', 12.75);// высота строки
		var iColumnWidth=oParam.GetOptProperty( 'column_width', 20);// ширина колонки
		var bSaveFile=tools_web.is_true(oParam.GetOptProperty( 'bSaveFile',true));//сохранять файл
		var bShowAlert=true;
		var bIncludeDataInFile=tools_web.is_true(oParam.GetOptProperty( 'bIncludeDataInFile',(fldParamFormParam.ChildExists( 'is_web_client')&&!tools_web.is_true(fldParamFormParam.is_web_client))));//включать тело с данными в массив файлов, которые вернет объект
		try
		{
			bShowAlert=(fldParamFormParam.show_alert)
		}
		catch(ex)
		{
			bShowAlert=oParam.GetOptProperty( 'show_alert', true );
		}

		var bShowGraph=oParam.GetOptProperty( 'show_graph', false);// нужно строить график
		var bShowTableColumnHeader=oParam.GetOptProperty( 'show_table_column_header', true);// нужно выводить заголовки колонок
		var bUseRealValue=oParam.GetOptProperty( 'use_real_value', true);// Выводить в таблицу значение из свойства r
		var sGraphTitle=oParam.GetOptProperty( 'graph_title', '');// заголовок график
		var sTitleRowForegroundColor=oParam.GetOptProperty( 'title_row_foreground_color', '#D9D9D9');// Цвет строки с заголовком.
		var sTitleRowBorderStyle=oParam.GetOptProperty( 'title_row_border_style', 'Thin');// Стиль границы строки с заголовком
		var sTitleRowBorderColor=oParam.GetOptProperty( 'title_row_border_color', '#000000');// Цвет границы строки с заголовком
		var sTitleRowHorizontalAlignment=oParam.GetOptProperty( 'title_row_horizontal_alignment', 'Center'); //Выравнивание по горизонтали строки с заголовком
		var sTitleRowVerticalAlignment=oParam.GetOptProperty( 'title_row_vertical_alignment', 'Top');//Выравнивание по вертикали строки с заголовком

		var sRowForegroundColor = '#FFFFFF';// Цвет строки.
		var sRowBorderStyle=oParam.GetOptProperty( 'row_border_style', 'Thin');// Стиль границы строки
		var sRowBorderColor=oParam.GetOptProperty( 'row_border_color', '#000000');// Цвет границы строки
		var sRowHorizontalAlignment=oParam.GetOptProperty( 'row_horizontal_alignment', 'Center'); //Выравнивание по горизонтали строки
		var sRowVerticalAlignment=oParam.GetOptProperty( 'row_vertical_alignment', 'Top');//Выравнивание по вертикали строки
		var strGraphType=oParam.GetOptProperty( 'graph_type', 'Line');//Тип графика.
		var sYTitle=oParam.GetOptProperty( 'y_title', ms_tools.get_const('c_value'));// заголовок графика
		var sXdataColumnName=oParam.GetOptProperty( 'Xdata_column_name', '0');// колонка в которой буду указаны подписи по оси X


		var chartCategoryData = '';
		var series = Array();
		var seriesIdx = {};
		var arrColumnTitles = tools_report.ExcelColumnsList()// колонки
		var iMaxValue=0
		var arrData = oParam.GetOptProperty( 'rows_array', ( fldDataFormParam.ChildExists('rs') ? fldDataFormParam.rs : [] ) );
		var arrColumns=oParam.GetOptProperty( 'columns_array', (fldParamFormParam.ChildExists('columns')?fldParamFormParam.columns:[]))

		var oExcelDoc = oParam.GetOptProperty( 'oExcelDoc', null)
		var sXdataColumn='A'
		var oWorksheet=null
		var iTitleRows = 1;

		function fnSetWorksheetPrperties( oWorksheetParam )
		{
			oWorksheetParam.PageSetup.Orientation = sOrientation;
			oWorksheetParam.PageSetup.PaperSize = sPageSize;
			oWorksheetParam.Cells.MemorySetting = 'MemoryPreference'; // Важный параметр, оптимизирующий потребление памяти
		}

		function fnAddColumnTitles( iRowIndexParam , iWorkSheetIndexParam )
		{
			var iNewIndex = iRowIndexParam;
			var arrMerge = [];
			var bShowColumnHeader = bShowTableColumnHeader && iWorkSheetIndexParam==0 && iNewIndex==1;

			if (bShowColumnHeader||bShowGraph)
			{
				if( ArrayOptFirstElem( arrColumns ).ChildExists( 'row' ) )
				{
					iTitleRows = OptInt( ArrayMax( arrColumns, 'This.row' ).row.Value, 1 );
				}

				for( iCount = 1; iCount <= iTitleRows; iCount++ )
				{
					iCurColumn = 0;
					if( iTitleRows == 1 )
					{
						arrTitleColumns = ArraySelectAll( arrColumns );
					}
					else
					{
						arrTitleColumns = ArraySelectByKey( arrColumns, iCount, 'row' );
					}

					for( fldColumn in arrTitleColumns )
					{
						iHSpan = 1;
						iVSpan = 1;

						strColumnTitle = '' + ms_tools.eval_column_const( fldColumn.const );

						if ( bShowColumnHeader )
						{
							//iLength = ArrayCount( StrToCharCodesArray( strColumnTitle ) );
							//iHeight = ( ( iLength / iNameLength ) + ( iLength % iNameLength > 0 ? 1 : 0 ) );
							//oWorksheet.Cells.SetRowHeight( iNewIndex, iHeight * iRowHeigth );

							oWorksheet.Cells.SetColumnWidth( iCurColumn, Real( iColumnWidth ) );

							c = oWorksheet.Cells.GetCell( arrColumnTitles[ iCurColumn ] + iNewIndex );

							c.Style.IsBold = true;
							c.Style.ForegroundColor = sTitleRowForegroundColor;
							c.Style.Borders.SetStyle( sTitleRowBorderStyle );
							c.Style.Borders.SetColor(sTitleRowBorderColor);
							c.Style.IsTextWrapped = true;
							c.Style.HorizontalAlignment = sTitleRowHorizontalAlignment;
							c.Style.VerticalAlignment = sTitleRowVerticalAlignment;
							c.Value = strColumnTitle;


							if( fldColumn.ChildExists( 'hspan' ) )
							{
								iHSpan = OptInt( fldColumn.hspan, 1 );
							}

							if( fldColumn.ChildExists( 'vspan' ) )
							{
								iVSpan = OptInt( fldColumn.vspan, 1 );
							}

							if( iHSpan > 1 || iVSpan > 1 )
							{
								arrMerge.push(
									{
										row: iNewIndex - 1,
										column: iCurColumn,
										vspan: iVSpan,
										hspan: iHSpan
									}
								);
							}
						}

						if( bShowGraph && iCount == iTitleRows )
						{
							if (sXdataColumnName==fldColumn.name)
							{
								sXdataColumn=arrColumnTitles[iCurColumn];
							}
							if (fldColumn.name!=sXdataColumnName)
							{
								oSeries = new Object
								oSeries.name = strColumnTitle
								oSeries.letter = arrColumnTitles[ iCurColumn ];
								oSeries.data = oSeries.letter + (iNewIndex+1)
								arrSeries.push(oSeries)
							}
						}

						iCurColumn += iHSpan;
					}

					if( bShowColumnHeader )
						iNewIndex++;
				}

				for( oMerge in arrMerge )
				{
					oWorksheet.Cells.Merge( oMerge.row, oMerge.column, oMerge.vspan, oMerge.hspan );
				}
			}
			return iNewIndex
		}

		function fnAddRowIndex( iRowIndexParam , iWorkSheetIndexParam, iStep )
		{
			var iNewIndex = iRowIndexParam;
			var iWorkSheetIndex = 0;
			var bNewSheet = false;
			var iCurrentWorkSheetIndex = iWorkSheetIndexParam;

			if( iRowIndexParam >= ( MaxWorksheetRows ) )
			{
				oWorksheet = oExcelDoc.GetWorksheet( oExcelDoc.WorkSheetsCount );
				if( oWorksheet == undefined )
				{
					oWorksheet = oExcelDoc.AddWorksheet();
					fnSetWorksheetPrperties( oWorksheet );
					iNewIndex = 1;
					bNewSheet = true;
					iCurrentWorkSheetIndex++
				}
			}

			if( !bNewSheet )
			{
				iNewIndex += iStep;
			}
			else
			{
				iNewIndex = fnAddColumnTitles( iNewIndex, iCurrentWorkSheetIndex );
			}
			return iNewIndex
		}

		var iStartRow = OptInt(oParam.GetOptProperty( 'iStartRow', 1),1)
		var arrSeries=[];

		if ( oExcelDoc == null )
		{
			// oExcelDoc = new ActiveXObject('Websoft.Office.Excel.Document');
			// oExcelDoc = tools.get_object_assembly( 'Excel' );

			var oAssembly = tools.dotnet_host.Object.GetAssembly( 'Websoft.Office.Excel.dll' );
			oExcelDoc = oAssembly.CreateClassObject( 'Websoft.Office.Excel.Document' );
			oExcelDoc.CreateWorkBook();
		}

		iWorkSheetIndex = (oExcelDoc.WorkSheetsCount-1);
		oWorksheet = oExcelDoc.GetWorksheet(iWorkSheetIndex);

		if( iWorkSheetIndex == 0 )
		{
			fnSetWorksheetPrperties( oWorksheet );

			fnAddColumnTitles( iStartRow, iWorkSheetIndex );
		}

		iIndex = ( iStartRow - ( iWorkSheetIndex ) * ( MaxWorksheetRows - ( bShowTableColumnHeader ? 1 : 0 ) ) )
		var iCurRow = fnAddRowIndex( iIndex, iWorkSheetIndex, iTitleRows );

		strChartCategoryData = sXdataColumn + iCurRow;

		for ( fldRow in arrData )
		{
			iMaxRowHeigth = 0;
			iCurColumn = 0

			if( iTitleRows == 1 )
			{
				arrTitleColumns = ArraySelectAll( arrColumns );
			}
			else
			{
				arrTitleColumns = ArraySelectByKey( arrColumns, iTitleRows, 'row' );
			}

			for (fldColumn in arrTitleColumns)
			{
				if (fldColumn.name=='id')
				{
					break;
				}

				strValue = '';

				fRealValue = null;

				try
				{
					strValue = fldRow.cs.GetChildByKey( fldColumn.name ).t;
				}
				catch(ex)
				{
				}

				if (bShowGraph||bUseRealValue)
				{
					try
					{
						fRealValue=fldRow.cs.GetChildByKey( fldColumn.name ).r
					}
					catch(ex)
					{
					}
				}

				if (bShowGraph&&!bUseRealValue)
				{
					if (fldColumn.name==sXdataColumnName)
					{
						fRealValue=null;
					}
				}


				c = oWorksheet.Cells.GetCell( arrColumnTitles[ iCurColumn ] + iCurRow );

				if ( fRealValue != null )
				{
					c.Value = fRealValue;
					if ( fldColumn.name != sXdataColumnName )
					{
						iMaxValue = ( iMaxValue >= fRealValue ? iMaxValue : fRealValue )
					}
				}
				else
				{
					c.Value = Trim( String( strValue ) );
				}

				iLength = ArrayCount( StrToCharCodesArray( c.Value ) );

				iHeight = ( ( iLength / iNameLength ) + ( iLength % iNameLength > 0 ? 1 : 0 ) );

				if (iMaxRowHeigth<iHeight)
				{
					oWorksheet.Cells.SetRowHeight( iCurRow, Real( iHeight * iRowHeigth ) );
					iMaxRowHeigth = iHeight;
				}

				//c.Style.ForegroundColor = sRowForegroundColor;
				c.Style.Borders.SetStyle(sRowBorderStyle);
				c.Style.Borders.SetColor(sRowBorderColor);
				c.Style.IsTextWrapped = true;
				c.Style.HorizontalAlignment = sRowHorizontalAlignment;
				c.Style.VerticalAlignment = sRowVerticalAlignment;
				try
				{
					//alert( StrHexColor( fldRow.cs.GetChildByKey( fldColumn.name ).cl ) );
					//c.Style.ForegroundColor = '#' + StrHexColor( fldRow.cs.GetChildByKey( fldColumn.name ).cl )
					//c.Style.ForegroundColor = StrHexColor( '255,255,255' );
				}
				catch(ex)
				{
					alert('ex ' + ex);
				}

				iCurColumn++;

			}
			iCurRow = fnAddRowIndex( iCurRow, iWorkSheetIndex, 1 );
		}

		strChartCategoryData = strChartCategoryData + ' : ' + sXdataColumn + ( iCurRow - 1 );

		arrChart = new Array();

		if ( bShowGraph )
		{
			if ( oParam.GetOptProperty( 'arrGraph' ) == undefined )
			{
				if ( bShowAlert ) alert( 'server strChartCategoryData = ' + strChartCategoryData )

				chart1 = oWorksheet.Charts.Add( 'Column', iCurRow + 2, 0, iCurRow + 30, 10 );
				chart1.Title.Text = sGraphTitle;
				chart1.Title.IsBold = true;
				chart1.ShowLegend = true;
				chart1.LegendPosition = 'Bottom';
				chart1.PlotArea.Area.ForegroundColor = '#FFF';
				chart1.CategoryAxis.TickLabelPosition = 'Low';
				chart1.ValueAxis.Title.IsBold = true;
				chart1.ValueAxis.Title.RotationAngle = 0;
				chart1.ValueAxis.Title.Text = sYTitle;
				try
				{
					chart1.ValueAxis.CrossAtt = 0;
				}
				catch( e )
				{}
				chart1.ValueAxis.MaxValue = iMaxValue;
				chart1.ValueAxis.MinValue = 0;
				chart1.ShowDataTable = false;
				chart1.ChartDataTable.ShowLegendKey = true;


				for (fldSeries in arrSeries)
			{
				fldSeries.data = fldSeries.data+':'+fldSeries.letter + (iCurRow-1)
					if (bShowAlert) alert('fldSeries.name = ' + fldSeries.name+' '+fldSeries.data)
				s1 = chart1.AddSeries(strGraphType, fldSeries.data, true);
				s1.Name = fldSeries.name;
				//s1.Border.WeightPx=3
				s1.DataLabels.ShowValue = true;
			}

			chart1.CategoryData = strChartCategoryData;

				arrChart.push(chart1)
			}
			else
			{
				arrGraph = oParam.GetOptProperty('arrGraph');
				if (IsArray(arrGraph) == false)
				{
					arrGraph = new Array();
				}

				iLowerRightRowCount =  0;

				for (oGraphElem in arrGraph)
				{
					iWidth = OptInt(oGraphElem.GetOptProperty('width'), 8);
					iHeight = OptInt(oGraphElem.GetOptProperty('height'), 30);

					if (iLowerRightRowCount == 0)
					{
						iUpperLeftRow = iCurRow + 2;
					}
					else
					{
						iUpperLeftRow = iLowerRightRowCount + 2;
					}
					iUpperLeftColumn = 0;
					iLowerRightRow = iUpperLeftRow + iHeight;
					iLowerRightColumn = iWidth;

					iLowerRightRowCount = iLowerRightRow;

					oChartNew = oWorksheet.Charts.Add(
						'Column',
						iUpperLeftRow,
						iUpperLeftColumn,
						iLowerRightRow,
						iLowerRightColumn
					);

					oChartNew.Title.Text = oGraphElem.TitleText;
					oChartNew.Title.IsBold = true;
					if (oGraphElem.GetOptProperty('ShowLegend') != undefined)
					{
						oChartNew.ShowLegend = tools_web.is_true(oGraphElem.GetOptProperty('ShowLegend'));
					}
					else
					{
						oChartNew.ShowLegend = true;
					}

					oChartNew.LegendPosition = 'Bottom';
					if (oGraphElem.GetOptProperty('LegendPosition') != undefined)
					{
						oChartNew.LegendPosition = oGraphElem.GetOptProperty('LegendPosition');
					}

					oChartNew.PlotArea.Area.ForegroundColor = '#FFF';
					oChartNew.CategoryAxis.TickLabelPosition = 'Low';
					oChartNew.ValueAxis.Title.IsBold = true;
					oChartNew.ValueAxis.Title.RotationAngle = 0;
					if (oGraphElem.GetOptProperty('ValueAxisTitleText') != undefined)
					{
						oChartNew.ValueAxis.Title.Text = oGraphElem.GetOptProperty('ValueAxisTitleText');
					}
					try
					{
						oChartNew.ValueAxis.CrossAtt = 0;
					}
					catch( e )
					{}
					if (oGraphElem.GetOptProperty('ValueAxisMaxValue') != undefined)
					{
						oChartNew.ValueAxis.MaxValue = oGraphElem.GetOptProperty('ValueAxisMaxValue');
					}
					oChartNew.ValueAxis.MinValue = 0;
					oChartNew.ShowDataTable = false;
					oChartNew.ChartDataTable.ShowLegendKey = true;


					for (oSeriesElem in oGraphElem.arrSeries)
					{
						if (oSeriesElem.GetOptProperty('isVertical') != undefined)
						{
							isVertical = tools_web.is_true(oSeriesElem.GetOptProperty('isVertical'));
						}
						else
						{
							isVertical = true;
						}
						oSeriesNew = oChartNew.AddSeries(oGraphElem.chartType, oSeriesElem.data, isVertical);
						oSeriesNew.Name = oSeriesElem.name;
						if (oSeriesElem.GetOptProperty('DataLabelsShowValue') != undefined)
						{
							oSeriesNew.DataLabels.ShowValue = tools_web.is_true(oSeriesElem.GetOptProperty('DataLabelsShowValue'));
						}
						if (oSeriesElem.GetOptProperty('DataLabelsNumberFormat') != undefined)
						{
							oSeriesNew.DataLabels.NumberFormat = oSeriesElem.GetOptProperty('DataLabelsNumberFormat');
						}
						if (oSeriesElem.GetOptProperty('DataLabelsPosition') != undefined)
						{
							oSeriesNew.DataLabels.Position = oSeriesElem.GetOptProperty('DataLabelsPosition');
						}

					}

					oChartNew.CategoryData = oGraphElem.CategoryData;

					arrChart.push(oChartNew)
				}
			}
		}

		if (bSaveFile)
		{
			//sTempDir = ObtainSessionTempFile();
			//CreateDirectory( sTempDir );
			//sFile=DateToRawSeconds(Date())-Random(1,200000)
			//sExcelFileName=UrlToFilePath(UrlAppendPath( sTempDir, sFile + '.xlsx' ))
			//sImgFileName=UrlToFilePath(UrlAppendPath( sTempDir, sFile + '.png' ))
			//chart1.ToImage(sImgFileName);

			//oExcelDoc.SaveAs(sExcelFileName);
			sExcelFileName=fnSaveFile(oExcelDoc,'Excel',false,'trash');
			sFile=UrlFileName(FilePathToUrl(UrlToFilePath(sExcelFileName)))

			if (bShowGraph)
			{
				for ( i = 0; i < ArrayCount(arrChart); i++)
				{
				fldFile = fldDataFormParam.files.AddChild();
				fldFile.id=DateToRawSeconds(Date())-Random(1,200000)

					sName = arrChart[i].Title.Text;
					if (oParam.GetOptProperty('arrGraph') != undefined)
					{
						arrGraph = oParam.GetOptProperty('arrGraph');
						if (arrGraph[i].GetOptProperty('TitleTab') != undefined)
						{
							sName = arrGraph[i].GetOptProperty('TitleTab');
						}
					}

					fldFile.name=sName;
				fldFile.file_name= StrReplace(sFile,UrlPathSuffix(sFile),'.png')
					fldFile.data=Base64Decode(arrChart[i].GetImageInBase64String('png'))
				fldFile.type=fnFindFileType(fldFile.file_name)
			}
			}

			fldFile = fldDataFormParam.files.AddChild();
			fldFile.id=Random(1,300000)
			fldFile.name= sGraphTitle
			fldFile.file_name= sFile
			fldFile.data=null
			if (bIncludeDataInFile)
			{
				fldFile.data=LoadUrlData(sExcelFileName)//LoadUrlData(FilePathToUrl(UrlToFilePath(sExcelFileName)))
			}
			fldFile.type=fnFindFileType(fldFile.file_name)
		}

		return oExcelDoc;
	"/>

	<fnSaveFile PROPERTY="1" PARAM="oObjectParam"  PARAM="sFileType" PARAM="bClearObjectParam" PARAM="sDestinationParam" ALLOW-CALL-FROM-CLIENT="0" EXPR="

			var sFolder = 'x-local://trash/temp/general_reports';
			var sDestination = null;
			var bClearObject = true;

			try
			{
				sDestination=String(sDestinationParam)
			}
			catch(ex)
			{
			}

			try
			{
				bClearObject=tools_web.is_true(bClearObjectParam)
			}
			catch(ex)
			{
			}


			if ( sDestination != null && sDestination != undefined && sDestination == 'temp' )
			{
				sFolder = ObtainSessionTempFile();
				CreateDirectory( sFolder );
			}

			var sRandomString = tools.random_string( 10 );
			var sFilePath = sFolder + '/' + sRandomString + DateToRawSeconds( Date() ) + '' + Random( 1, 200000 );
			var sExt = 'xlsx';

			switch( sFileType )
			{
				case 'Xml':
				{
					sExt = 'xml';
					break;
				}
			}

			sFilePath = sFilePath + '.' + sExt;

			try
			{
				if ( ! tools.file_url_exists( sFolder ) || ! IsDirectory( sFolder ) )
					CreateDirectory( sFolder );

				if ( ! tools.file_url_exists( sFilePath ) )
				{
					if ( sFileType == 'Excel' )
					{
						if ( ( tools.sys_db_capability & tools.UNI_CAP_BASIC ) != 0 )
						{
							sTempDir = ObtainSessionTempFile();
							CreateDirectory( sTempDir );
							sFile = DateToRawSeconds( Date() ) - Random( 1, 200000 );
							sExcelFileName = UrlToFilePath( UrlAppendPath( sTempDir, sFile + '.'+ sExt ) );

							oObjectParam.SaveAs( sExcelFileName );
							PutUrlData( sFilePath, LoadUrlData( FilePathToUrl( sExcelFileName ) ) )
						}
						else
						{
							oObjectParam.SaveAs( UrlToFilePath( sFilePath ) );
						}

						if ( bClearObject )
						{
							oObjectParam.Close();
							oObjectParam = null;
						}
					}
					else
					{
						PutUrlData( sFilePath, oObjectParam );
					}

					return sFilePath;
				}
			}
			catch( ex )
			{
				alert( 'fnSaveFile error: ' + ex )
			}

			return null;
	"/>

	<fnFindFileType PROPERTY="1" PARAM="sFileUrlParam" EXPR="
			var commonResType, fileExt;
			var type=null;
			try
			{
				fileExt = UrlPathSuffix(sFileUrlParam);
			}
			catch(_x_)
			{
			}
			if (fileExt != '')
			{
				fileExt = StrLowerCase(fileExt.slice(1));
				commonResType = ArrayOptFind(common.resource_types, 'ArrayOptFind(String(This.ext).split(\',\'), \'This == \' + CodeLiteral(\'' +fileExt+ '\')) != undefined');
				if (commonResType != undefined)
					type = commonResType.PrimaryKey;
			}
			return type;
	"/>

	<arrayCross PROPERTY="1" PARAM="arrFirstParam" PARAM="arrSecondParam" EXPR="

		var arrResult = Array();
		for ( elem1 in arrFirstParam )
		{
			for ( elem2 in arrSecondParam )
			{
				if ( elem1 == elem2 )
				{
					arrResult.push(elem1);
					break;
				}
			}
		}

		return arrResult;

	"/>

	<getCatUser PROPERTY="1" PARAM="fldLearningParam" EXPR="

		var fldResult=undefined
		if (global_settings.settings.show_creator_in_reports)
		{
			try
			{
				fldResult=undefined
				strLogin=''
				if (fldLearningParam.creation_user_id.HasValue)
				{
					 fldResult= ArrayOptFirstElem( XQuery( 'for $user in collaborators where $user/id = ' + fldLearningParam.creation_user_id + ' return $user' ) );
				}

				if ( fldResult==undefined)
				{
					teLearning=OpenDoc( UrlFromDocID( fldLearningParam.id ) ).TopElem;
					strLogin=Trim(teLearning.doc_info.creation.user_login)

					if (strLogin!='')
					{
						StrLogin1 = global_settings.settings.login_case_sensitive ? strLogin : StrLowerCase( strLogin );
						 fldResult= ArrayOptFirstElem( XQuery( 'for $user in collaborators where $user/' + ( global_settings.settings.login_case_sensitive ? '' : 'lowercase_' ) + 'login = ' + XQueryLiteral( StrLogin1 ) + ' return $user' ) );
						if (  fldResult == undefined )
						{
							StrLogin2 = strLogin.slice( strLogin.lastIndexOf( '\\' ) + 1 );
							fldResult = ArrayOptFirstElem( XQuery( 'for $user in collaborators where $user/short_login = ' + XQueryLiteral( StrLogin2 ) + ' return $user' ) );
						}
					}
				}

			}
			catch(ex)
			{

			}
		}
		return  fldResult
	"/>

	<fnAddLearnings PROPERTY="1" PARAM="arrLearningParam" PARAM="fldParamFormParam" PARAM="fldDataFormParam" PARAM="oResParam" EXPR="

		bShowSubPath = ArrayOptFind( fldParamFormParam.columns, 'This.name==\'s2\' || This.name==\'s3\' || This.name==\'s4\' || This.name==\'s5\' || This.name==\'s6\' || This.name==\'s7\'' ) != undefined;

		var bParamsSet = true;
		var iCounter   = 0;

		try
		{
			iCounter = oResParam.iCounter;
		}
		catch( ex )
		{
			bParamsSet = false;
		}

		iFullLoopCounter = iCounter;

		if ( bParamsSet )
		{
			iFullLoopCounter = oResParam.oFileObject != null ? iCounter : 0;
		}

		var oParamObject = null;

		bOneCourse = false;

		sCoursesIDs = ArrayMerge( ArraySelectDistinct( arrLearningParam, 'course_id' ), 'This.course_id', ',' );

		arrCourses = ArraySelectAll( XQuery( 'for $elem in courses where MatchSome( $elem/id, (' + sCoursesIDs + ' ) ) order by $elem/id return $elem/Fields(\'id\',\'name\',\'max_score\')' ) );

		iActivitiesCount = ArrayCount(arrLearningParam);

		iPositionFinish = 65000; //65000 code

		if(iActivitiesCount <= iPositionFinish)
		{
			sCoursesPersonsIDs = ArrayMerge( ArraySelectDistinct( arrLearningParam, 'person_id' ), 'This.person_id', ',' );
		}
		else
		{
			iArraysCount = iActivitiesCount % iPositionFinish;
			_arrLearningParam = ArrayRange( arrLearningParam, iPositionFinish, iArraysCount )
			sCoursesPersonsIDs = ArrayMerge( ArraySelectDistinct( _arrLearningParam, 'person_id' ), 'This.person_id', ',' );
		}

		arrCoursesPersons = ArraySelectAll( XQuery( 'for $elem in collaborators where MatchSome( $elem/id, (' + sCoursesPersonsIDs + ' ) ) order by $elem/id return $elem/Fields(\'id\',\'code\',\'org_name\',\'hire_date\',\'dismiss_date\',\'fullname\',\'position_parent_id\',\'position_name\')' ) );

		arrCoursesPersons = ArraySelectDistinct( arrCoursesPersons, 'This.id' );

		arrAllSubs = ArraySelectAll( XQuery( 'for $elem in subs where MatchSome( $elem/type, ( &quot;subdivision&quot;,&quot;org&quot; ) ) order by $elem/id return $elem/Fields(\'id\',\'type\',\'name\',\'parent_id\')' ) );

		function fnGetUserSubs( iPersonID, oPerson, arrSubsArray )
		{
			arrResult = new Array();

			iParentSubID = null;

			try
			{
				iParentSubID = oPerson.position_parent_id;
			}
			catch( e )
			{
				docPerson = tools.open_doc( iPersonID );
				if ( docPerson != undefined )
				{
					iParentSubID = docPerson.TopElem.position_parent_id;
				}
				else
				{
					return arrResult;
				}
			}

			if ( iParentSubID != null )
			{
				try
				{
					subs_counter = 0;

					do
					{
						curParent = ArrayOptFindBySortedKey( arrSubsArray, iParentSubID, 'id' );

						_child_fn = new Object;
						_child_fn.id = curParent.id;
						_child_fn.type = curParent.type;
						_child_fn.name = curParent.name;
						_child_fn.parent_id = curParent.parent_id;

						arrResult[ subs_counter ] = _child_fn;

						subs_counter++;

						iParentSubID = curParent.parent_id;

					} while ( iParentSubID != null &amp;&amp; subs_counter &lt; 50 )
				}
				catch( e )
				{
					alert( '[fnGetUserSubs] error: ' + e + '; last iParentSubID = ' + iParentSubID + '; arrResult = ' + tools.array_to_text( arrResult, 'json' ) );
				}
			}

			strResult = '';

			for ( i = ArrayCount( arrResult ) - 1; i >= 0; i = i - 1 )
			{
				strResult = strResult + ( i == ArrayCount( arrResult ) - 1 ? '' : '->' ) + arrResult[i].name;
			}

			return strResult
		}

		for ( fldLearning in arrLearningParam )
		{
			_child 				= fldDataFormParam.rs.AddChild();
			fldNewColumn		= _child.cs.AddChild();
			fldNewColumn.name	= 'id';
			fldNewColumn.t		= fldLearning.person_id;
			fldNewColumn.cl		= fldLearning.id.Value;
			fldNewColumn.s		= StrLeftRange( fldLearning.Name, 1 );

			fldPerson			= ArrayOptFindBySortedKey( arrCoursesPersons, fldLearning.person_id, 'id' );

			if ( ! bOneCourse )
			{
				fldCourse = undefined;
			}

			catUser			 = undefined;
			strSubsPath		 = ''
			iSubsPathCounter = 0;

			if ( ! fldParamFormParam.disp_learning_prog && fldParamFormParam.course_id.HasValue && ! bOneCourse )
			{
				fldCourse = ArrayOptFind( arrCourses, 'This.id == fldParamFormParam.course_id' );
				bOneCourse = true;
			}
			else
			{
				fldCourse = ArrayOptFindBySortedKey( arrCourses, fldLearning.course_id, 'id' );
			}

			if ( bShowSubPath && fldPerson != undefined )
			{
				try
				{
					strSubsPath = fnGetUserSubs( fldPerson.id, fldPerson, arrAllSubs );

					arrSubs = strSubsPath.split( '->' );

					iSubsPathCounter = ArrayCount( arrSubs );
				}
				catch(ex)
				{
					alert( 'ex ' + ex )
				}
			}

			for ( fldColunm in fldParamFormParam.columns )
			{

				try
				{

				fldNewColumn      = _child.cs.AddChild();
				fldNewColumn.name = fldColunm.name;

				switch ( fldColunm.name )
				{
					case '0':
					case 'person_fullname':
							fldNewColumn.t = fldLearning.person_fullname;
							break;
					case '1':
					case 'person_code':
							try
							{
								if(fldPerson != undefined && fldPerson.code.HasValue)
									fldNewColumn.t = fldPerson.code;
								else
									fldNewColumn.t = '';
							}
							catch ( err )
							{
								fldNewColumn.t = err;
							}
							break;
					case '2':
					case 'person_subdivision_name':
							if ( fldParamFormParam.disp_person_list_staff && fldPerson != undefined && bShowSubPath == false )
							{
								fldNewColumn.t = fnGetUserSubs( fldPerson.id, fldPerson, arrAllSubs );
							}
							else
							{
								if ( bShowSubPath && fldPerson != undefined )
								{
									try
									{
										fldNewColumn.t = arrSubs[ 1 ];
									}
									catch(ex)
									{
									}
								}
								else
								{
									fldNewColumn.t = fldLearning.person_subdivision_name;
								}
							}
							break;
					case 's2':
					case 's3':
					case 's4':
					case 's5':
					case 's6':
					case 's7':
							try
							{
								iSubIndex = Int( StrReplace( fldColunm.name, 's', '' ) );

								if ( iSubsPathCounter != iSubIndex )
								{
									fldNewColumn.t = arrSubs[ iSubIndex ]
								}
							}
							catch(ex)
							{
							}
							break;
					case 'o':
					case 'org_name':
							fldNewColumn.t = fldLearning.person_org_name;
							if ( bShowSubPath && fldPerson != undefined )
							{
								try
								{
									fldNewColumn.t = arrSubs[0]
									if ( Trim( fldNewColumn.t ) == '' )
									{
										throw 'no org'
									}
								}
								catch(ex)
								{
									fldNewColumn.t = fldPerson.org_name;
								}
							}
							break;
					case '3':
					case 'person_position_name':
							try
							{
								if(fldPerson != undefined && fldPerson.position_name.HasValue)
									fldNewColumn.t = fldPerson.position_name;
								else
									fldNewColumn.t = '';
							}
							catch( error )
							{
								fldNewColumn.t = error;
							}
							break;
					case '4':
					case 'hire_date':
							try
							{
								fldNewColumn.t = StrDate( fldPerson.hire_date, false );
								fldNewColumn.s = StrXmlDate( fldPerson.hire_date );
							}
							catch ( err )
							{
								fldNewColumn.t = null;
								fldNewColumn.s = null;
							}
							break;
					case '5':
					case 'dismiss_date':
							try
							{
								fldNewColumn.t = StrDate( fldPerson.dismiss_date, false );
								fldNewColumn.s = StrXmlDate( fldPerson.dismiss_date );
							}
							catch ( err )
							{
								fldNewColumn.t = null;
								fldNewColumn.s = null;
							}
							break;
					case '6':
					case 'course_name':
							fldNewColumn.t = '';
							try
							{
								fldNewColumn.t = fldCourse.name;
							}
							catch ( err )
							{
								fldNewColumn.t = err;
							}
							break;

					case '7':
					case 'start_usage_date':
							fldNewColumn.t = StrDate( fldLearning.start_usage_date, true, false );
							fldNewColumn.s = fldLearning.start_usage_date.XmlValue;
							break;
					case '8':
					case 'last_usage_date':
							fldNewColumn.t = StrDate( fldLearning.last_usage_date, true, false );
							fldNewColumn.s = fldLearning.last_usage_date.XmlValue;
							break;
					case 'max_end_date':
						fldNewColumn.t = StrDate( fldLearning.max_end_date, true, false );
						fldNewColumn.s = fldLearning.max_end_date.XmlValue;
						break;
					case '9':
					case 'score':
							fldNewColumn.r = fldLearning.score;
							fldNewColumn.t = fldLearning.score;
							if ( fldLearning.score.HasValue &amp;&amp; fldCourse != undefined &amp;&amp; fldCourse.max_score &gt; 0 )
							{
								fldNewColumn.t += ' (' + StrReal( ( fldLearning.score / fldCourse.max_score ) * 100.0, 1 ) + '%)';
							}
							break;

					case '10':
					case 'status_name':
							fldNewColumn.t = '';
							fldNewColumn.cl = '';

							fldState = fldLearning.state_id.OptForeignElem;
							if ( fldState != undefined )
							{
								fldNewColumn.t = fldState.name;
								try
								{
									fldNewColumn.cl = fldState.text_color;
								}
								catch(ex)
								{
								}
							}
							break;
					case '11':
					case 'creator_fullname':
							fldNewColumn.t = '';
							if ( catUser == undefined )
							{
								catUser = getCatUser( fldLearning );
							}
							if ( catUser != undefined )
							{
								if ( catUser != null )
								{
									fldNewColumn.t = catUser.fullname
								}
							}
							else
							{
								catUser = null;
							}
							break;
					case '12':
					case 'creator_code':
							fldNewColumn.t = ''
							if ( catUser == undefined )
							{
								catUser = getCatUser( fldLearning )
							}
							if ( catUser != undefined )
							{
								if ( catUser != null )
								{
									fldNewColumn.t = catUser.code
								}
							}
							else
							{
								catUser = null
							}
							break;
				}

				}
				catch( e )
				{
					alert( 'FOR error: ' + e );
				}
			}

			if ( bParamsSet )
			{
				iCounter++;
				if ( MaxReportVisibleRows != 0 && iCounter % MaxReportVisibleRows == 0 )
				{
					if ( oParamObject == null )
						oParamObject = new Object()

					oParamObject.bSaveFile 					= false;
					oParamObject.iStartRow 					= iFullLoopCounter + 1;
					oParamObject.use_real_value 			= false;
					oParamObject.show_table_column_header 	= ( oResParam.oFileObject == null );
					oParamObject.oExcelDoc 					= oResParam.oFileObject;
					oResParam.oFileObject 					= fnCreateExcelFile( oParamObject, fldParamFormParam, fldDataFormParam );
					fldDataFormParam.Clear();
					iFullLoopCounter = iCounter;
				}
			}
		}

		if ( bParamsSet )
		{
			if ( MaxReportVisibleRows != 0 && iCounter % MaxReportVisibleRows != 0 && oResParam.oFileObject != null )
			{
				if ( oParamObject == null )
					oParamObject = new Object();

				oParamObject.bSaveFile					= false;
				oParamObject.iStartRow 					= iFullLoopCounter + 1;
				oParamObject.use_real_value 			= false;
				oParamObject.show_table_column_header 	= ( oResParam.oFileObject == null );
				oParamObject.oExcelDoc					= oResParam.oFileObject;
				oResParam.oFileObject					= fnCreateExcelFile( oParamObject, fldParamFormParam, fldDataFormParam );
				fldDataFormParam.Clear();
			}
			oResParam.iCounter=iCounter;
		}
	"/>

	<fnAddTestLearnings PROPERTY="1" PARAM="arrTestLearningParam" PARAM="fldParamFormParam" PARAM="fldDataFormParam" PARAM="oResParam" EXPR="
	bShowSubPath=ArrayOptFind(fldParamFormParam.columns,'This.name==\'s2\'||This.name==\'s3\'||This.name==\'s4\'||This.name==\'s5\'||This.name==\'s6\'||This.name==\'s7\'')!=undefined

		var bParamsSet=true
		var iCounter=0;
		try
		{
			iCounter=oResParam.iCounter;
		}
		catch(ex)
		{
			bParamsSet=false;
		}
		iFullLoopCounter=iCounter
		if (bParamsSet)
		{
			iFullLoopCounter=oResParam.oFileObject!=null?iCounter:0
		}
		var oParamObject=null

		for ( fldTestLearning in arrTestLearningParam )
		{
			_child = fldDataFormParam.rs.AddChild();

			fldNewColumn=_child.cs.AddChild();
			fldNewColumn.name = 'id';
			fldNewColumn.t = fldTestLearning.person_id;
			fldNewColumn.cl = fldTestLearning.id.Value;
			fldNewColumn.s = StrLeftRange( fldTestLearning.Name, 1 );

			fldPerson = fldTestLearning.person_id.OptForeignElem;

			fldTest=undefined;
			catUser=undefined;
			strSubsPath=''
			iSubsPathCounter=0;
			if (bShowSubPath&&fldPerson!=undefined)
			{
				try
				{
					strSubsPath=tools.person_list_staff_by_person_id( fldPerson.id,fldPerson,9 )
					arrSubs=strSubsPath.split('->');
					iSubsPathCounter=ArrayCount(arrSubs)
				}
				catch(ex)
				{
				}
			}

			for (fldColunm in fldParamFormParam.columns)
			{
				fldNewColumn=_child.cs.AddChild();
				fldNewColumn.name = fldColunm.name;

				switch( fldColunm.name )
				{
					case '0':
					case 'person_fullname':
							fldNewColumn.t = fldTestLearning.person_fullname;
							break;
					case '1':
					case 'person_code':
							try
							{
								fldNewColumn.t = fldPerson.code;
							}
							catch ( err )
							{
								fldNewColumn.t = err;
							}
							break;
					case '2':
					case 'person_subdivision_name':
							if (fldParamFormParam.disp_person_list_staff&&fldPerson!=undefined&&bShowSubPath==false)
							{
								fldNewColumn.t = tools.person_list_staff_by_person_id( fldPerson.id );
							}
							else
							{
								if (bShowSubPath&&fldPerson!=undefined)
								{
									try
									{
										fldNewColumn.t = arrSubs[1]
									}
									catch(ex)
									{
									}
								}
								else
								{
									fldNewColumn.t = fldTestLearning.person_subdivision_name;
								}
							}
							break;
					case 's2':
					case 's3':
					case 's4':
					case 's5':
					case 's6':
					case 's7':
							try
							{
								iSubIndex=Int(StrReplace(fldColunm.name,'s',''))
								if (iSubsPathCounter!=iSubIndex)
									fldNewColumn.t = arrSubs[(iSubIndex)]
							}
							catch(ex)
							{
							}
							break;
					case 'o':
					case 'person_org_name':
							fldNewColumn.t = fldTestLearning.person_org_name;
							if (bShowSubPath&&fldPerson!=undefined)
							{
								try
								{
									fldNewColumn.t = arrSubs[0]
									if (Trim(fldNewColumn.t)=='')
									{
										throw 'no org'
									}
								}
								catch(ex)
								{
									fldNewColumn.t = fldPerson.org_name;
								}
							}
							break;
					case '3':
					case 'person_position_name':
							try
							{
								fldNewColumn.t = fldPerson.position_name;
							}
							catch( e )
							{
								fldNewColumn.t = e;
							}
							break;
					case '4':
					case 'hire_date':
							try
							{
								fldNewColumn.t = StrDate(ParseDate(fldPerson.hire_date), false, false );
								fldNewColumn.s = StrXmlDate(ParseDate(fldPerson.hire_date));
							}
							catch ( err )
							{
								fldNewColumn.t = null;
								fldNewColumn.s = null;
							}
							break;
					case '5':
					case 'dismiss_date':
							try
							{
								fldNewColumn.t = StrDate( ParseDate(fldPerson.dismiss_date), false, false );
								fldNewColumn.s = StrXmlDate(ParseDate(fldPerson.dismiss_date));

							}
							catch ( err )
							{
								fldNewColumn.t = null;
								fldNewColumn.s = null;
							}
							break;
					case '6':
					case 'test_name':
							fldNewColumn.t=''
							if (fldTest==undefined)
							{
								fldTest=fldTestLearning.assessment_id.OptForeignElem
							}
							try
							{
								fldNewColumn.t = fldTestLearning.assessment_id.ForeignElem.title;
							}
							catch ( err )
							{
								fldNewColumn.t = err;
							}
							break;
					case '7':
					case 'start_usage_date':
							fldNewColumn.t = StrDate( fldTestLearning.start_usage_date, true, false );
							fldNewColumn.s = fldTestLearning.start_usage_date.XmlValue;
							break;
					case '8':
					case 'last_usage_date':
							fldNewColumn.t = StrDate( fldTestLearning.last_usage_date, true, false );
							fldNewColumn.s = fldTestLearning.last_usage_date.XmlValue;
							break;
					case '9':
					case 'score':
							fldNewColumn.r = fldTestLearning.score;
							fldNewColumn.t = fldTestLearning.score;
							if (fldTest==undefined)
							{
								fldTest=fldTestLearning.assessment_id.OptForeignElem
							}
							if ( fldTestLearning.score.HasValue &amp;&amp; fldTest!=undefined &amp;&amp; fldTestLearning.max_score &gt; 0 )
								fldNewColumn.t += ' (' + StrReal( ( fldTestLearning.score / fldTestLearning.max_score ) * 100.0, 1 ) + '%)';
							break;
					case '10':
					case 'status':
							fldNewColumn.t = fldTestLearning.state_id.ForeignElem.name;
							fldNewColumn.cl = ''

							try
							{
								fldNewColumn.cl = fldTestLearning.state_id.ForeignElem.text_color;
							}
							catch(ex)
							{
							}
							break;
					case '11':
					case 'creator_fullname':
							fldNewColumn.t = ''
							if (catUser==undefined)
							{
								catUser=getCatUser(fldTestLearning)
							}
							if (catUser!=undefined)
							{
								if (catUser!=null)
								{
									fldNewColumn.t = catUser.fullname
								}
							}
							else
							{
								catUser=null
							}
							break;
					case '12':
					case 'creator_code':
							fldNewColumn.t = ''
							if (catUser==undefined)
							{
								catUser=getCatUser(fldTestLearning)
							}
							if (catUser!=undefined)
							{
								if (catUser!=null)
								{
									fldNewColumn.t = catUser.code
								}
							}
							else
							{
								catUser=null
							}
							break;
				}
			}
			if (bParamsSet)
			{
				iCounter++;
				if ( MaxReportVisibleRows != 0 && ( iCounter % MaxReportVisibleRows == 0 ) )
				{
					if (oParamObject==null) oParamObject=new Object()
					oParamObject.bSaveFile=false;
					oParamObject.iStartRow=iFullLoopCounter+1;
					oParamObject.use_real_value=false
					oParamObject.show_table_column_header=(oResParam.oFileObject==null)
					oParamObject.oExcelDoc=oResParam.oFileObject
					oResParam.oFileObject=fnCreateExcelFile(oParamObject,fldParamFormParam,fldDataFormParam)
					fldDataFormParam.Clear();
					iFullLoopCounter=iCounter
				}
			}
		}

		if ( bParamsSet )
		{
			if ( MaxReportVisibleRows != 0 && ( iCounter % MaxReportVisibleRows != 0 && oResParam.oFileObject != null ) )
			{
				if ( oParamObject == null )
					oParamObject = new Object();

				oParamObject.bSaveFile				  = false;
				oParamObject.iStartRow				  = iFullLoopCounter + 1;
				oParamObject.use_real_value 		  = false;
				oParamObject.show_table_column_header = ( oResParam.oFileObject == null );
				oParamObject.oExcelDoc				  = oResParam.oFileObject;

				oResParam.oFileObject = fnCreateExcelFile( oParamObject, fldParamFormParam, fldDataFormParam );
				fldDataFormParam.Clear();
			}
			oResParam.iCounter = iCounter;
		}
	"/>

	<fnAddCareerReserves PROPERTY="1" PARAM="arrLoopParam" PARAM="fldParamFormParam" PARAM="fldDataFormParam" PARAM="oResParam" EXPR="

		bShowSubPath=ArrayOptFind(fldParamFormParam.columns,'This.name==\'s2\'||This.name==\'s3\'||This.name==\'s4\'||This.name==\'s5\'||This.name==\'s6\'||This.name==\'s7\'')!=undefined

		var bParamsSet=true
		var iCounter=0;
		try
		{
			iCounter=oResParam.iCounter;
		}
		catch(ex)
		{
			bParamsSet=false;
		}
		iFullLoopCounter=iCounter
		if (bParamsSet)
		{
			iFullLoopCounter=oResParam.oFileObject!=null?iCounter:0
		}
		var oParamObject=null

		for ( fldLoopObject in arrLoopParam )
		{
			_child = fldDataFormParam.rs.AddChild();
			_child.bkc='210,255,210'
			fldState=fldLoopObject.status.OptForeignElem
			if (fldState!=undefined)
			{
				try
				{
					_child.bkc = fldState.bk_color;
				}
				catch(ex)
				{
				}
			}

			fldNewColumn=_child.cs.AddChild();
			fldNewColumn.name = 'id';
			fldNewColumn.t = fldLoopObject.person_id;
			fldNewColumn.cl = fldLoopObject.id.Value;
			fldNewColumn.s = StrLeftRange( fldLoopObject.Name, 1 );

			fldPerson = fldLoopObject.person_id.OptForeignElem;
			fldCourse=undefined;
			strSubsPath=''
			iSubsPathCounter=0;
			if (bShowSubPath&&fldPerson!=undefined)
			{
				try
				{
					strSubsPath=tools.person_list_staff_by_person_id( fldPerson.id,fldPerson,9 )
					arrSubs=strSubsPath.split('->');
					iSubsPathCounter=ArrayCount(arrSubs)
				}
				catch(ex)
				{
				}
			}
			for (fldColunm in fldParamFormParam.columns)
			{
				fldNewColumn=_child.cs.AddChild();
				fldNewColumn.name = fldColunm.name;

				switch( fldColunm.name )
				{
					case '0':
							fldNewColumn.t = fldLoopObject.person_fullname;
							break;
					case '1':
							try
							{
								fldNewColumn.t = fldPerson.code;
							}
							catch ( err )
							{
								fldNewColumn.t = err;
							}
							break;
					case '2':
							if (fldParamFormParam.disp_person_list_staff&&fldPerson!=undefined&&bShowSubPath==false)
							{
								fldNewColumn.t = tools.person_list_staff_by_person_id( fldPerson.id );
							}
							else
							{
								if (bShowSubPath&&fldPerson!=undefined)
								{
									try
									{
										fldNewColumn.t = arrSubs[1]
									}
									catch(ex)
									{
									}
								}
								else
								{
									if (fldPerson!=undefined)
									{
										fldNewColumn.t = fldPerson.position_parent_name;
									}
								}
							}
							break;
					case 's2':
					case 's3':
					case 's4':
					case 's5':
					case 's6':
					case 's7':
							try
							{
								iSubIndex=Int(StrReplace(fldColunm.name,'s',''))
								if (iSubsPathCounter!=iSubIndex)
									fldNewColumn.t = arrSubs[(iSubIndex)]
							}
							catch(ex)
							{
							}
							break;
					case 'o':
							if ( fldPerson != undefined )
								fldNewColumn.t = fldPerson.org_name;
							else
								fldNewColumn.t = '';

							if ( bShowSubPath && fldPerson != undefined )
							{
								try
								{
									fldNewColumn.t = arrSubs[0]
									if ( Trim( fldNewColumn.t ) == '' )
									{
										throw 'no org'
									}
								}
								catch( ex )
								{
									fldNewColumn.t = fldPerson.org_name;
								}
							}
							break;
					case '3':
							fldNewColumn.t = fldLoopObject.person_position;
							break;
					case '4':
							try
							{
								fldNewColumn.t = StrDate(ParseDate(fldPerson.hire_date), false, false );
								fldNewColumn.s = StrXmlDate(ParseDate(fldPerson.hire_date));
							}
							catch ( err )
							{
								fldNewColumn.t = null;
								fldNewColumn.s = null;
							}
							break;
					case '5':
							try
							{
								fldNewColumn.t = StrDate( ParseDate(fldPerson.dismiss_date), false, false );
								fldNewColumn.s = StrXmlDate(ParseDate(fldPerson.dismiss_date));

							}
							catch ( err )
							{
								fldNewColumn.t = null;
								fldNewColumn.s = null;
							}
							break;
					case '6':
							fldNewColumn.t = fldLoopObject.position_name
							break;
					case '7':
							fldNewColumn.t = StrDate( fldLoopObject.start_date, false, false );
							fldNewColumn.s = fldLoopObject.start_date.XmlValue;
							break;
					case '8':
							fldNewColumn.t = StrDate( fldLoopObject.plan_readiness_date, false, false );
							fldNewColumn.s = fldLoopObject.plan_readiness_date.XmlValue;
							break;
					case '9':
							fldNewColumn.r = fldLoopObject.readiness_percent;
							fldNewColumn.t = fldLoopObject.readiness_percent;
							break;
					case '10':
							fldNewColumn.t = ''
							fldNewColumn.cl = ''
							if (fldState!=undefined)
							{
								fldNewColumn.t =fldState.name;
							}
							break;
				}
			}

			if (bParamsSet)
			{
				iCounter++;
				if ( MaxReportVisibleRows != 0 && ( iCounter % MaxReportVisibleRows == 0 ) )
				{
					if (oParamObject==null) oParamObject=new Object()
					oParamObject.bSaveFile=false;
					oParamObject.iStartRow=iFullLoopCounter+1;
					oParamObject.show_table_column_header=(oResParam.oFileObject==null)
					oParamObject.oExcelDoc=oResParam.oFileObject
					oResParam.oFileObject=fnCreateExcelFile(oParamObject,fldParamFormParam,fldDataFormParam)
					fldDataFormParam.Clear();
					iFullLoopCounter=iCounter
				}
			}
		}

		if (bParamsSet)
		{
			if ( MaxReportVisibleRows != 0 && ( iCounter % MaxReportVisibleRows != 0 && oResParam.oFileObject != null ) )
			{
				if (oParamObject==null) oParamObject=new Object()
				oParamObject.bSaveFile=false;
				oParamObject.iStartRow=iFullLoopCounter+1;
				oParamObject.show_table_column_header=(oResParam.oFileObject==null)
				oParamObject.oExcelDoc=oResParam.oFileObject
				oResParam.oFileObject=fnCreateExcelFile(oParamObject,fldParamFormParam,fldDataFormParam)
				fldDataFormParam.Clear();
			}
			oResParam.iCounter=iCounter;
		}

	"/>

	<course_report PROPERTY="1" PARAM="Ps" PARAM="curUserID" PARAM="sApplicationID" ALLOW-CALL-FROM-CLIENT="1" EXPR="
		
		oResult = new Object();
		oResult.error = 0;
		oResult.learnings = [];
		
		sFuncParams = OpenNewDoc( 'x-local://wtv/wtv_form_func_params.xmd' ).TopElem;
		sFuncParams.course_report.AssignElem( Ps );
		sFuncParams.course_report.is_web_client = System.IsWebClient;
		
		sParams = UrlEncode( sFuncParams.Xml );
		
		if ( ! LdsIsServer )
			return CallServerMethod( 'tools_report', 'course_report', [ RValue( sParams ),  ] );
		
		sXQueryQual = '';
		
		if( sApplicationID != undefined || sApplicationID != null )
		{
			oModelRoles = CallServerMethod( 'tools_report', 'model_roles', [ curUserID, sApplicationID ] );
		
			arrSubordinateIDs = [];
			
			if(oModelRoles.type != '')
			{
				switch( oModelRoles.type )
				{
					case 'hr':
					{
						arrSubordinateIDs = oModelRoles.subordinate_ids.hr;
						break;
					}
					case 'observer':
					{
						arrSubordinateIDs = oModelRoles.subordinate_ids.observer;
						break;
					}
					case 'expert':
					{
						if(oModelRoles.expert_id != undefined && oModelRoles.expert_id != null )
						{
							iExpertID = oModelRoles.expert_id;
							
							sQuery = 'for $elem in roles where $elem/catalog_name = \'course\' and contains($elem/experts,' + OptInt(iExpertID, 0) + ') return $elem/Fields(\'id\')';
							arrRoles = tools.xquery(sQuery);
							
							arrRoleIDs = [];
							for(oRole in arrRoles)
							{
								arrRoleIDs.push(oRole.id.Value);
							}

							arrObjects = [];
							if(ArrayCount(arrRoleIDs) > 0)
							{
								sQuery = 'for $elem in courses where MatchSome($elem/role_id, (' + ArrayMerge(arrRoleIDs, 'This', ',') + ')) return $elem/Fields(\'id\')';
								arrObjects = tools.xquery(sQuery);

								arrObjectIDs = [];
								if(ArrayOptFirstElem(arrObjects) != undefined)
								{
									for(oObject in arrObjects)
									{
										arrObjectIDs.push(oObject.id.Value);
									}
								}
								sXQueryQual = ' MatchSome($elem/course_id, (' + ArrayMerge(arrObjectIDs, 'This', ',') + '))'
							} else {
								sXQueryQual = ' $elem/course_id = 0';
							}
						}
						break;
					}
				}
				
				if(ArrayCount(arrSubordinateIDs) > 0){
					sXQueryQual = ' MatchSome($elem/person_id, (' + ArrayMerge(arrSubordinateIDs, 'This', ',') + '))';
				}
			}
		}

		try
		{
			CheckCurThread();

			var progress = new TaskProgress;
			progress.TaskName = ms_tools.get_const( 'bb1jhx82gs' );

			var oParams = OpenDocFromStr( UrlDecode( sParams ), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.course_report;
			
			function add_learnings( _learning_array )
			{

				for ( _learning in _learning_array )
				{
					_child = {};

					_child.id   = _learning.id.Value;
					_child.person_code = _learning.person_id.ForeignElem.code.Value;
					_child.course_id = _learning.course_id.Value;
					_child.course_name = _learning.course_name.Value;
					_child.person_id = _learning.person_id.Value;
					_child.person_fullname = _learning.person_fullname.Value;
					_child.person_position_name = _learning.person_position_name.Value;
					_child.person_org_name = _learning.person_org_name.Value;
					_child.person_subdivision_name = _learning.person_subdivision_name.Value;

					_child.hire_date = StrDate(_learning.person_id.ForeignElem.hire_date, false, false);
					_child.dismiss_date = StrDate(_learning.person_id.ForeignElem.dismiss_date, false, false);
					
					_child.start_usage_date = _learning.start_usage_date.HasValue ? StrDate( _learning.start_usage_date.Value, false, false ) : '';

					_child.creator_fullname = _child.creator_code = '';
					if ( global_settings.settings.show_creator_in_reports )
					{
						catUser = getCatUser( _learning );

						if(catUser != undefined)
						{
							_child.creator_fullname = catUser.fullname.Value;
							_child.creator_code = catUser.code.Value;
						}
					}

					_child.max_score = _learning.max_score.Value;

					if(_learning.max_score.Value > 0)
					{
						_child.score = _learning.score.Value + ' (' + ( ( 100 * _learning.score.Value ) / _learning.max_score.Value ) + '%)'
					} else {
						_child.score = _learning.score.Value;
					}
					
					_child.state_id = _learning.state_id.Value;
					_child.status_name = _learning.state_id.ForeignElem.name;
					_child.max_end_date = _learning.max_end_date.HasValue ? StrDate( _learning.max_end_date, false, false ) : '';

					//_child.person_instance_id = _learning.person_instance_id.Value;
					//_child.person_current_state = _learning.person_current_state.Value;
					//_child.event_id = _learning.event_id.Value;
					//_child.event_name = _learning.event_name.Value;
					//_child.event_start_date = _learning.event_start_date.Value;
					//_child.group_id = _learning.group_id.Value;
					//_child.start_learning_date = _learning.start_learning_date.Value;
					//_child.is_self_enrolled = _learning.is_self_enrolled.Value;
					//_child.text_result = _learning.text_result.Value;
					//_child.last_usage_date = _learning.last_usage_date.HasValue ? StrDate( _learning.last_usage_date.Value, true, false ) : '';
					//_child.time = _learning.time.Value;
					//_child.education_plan_id = _learning.education_plan_id.Value;
					//_child.active_learning_id = _learning.active_learning_id.Value;
					//_child.user_access_role = _learning.user_access_role.Value;
					//_child.user_group_id = _learning.user_group_id.Value;
					//_child.creation_date = _learning.creation_date.Value;
					//_child.creation_user_id = _learning.creation_user_id.Value;
					//_child.creation_user_id = _learning.creation_user_id.Value;
					//_child.modification_date = _learning.modification_date.Value;
					//_child.modification_user_id = _learning.modification_user_id.Value;
					//_child.app_instance_id = _learning.app_instance_id.Value;
					//_child.use_proctoring = _learning.use_proctoring.Value;

					oResult.learnings.push(_child);
				}
			}
			
			function fnRunReport( sQueryString )
			{
				for ( sCatalog in String( oParams.disp_learning_type ).split( ',' ) )
				{
					//fnAddLearnings( XQuery( 'for $elem in ' + sCatalog + sQueryString + ' return $elem' ), oParams, dataForm, oRes );
					
					//LogEvent('DEVELOPER_REPORT', alert('for $elem in ' + sCatalog + sQueryString + ' return $elem'))

					_learning_array = tools.xquery( 'for $elem in ' + sCatalog + sQueryString + ' return $elem' );
					add_learnings( _learning_array );
				}
			}

			arrPersonsIDs = Array();

			var arrXQueryConditions = [];

			if ( oParams.disp_learning_prog == true )
			{
				if ( oParams.education_program_id.HasValue )
				{
					arrCoursesIDs = [];

					arrEducationPrograms = XQuery( 'for $elem in education_program_education_methods where $elem/education_program_id = ' + oParams.education_program_id + ' return $elem' );
					for ( catEducationProgram in arrEducationPrograms )
					{
						try
						{
							if ( catEducationProgram.type == 'course' && catEducationProgram.education_method_id.ForeignElem.course_id.HasValue )
							{
								arrCoursesIDs.push( catEducationProgram.education_method_id.ForeignElem.course_id );
							}
						}
						catch( ex )
						{
						}
					}

					if ( ArrayCount( arrCoursesIDs ) > 0 )
					{
						arrXQueryConditions.push( 'MatchSome( $elem/course_id, ( ' + ArrayMerge( arrCoursesIDs, 'This', ',' ) + ' ) )' );
					}
				}
			}
			else
			{
				if ( oParams.course_id.HasValue )
				{
					arrXQueryConditions.push( '$elem/course_id = ' + oParams.course_id );
				} else {
					if(sXQueryQual != '')
					{
						arrXQueryConditions.push( sXQueryQual );
					}
				}
			}

			if ( oParams.start_date.HasValue )
			{
				arrXQueryConditions.push( '$elem/start_usage_date &gt;= date( \'' + oParams.start_date + '\' )' );
			}

			if ( oParams.finish_date.HasValue )
			{
				arrXQueryConditions.push( '$elem/start_usage_date &lt;= date( \'' + DateNewTime( oParams.finish_date, 23, 59, 59 ) + '\' )' );
			}

			if ( oParams.person_id != null )
				arrXQueryConditions.push( '$elem/person_id = ' + oParams.person_id );

			if ( oParams.group_id != null )
			{
				arrGroupPersonsIDs = new Array();

				docGroup = tools.open_doc( oParams.group_id );
				if ( docGroup != undefined )
				{
					arrGroupPersonsIDs = ArrayExtract( docGroup.TopElem.collaborators, 'collaborator_id' );

					arrXQueryConditions.push( 'MatchSome( $elem/person_id, ( ' + ArrayMerge( arrGroupPersonsIDs, 'This.PrimaryKey', ',' ) + ' ) ) ' );
				}
			}

			if ( oParams.parent_object_id != null )
			{
				catSub = ArrayOptFirstElem( XQuery('for $elem in subdivisions where $elem/id = ' + oParams.parent_object_id + ' return $elem') );

				arrPersonsIDs = ArrayExtract( tools.xquery( 'for $elem in person_hierarchys where MatchSome( $elem/subdivision_id, ( ' + ( catSub != undefined ? catSub.id : null ) + ' ) ) return $elem/Fields( \'collaborator_id\')' ), 'This.collaborator_id' );

				if ( oParams.hier_sub_select )
				{
					arrXQueryConditions.push( 'MatchSome( $elem/person_id, ( ' + ArrayMerge( arrPersonsIDs, 'This.PrimaryKey', ',' ) + ' ) ) ' );
				}
				else
				{
					arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/position_parent_id = ' + oParams.parent_object_id + ' )' );
				}
			}

			if ( oParams.org_id != null && oParams.parent_object_id == null )
			{
				if ( oParams.hier_sub_select )
				{
					arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/org_id = ' + oParams.org_id + ' )' );
				}
				else
				{
					arrXQueryConditions.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/org_id = ' + oParams.org_id + ' and $person/position_parent_id = null() )' );
				}
			}

			var sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

			fnRunReport( sXQueryConditions );

		}
		catch ( err )
		{
			oResult.error = 1;
		}
		return oResult
	"/>

	<competence_by_depart_report PROPERTY="1" PARAM="_param_str" ALLOW-CALL-FROM-CLIENT="1" EXPR="
		if ( ! LdsIsServer )
				return CallServerMethod( 'tools_report', 'competence_by_depart_report', [ RValue( _param_str ),  ] );

		var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.competence_by_depart_report;

		compArray = Array();
		indArray = Array();
		if (_params.disp_all_comp_list)
		{
			comps = XQuery( 'for $obj in competences return $obj' );
			for ( c in comps )
			{
				try
				{
					compObj = new Object;
					compObj.id = c.id;
					compObj.TopElem = OpenDoc(UrlFromDocID(c.id)).TopElem;
					compArray[ArrayCount(compArray)] = compObj;
				}
				catch(ex)
				{
				}
			}

			if (_params.disp_inds)
			{
				inds = XQuery( 'for $obj in indicators return $obj' );
				for ( ind in inds )
				{
					try
					{
						indObj = new Object;
						indObj.id = ind.id;
						indObj.TopElem = OpenDoc(UrlFromDocID(ind.id)).TopElem;
						indArray[ArrayCount(indArray)] = indObj;
					}
					catch(ex)
					{
					}
				}
			}
		}
		else
		{
			try
			{
				teProfile = OpenDoc(UrlFromDocID(_params.competence_profile_id)).TopElem;
				for (_competence in teProfile.competences)
				{
					try
					{
						competenceDoc = OpenDoc(UrlFromDocID(_competence.competence_id)).TopElem;
						compObj = new Object;
						compObj.id = _competence.competence_id;
						compObj.TopElem = competenceDoc;
						compArray[ArrayCount(compArray)] = compObj;
					}
					catch(ex)
					{
						//alert(ex)
						continue;
					}

					if (_params.disp_inds)
					{
						for (_indicator in _competence.indicators)
						{
							try
							{
								indicatorDoc = OpenDoc(UrlFromDocID(_indicator.indicator_id)).TopElem;
								indObj = new Object;
								indObj.id = _indicator.indicator_id;
								indObj.TopElem = indicatorDoc;
								indArray[ArrayCount(indArray)] = indObj;
							}
							catch(ex)
							{
								continue;
							}
						}
					}
				}

			}
			catch(ex)
			{
				//alert(ex)
			}
		}


		function addComps( pa_arr,disp_person_list_staff,disp_comp_mark_name,disp_ideal_profile_mark,disp_inds )
		{
			for (iPaElem in pa_arr)
			{
				//alert(iPaElem.id)
				try
				{
					NewElem=dataForm.personal_competences.ObtainChildByKey( iPaElem.PrimaryKey );
					NewElem.person_fullname= iPaElem.person_fullname
					NewElem.person_position= iPaElem.person_position_name

					if (disp_person_list_staff==true)
					{
						NewElem.person_dep=  tools.person_list_staff_by_person_id(iPaElem.person_id,'','','','/');
					}
					else
					{
						try
						{
							NewElem.person_dep= iPaElem.person_id.ForeignElem.position_parent_name;
						}
						catch(ex)
						{
							NewElem.person_dep= '';
						}
					}

					NewElem.person_expert= iPaElem.expert_person_fullname
					NewElem.person_status= iPaElem.status
					NewElem.person_overall= iPaElem.overall


					tePa=OpenDoc( UrlFromDocID( iPaElem.id ) ).TopElem;

					for (_competence in tePa.competences)
					{
						try
						{
							//competenceDoc = OpenDoc(UrlFromDocID(_competence.competence_id)).TopElem;
							competenceDoc = ArrayFind(  compArray , 'id ==    ' + _competence.competence_id  ).TopElem;
						}
						catch(ex)
						{
							continue;
						}

						curPersonComp=NewElem.competences.ObtainChildByKey(_competence.competence_id)
						curGlobalComp=dataForm.competences.ObtainChildByKey(_competence.competence_id)

						curPersonComp.competence_name = competenceDoc.name;
						curGlobalComp.competence_name = competenceDoc.name;

						try
						{
							_mark = competenceDoc.scales.GetChildByKey(_competence.mark);

							if (!disp_comp_mark_name)
							{
								if (_mark.percent != null)
									comp_mark = _mark.percent
								else
									comp_mark = (_mark.ChildIndex + 1);
							}
							else
							{
								comp_mark=_mark.name;
							}

						}
						catch(err)
						{
							try
							{
								comp_mark = Real(_competence.mark);
							}
							catch(err2)
							{
								comp_mark ='';
							}
						}

						curPersonComp.competence_mark = comp_mark

						if (disp_ideal_profile_mark)
						{
							try
							{
								_mark = competenceDoc.scales.GetChildByKey(_competence.plan);

								if (!disp_comp_mark_name)
								{
									if (_mark.percent != null)
										comp_mark = _mark.percent
									else
										comp_mark = (_mark.ChildIndex + 1);
								}
								else
								{
									comp_mark=_mark.name;
								}

							}
							catch(err)
							{
								try
								{
									comp_mark = Real(_competence.plan);
								}
								catch(err2)
								{
									comp_mark ='';
								}
							}

							curPersonComp.competence_ideal_mark = comp_mark
						}

						if (disp_inds)
						{
							for (_indicator in _competence.indicators)
							{
								try
								{
									//indicatorDoc = OpenDoc(UrlFromDocID(_indicator.indicator_id)).TopElem;
									indicatorDoc = ArrayFind(  indArray , 'id ==    ' + _indicator.indicator_id  ).TopElem;
								}
								catch(ex)
								{
									continue;
								}

								curPersonInd=curPersonComp.indicators.ObtainChildByKey(_indicator.indicator_id)
								curGlobalInd=curGlobalComp.indicators.ObtainChildByKey(_indicator.indicator_id)

								curPersonInd.indicator_name = indicatorDoc.name;
								curGlobalInd.indicator_name = indicatorDoc.name;

								try
								{
									_mark = indicatorDoc.scales.GetChildByKey(_indicator.mark);

									if (!disp_comp_mark_name)
									{
										if (_mark.percent != null)
											ind_mark = _mark.percent
										else
											ind_mark = (_mark.ChildIndex + 1);
									}
									else
									{
										ind_mark=_mark.name;
									}

								}
								catch(err)
								{
									try
									{
										ind_mark = Real(_indicator.mark);
									}
									catch(err2)
									{
										ind_mark = '';
									}
								}

								curPersonInd.indicator_mark = ind_mark

								if (disp_ideal_profile_mark)
								{
									try
									{
										_mark = indicatorDoc.scales.GetChildByKey(_indicator.plan);

										if (!disp_comp_mark_name)
										{
											if (_mark.percent != null)
												ind_mark = _mark.percent
											else
												ind_mark = (_mark.ChildIndex + 1);
										}
										else
										{
											ind_mark=_mark.name;
										}

									}
									catch(err)
									{
										try
										{
											ind_mark = Real(_indicator.plan);
										}
										catch(err2)
										{
											ind_mark = '';
										}
									}

									curPersonInd.indicator_ideal_mark = ind_mark
								}
							}
						}
					}


				}
				catch(ex)
				{
					//alert(ex)
				}
			}
		}


		function addCompsAgr(AggregatedCompetenceElem,TotalElem, pa_arr,disp_person_list_staff,disp_comp_mark_name,disp_ideal_profile_mark,disp_inds )
		{
			for (iPaElem in pa_arr)
			{
				//alert(iPaElem.id)
				try
				{
					if (iPaElem.overall.HasValue)
					{
						AggregatedCompetenceElem.dep_overall= AggregatedCompetenceElem.dep_overall+iPaElem.overall;
						TotalElem.dep_overall= TotalElem.dep_overall+iPaElem.overall;
					}
					AggregatedCompetenceElem.forms_count=AggregatedCompetenceElem.forms_count+1;
					TotalElem.forms_count= TotalElem.forms_count+1;

					tePa=OpenDoc( UrlFromDocID( iPaElem.id ) ).TopElem;

					for (_competence in tePa.competences)
					{
						try
						{
							//competenceDoc = OpenDoc(UrlFromDocID(_competence.competence_id)).TopElem;
							competenceDoc = ArrayFind(  compArray , 'id ==    ' + _competence.competence_id  ).TopElem;
						}
						catch(ex)
						{
							continue;
						}

						curObjComp=AggregatedCompetenceElem.competences.ObtainChildByKey(_competence.competence_id)
						curObjComp.competence_name = competenceDoc.name;

						curTotalComp=TotalElem.competences.ObtainChildByKey(_competence.competence_id)
						curTotalComp.competence_name = competenceDoc.name;

						curGlobalComp=dataForm.competences.ObtainChildByKey(_competence.competence_id)
						curGlobalComp.competence_name = competenceDoc.name;
						curGlobalCompScales=curGlobalComp.scales.AssignElem(competenceDoc.scales)

						if (_competence.mark != '' || _competence.mark != 'N')
						{
							try
							{
								_mark = competenceDoc.scales.GetChildByKey(_competence.mark);
								if (_mark.percent != null)
									comp_mark = _mark.percent
								else
									comp_mark = (_mark.ChildIndex + 1);

								curObjCompScales=curObjComp.scales.ObtainChildByKey(_competence.mark);
								curObjCompScales.count=curObjCompScales.count+1
								curObjComp.competence_total=curObjComp.competence_total+comp_mark;
								curObjComp.competence_count=curObjComp.competence_count+1;

								curTotalCompScales=curTotalComp.scales.ObtainChildByKey(_competence.mark);
								curTotalCompScales.count=curTotalCompScales.count+1
								curTotalComp.competence_total=curTotalComp.competence_total+comp_mark;
								curTotalComp.competence_count=curTotalComp.competence_count+1;


							}
							catch(err)
							{

							}


						}

						if (disp_inds)
						{
							for (_indicator in _competence.indicators)
							{
								try
								{
									//indicatorDoc = OpenDoc(UrlFromDocID(_indicator.indicator_id)).TopElem;
									indicatorDoc = ArrayFind(  indArray , 'id ==    ' + _indicator.indicator_id  ).TopElem;
								}
								catch(ex)
								{
									continue;
								}


								curObjInd=curObjComp.indicators.ObtainChildByKey(_indicator.indicator_id)
								curObjInd.indicator_name = indicatorDoc.name;

								curTotalInd=curTotalComp.indicators.ObtainChildByKey(_indicator.indicator_id)
								curTotalInd.indicator_name = indicatorDoc.name;

								curGlobalInd=curGlobalComp.indicators.ObtainChildByKey(_indicator.indicator_id)
								curGlobalInd.indicator_name = indicatorDoc.name;
								curGlobalIndScales=curGlobalInd.scales.AssignElem(indicatorDoc.scales)

								if (_indicator.mark != '' || _indicator.mark != 'N')
								{
									try
									{
										_mark = indicatorDoc.scales.GetChildByKey(_indicator.mark);

										if (!disp_comp_mark_name)
										{
											if (_mark.percent != null)
												ind_mark = _mark.percent
											else
												ind_mark = (_mark.ChildIndex + 1);
										}
										else
										{
											ind_mark=_mark.name;
										}

										curObjIndScales=curObjInd.scales.ObtainChildByKey(_indicator.mark);
										curObjIndScales.count=curObjIndScales.count+1
										curObjInd.indicator_total=curObjInd.indicator_total+ind_mark;
										curObjInd.indicator_count=curObjInd.indicator_count+1;

										curTotalIndScales=curTotalInd.scales.ObtainChildByKey(_indicator.mark);
										curTotalIndScales.count=curTotalIndScales.count+1
										curTotalInd.indicator_total=curTotalInd.indicator_total+ind_mark;
										curTotalInd.indicator_count=curTotalInd.indicator_count+1;
									}
									catch(err)
									{
									}

								}
							}
						}

					}


				}
				catch(ex)
				{
					alert(ex)
				}
			}
		}

		dataForm = OpenNewDoc( 'x-local://wtv/wtv_view_competence_by_depart_report.xml' ).TopElem.data;

		_where_str = ( _params.assessment_appraise_id == null ? '' : ' $elem/assessment_appraise_id = ' + _params.assessment_appraise_id );
		_where_str = _where_str + ( _params.start_date == null ? '' : ( _where_str == '' ? ' ' : ' and ' ) + '$elem/appraise_date &gt;= date( &quot;' + _params.start_date + '&quot; )' );
		_where_str = _where_str + ( _params.finish_date == null ? '' : ( _where_str == '' ? ' ' : ' and ' ) + '$elem/appraise_date &lt;= date( &quot;' + _params.finish_date + '&quot; )' );

		_where_str = _where_str + (_params.participant_type == 'all' ? '' : ( _where_str == '' ? ' ' : ' and ' ) + '$elem/status = &quot;' + _params.participant_type + '&quot; ' );

		_person_array = Array();

		if ( (_params.org_id.HasValue || _params.parent_object_id.HasValue)==true)
		{
			curNodeID = (( _params.parent_object_id != null ? _params.parent_object_id : _params.org_id )==null?'0':( _params.parent_object_id != null ? _params.parent_object_id : _params.org_id ));
			//_ids_array = ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( curNodeID )) ;

			if ( _params.hier_sub_select==true )
			{
				_ids_array = ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( curNodeID )) ;
			}
			else
			{
				subsArray = XQuery('for $elem in subs where $elem/parent_id='+ curNodeID +' and $elem/type=&quot;position&quot; return $elem');
				_ids_array = Array();
				count=0;
				for ( _sub in subsArray )
				{
					if ( _sub.basic_collaborator_id.HasValue)
					{
						_ids_array[count] = _sub.basic_collaborator_id;
						count++;
					}
				}
				_ids_array = ArraySelectDistinct(_ids_array);
			}
			_person_array = QueryCatalogByKeys( 'collaborators', 'id', _ids_array );
		}

		if (_params.person_id.HasValue==true)
		{
			if ( ArrayCount( _person_array )>0 )
			{
				_person_array = ArraySelect( _person_array, 'id =='+ _params.person_id);
			}
			else if ( (!( _params.org_id.HasValue || _params.parent_object_id.HasValue || _params.group_id.HasValue ))==true)
			{
				_person_array = XQuery( 'for $elem in collaborators where $elem/id = ' + _params.person_id + ' return $elem' );
			}
		}

		if (_params.disp_aggregated_list==false)
		{
			if  ( (_params.org_id.HasValue || _params.parent_object_id.HasValue || _params.person_id.HasValue)==true  )
			{
				for ( _person in _person_array )
				{
					if ( _person.id != null )
					{
							//alert('for $elem in pas where $elem/person_id = ' + _person.id + ( _where_str == '' ? '' : ' and ' ) + _where_str + ' return $elem')
							arrPas=XQuery( 'for $elem in pas where $elem/person_id = ' + _person.id + ( _where_str == '' ? '' : ' and ' ) + _where_str + ' and $elem/assessment_appraise_type=&quot;competence_appraisal&quot; return $elem');
							addComps(arrPas,_params.disp_person_list_staff,_params.disp_comp_mark_name,_params.disp_ideal_profile_mark,_params.disp_inds)
					}
				}
			}
			else
			{
				//alert('for $elem in pas '+( _where_str == '' ? '' : ' where  ' ) + _where_str + ' return $elem')
				arrPas=XQuery( 'for $elem in pas where $elem/assessment_appraise_type=&quot;competence_appraisal&quot;'+( _where_str == '' ? '' : ' and  ' ) + _where_str + ' return $elem');
				addComps(arrPas,_params.disp_person_list_staff,_params.disp_comp_mark_name,_params.disp_ideal_profile_mark,_params.disp_inds)
			}
			dataForm.personal_competences.Sort('name','+')
		}
		else
		{

			if  ((!_params.org_id.HasValue && !_params.parent_object_id.HasValue && !_params.person_id.HasValue)==true  )
			{
				if ( ArrayCount( _person_array ) == 0 )
				{
					 _person_array=collaborators;
				}
			}

			if (_params.disp_all_org_list==true)
			{
				_person_array=collaborators;
			}

			cur_total_elem=dataForm.total_aggregated_competences.AddChild();
			cur_total_elem.obj_id=0;
			cur_total_elem.name=ms_tools.get_const('vagb_summary');
			cur_total_elem.obj_sub_path='';
			for ( _person in _person_array )
			{
				if ( _person.id != null )
				{


						arrPas=XQuery( 'for $elem in pas where $elem/person_id = ' + _person.id + ( _where_str == '' ? '' : ' and ' ) + _where_str + ' and $elem/assessment_appraise_type=&quot;competence_appraisal&quot; return $elem');

						if (_params.disp_all_org_list==false)
						{
							if  ( (!_params.person_id.HasValue)==true )
							{
								position_parent_id=_person.position_parent_id
								position_parent_name=_person.position_parent_name;
								if  (_params.show_people)
								{
									if  (_params.parent_object_id.HasValue==true )
									{
										if (Int(_params.parent_object_id)==_person.position_parent_id)
										{
											position_parent_id=_person.id;
											position_parent_name=_person.fullname;
										}
									}
									else
									{
										if  (_params.org_id.HasValue==true  )
										{
											if (Int(_params.org_id)==_person.org_id)
											{
												if ( !_person.position_parent_id.HasValue )
												{
													position_parent_id=_person.id;
													position_parent_name=_person.fullname;
												}
											}
										}
									}
								}
							}
							else
							{
								position_parent_id=_person.id;
								position_parent_name=_person.fullname;
							}
						}
						else
						{
							position_parent_id=_person.org_id;
							position_parent_name=_person.org_name;
						}
						if (Trim(position_parent_id) == '')
						{
							position_parent_id=0;
							position_parent_name=ms_tools.get_const('z0dh5azv44');
						}
						cur_elem=ArrayOptFind(dataForm.aggregated_competences, 'This.obj_id =='+position_parent_id )
						if ( cur_elem== undefined )
						{
							cur_elem=dataForm.aggregated_competences.ObtainChildByKey(position_parent_id)
							cur_elem.name=position_parent_name;
							if (_params.disp_person_list_staff==true)
							{
								if (_params.disp_all_org_list==false)
								{
									cur_elem.obj_sub_path = tools.person_list_staff_by_person_id(_person.id,_person,'','','/');

									if ( cur_elem.obj_sub_path=='')
									{
										if ( _person.org_id.HasValue&&_person.org_name.HasValue)
										{
											cur_elem.obj_sub_path=_person.org_name;
										}
									}
								}
								else
								{
									cur_elem.obj_sub_path=_person.org_name;
								}
							}
							else
							{
								cur_elem.obj_sub_path ='';
							}
						}
						addCompsAgr(cur_elem,cur_total_elem, arrPas,_params.disp_person_list_staff,_params.disp_comp_mark_name,_params.disp_ideal_profile_mark,_params.disp_inds )

					}
				}
				dataForm.aggregated_competences.Sort('name','+')
			}
			//alert(dataForm.Xml)
			return dataForm.GetXml( { 'tabs': false } );
	"/>

	<event_dep_report PROPERTY="1" PARAM="_param_str" PARAM="curUser" ALLOW-CALL-FROM-CLIENT="1" EXPR="

		if ( ! LdsIsServer )
			return CallServerMethod( 'tools_report', 'event_dep_report', [ RValue( _param_str ), curUser ] );

		bShowAlert = false;
		isXML	   = true;
		isMSSQL    = false;
		isOracle   = false;

		if ( ( tools.sys_db_capability & tools.UNI_CAP_BASIC ) > 0 )
		{
			isXML    = false;
			isMSSQL  = ( ( tools.sys_db_capability & tools.UNI_CAP_MSSQL ) > 0 );
			isOracle = ( ( tools.sys_db_capability & tools.UNI_CAP_ORACLE ) > 0 );
		}

		var oParams = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.event_dep_report;

		dataForm = OpenNewDoc( 'x-local://wtv/wtv_view_event_dep_report.xml' ).TopElem.data;

		var iMaxLength	  = 500;
		var iMaxLoopCount = 25;

		function fnQueryCatalogByKeys( strCatalogNameParam, strKeyParam, arrIDsParam )
		{
			if ( isXML == false )
			{
				var arrReturn = [];
				try
				{
					for ( i = 0; i < iMaxLoopCount; i++ )
					{
						arrTemp = ArrayRange( arrIDsParam, i * iMaxLength, iMaxLength )
						if ( ArrayOptFirstElem( arrTemp ) != undefined )
						{
							arrReturn = ArrayUnion( arrReturn, QueryCatalogByKeys( strCatalogNameParam, strKeyParam, arrTemp ) )
						}
						else
						{
							break;
						}
					}
				}
				catch( ex )
				{
					alert( 'fnQueryCatalogByKeys error:' + ex )
				}

				return arrReturn;
			}
			else
			{
				return QueryCatalogByKeys( strCatalogNameParam, strKeyParam, arrIDsParam );
			}
		}

		function fnQueryWithMatchSome( strCatalogNameParam, strKeyParam, arrIDsParam, strWhereParam )
		{
			if ( isXML == false )
			{
				var arrReturn = [];
				try
				{
					for ( i = 0; i < iMaxLoopCount; i++ )
					{
						arrTemp = ArrayRange( arrIDsParam, i * iMaxLength, iMaxLength )

						if ( ArrayOptFirstElem( arrTemp ) != undefined )
						{
							arrReturn = ArrayUnion( arrReturn, XQuery( 'for $elem in ' + strCatalogNameParam + 's where MatchSome( $elem/' + strKeyParam + ', (' + ArrayMerge( arrTemp, 'This', ',' ) + ' ) ) ' + ( strWhereParam == '' ? '' : ' and ' + strWhereParam ) + ' return $elem' ) );
						}
						else
						{
							break;
						}
					}

				}
				catch( ex )
				{
					alert( 'fnQueryWithMatchSome error:' + ex )
				}

				return arrReturn
			}
			else
			{
				return XQuery('for $elem in '+strCatalogNameParam+'s where MatchSome( $elem/'+strKeyParam+', ('+ArrayMerge(arrIDsParam,'This',',')+' ) ) '+( strWhereParam == '' ? '' : ' and '+ strWhereParam)+' return $elem')
			}
		}

		curNodeID = 0;

		if ( oParams.org_id != null || oParams.parent_object_id != null )
		{
			curNodeID = ( oParams.parent_object_id != null ? oParams.parent_object_id : oParams.org_id );
			
			_cur_sel_elem = XQuery( 'for $elem in subs where $elem/id = ' + curNodeID + ' return $elem' );

			_temp_arr = tools.xquery( 'for $elem in subs where IsHierChild( $elem/id, ' + curNodeID + ' ) and $elem/type!=\'position\' order by $elem/Hier() return $elem' )
			_temp_arr = ArrayUnion( _temp_arr, _cur_sel_elem );
		}
		else
		{
			QueryString = 'for $elem in subs where $elem/type!=&quot;position&quot; return $elem'
			try
			{
				_temp_arr=XQuery(QueryString);
			}
			catch(ex)
			{
				_temp_arr=Array();
			}
		}

		_where_str2 = ( oParams.education_method_id == null ? '' : ' $elem/education_method_id = ' + oParams.education_method_id );
		_where_str2 = _where_str2 + ( oParams.education_org_id == null ? '' : ( _where_str2 == '' ? ' ' : ' and ' ) + ' $elem/education_org_id = ' + oParams.education_org_id );
		_where_str2 = _where_str2 + ( oParams.disp_type_id == 'all' ? '' : ( _where_str2 == '' ? ' ' : ' and ' ) + ' $elem/type_id = &quot;' + oParams.disp_type_id + '&quot;' );
		_where_str2 = _where_str2 + ( oParams.start_date == null ? '' : ( _where_str2 == '' ? ' ' : ' and ' ) + ' $elem/start_date &gt;= date(&quot;'+oParams.start_date+'&quot;)');
		_where_str2 = _where_str2 + ( oParams.finish_date == null ? '' : ( _where_str2 == '' ? ' ' : ' and ' ) + ' $elem/start_date &lt;=date(&quot;'+oParams.finish_date+'&quot;)');
		_where_str2 = _where_str2 + ( Trim(oParams.code_contain) == '' ? '' : ( _where_str2 == '' ? ' ' : ' and ' ) + ' contains($elem/code, &quot;'+oParams.code_contain+'&quot;)');
		_where_str2 = _where_str2 + (( oParams.event_id) == null ? '' : (( _where_str2 == '' ? ' ' : ' and ' ) + ' $elem/id='+oParams.event_id));
		_where_str2 = Trim( _where_str2 );

		if ( oParams.place_id != null )
		{
			arrPlaces = Array();
			if ( oParams.uses_place_hier )
			{
				arrPlaces = tools.xquery( 'for $elem in places where IsHierChild( $elem/id, ' + oParams.place_id + ' ) order by $elem/Hier() return $elem' )
			}

			arrPlaces = ArrayUnion( arrPlaces, XQuery( 'for $elem in places where $elem/id = ' + oParams.place_id + ' return $elem' ) )
		}

		if ( _where_str2 != '' || oParams.place_id != null )
		{
			if ( oParams.place_id != null )
			{
				arrEvents = Array();
				for ( iPlaceElem in arrPlaces )
				{
					arrEvents = ArrayUnion( arrEvents, XQuery( 'for $elem in events where $elem/place_id = ' + iPlaceElem.id + ( _where_str2 == '' ? '' : ' and '+ _where_str2 ) + ' return $elem' ) )
				}

			}
			else
			{
				arrEvents = XQuery( 'for $elem in events ' + ( _where_str2 == '' ? '' : ' where ' + _where_str2 ) + ' return $elem' );
			}
			
			iEventID = ArrayExtract( arrEvents, 'id');

			//_learning_array = fnQueryCatalogByKeys( 'event_results', 'event_id', iEventID );
			_learning_array = fnQueryWithMatchSome( 'event_result', 'event_id', iEventID, '$elem/is_assist = true()' );
		}
		else
		{
			_learning_array = [] // XQuery('event_results');
		}

		if ( oParams.lector_id != null )
		{
			lectors_events = XQuery('for $elem in event_lectors where $elem/lector_id=' + oParams.lector_id + ' return $elem' );
			iEventID = ArrayExtract( ArraySelectDistinct( lectors_events, 'event_id'), 'event_id');
			_learning_temp_array=Array();

			if (ArrayOptFirstElem(_learning_array)!=undefined)
			{
				for ( _elem in iEventID)
				{
					_learning_temp_array=ArrayUnion(_learning_temp_array, ArraySelect(_learning_array, 'event_id ==' + _elem ) )
				}
			}
			else
			{
				if ( bShowAlert ) alert('fnQueryCatalogByKeys 1.1')
				_learning_temp_array = fnQueryCatalogByKeys('event_results', 'event_id', iEventID);
			}
			_learning_array=_learning_temp_array,;
		}

		_where_courses_str= '';
		
		arrLearningTypes=String('active_learning,learning').split(',')

		if ( oParams.add_courses )
		{
			arrCourses = Array();

			_where_courses_str= ( oParams.course_id == null ? '' : ' $elem/course_id = ' + oParams.course_id );
			_where_courses_str = _where_courses_str + ( oParams.start_date == null ? '' : ( _where_courses_str == '' ? ' ' : ' and ' ) + ' $elem/start_usage_date &gt;= date(&quot;'+oParams.start_date+'&quot;)');
			_where_courses_str = _where_courses_str + ( oParams.finish_date == null ? '' : ( _where_courses_str == '' ? ' ' : ' and ' ) + ' $elem/start_usage_date &lt;=date(&quot;'+oParams.finish_date+'&quot;)');
			_where_courses_str = Trim( _where_courses_str );
			_where_courses_str = _where_courses_str + ( _where_courses_str == '' ? ' ' : ' and ' ) + ' ($elem/state_id=4 or $elem/state_id=2)';
			_where_courses_str = Trim( _where_courses_str );
		}

		arrDuration = Array();
		
		SelectString = '';

		if ( oParams.use_fact_duration )
		{
			for ( event_type in oParams.event_type_durations )
			{
				NewElem = new Object;
				NewElem.event_duration = event_type.event_duration;
				NewElem.select_string = 'type_id == &quot;' + event_type.type + '&quot;';
				arrDuration[ ArrayCount( arrDuration ) ] = NewElem;
			}
		}

		if ( SelectString == '' )
		{
			SelectString = 'type_id != 0';
		}

		NewElem= new Object
		NewElem.event_duration=oParams.event_duration;
		NewElem.select_string=SelectString;
		arrDuration[ArrayCount(arrDuration)]=NewElem


		for ( _elem in _temp_arr )
		{
			_where_str ='';
			_child = dataForm.subdivisions.AddChild();
			_child.AssignElem( _elem );

			if (_elem.type=='org')
			{
				_where_str = '$elem/position_parent_id=null() and $elem/org_id=';
				_child.is_main=true;
			}
			else
			{
				if (curNodeID==_elem.id)
				{
					_child.is_main=true;
				}
				_where_str = '$elem/position_parent_id=';
			}

			strCurSubQuery = 'for $elem in collaborators where ' + _where_str +_elem.id + ' and $elem/is_dismiss = false() return $elem'

			_cur_sub_collabor_array = XQuery( strCurSubQuery );

			_down_levels_collabor_array = fnQueryCatalogByKeys( 'collaborators', 'id',ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( _elem.id )));//XQuery('for $elem in collaborators where $elem/org_id='+_elem.id+' return $elem');//fnQueryCatalogByKeys( 'collaborators', 'id',ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( _elem.id )))

			if ( oParams.show_only_current_period_workers )
			{
				if ( oParams.finish_date != null )
				{
					_where_str_collabor_date = '';
					_where_str_collabor_date ='(tePerson.is_dismiss==false||(tePerson.is_dismiss==true';
					_where_str_collabor_date = _where_str_collabor_date + ( oParams.start_date == null ? '' : '&&(tePerson.hire_date<= ParseDate(  '+SqlLiteral(oParams.start_date)+')||tePerson.hire_date==null)');
					_where_str_collabor_date = _where_str_collabor_date + ( oParams.finish_date == null ? '' : ( _where_str_collabor_date == '' ? '&&(' : '&&(' ) + 'dismiss_date>=ParseDate(&quot;'+oParams.finish_date+'&quot;))');
					_where_str_collabor_date = Trim( _where_str_collabor_date );

					_where_str_collabor_date = _where_str_collabor_date +'))';

					temp_down_levels_collabor_array=Array()

					for ( iPersonElem in _down_levels_collabor_array )
					{

							try
							{
								tePerson = OpenDoc(UrlFromDocID(iPersonElem.id)).TopElem;

								dismiss_date=ParseDate((tePerson.dismiss_date!=null?tePerson.dismiss_date:DateNewTime(Date( 1990, 1, 1 ),00,00,00)))

								if ( _where_str_collabor_date != '' && tools.safe_execution ( '!( ' + _where_str_collabor_date + ' )' ) )
									continue;

								temp_down_levels_collabor_array[ArrayCount(temp_down_levels_collabor_array)]=iPersonElem;

							}
							catch(ex)
							{
								//alert(ms_tools.get_const('c_error') + ': '+iPersonElem.fullname+' '+ex)
							}
					}
					_down_levels_collabor_array=temp_down_levels_collabor_array;
				}
				else
				{
					_where_str_collabor_date =''
					_where_str_collabor_date ='||(is_dismiss==true';
					_where_str_collabor_date = _where_str_collabor_date + ( oParams.start_date == null ? '' : '&&(hire_date<= ParseDate(  '+SqlLiteral(oParams.start_date)+')||hire_date==null)');
					_where_str_collabor_date = Trim( _where_str_collabor_date );
					_where_str_collabor_date = _where_str_collabor_date +')';

					_down_levels_collabor_array=ArraySelect(_down_levels_collabor_array, &quot;(is_dismiss==false&quot;+_where_str_collabor_date+&quot;)&quot;);
				}
			}
			else
			{
				_down_levels_collabor_array=ArraySelect(_down_levels_collabor_array, &quot;(is_dismiss==false)&quot;);
			}

			_learning_array_person=Array();
			_learning_array_course_person=Array();
			arrCurrentCollaboratorsIDs=ArrayExtract(_cur_sub_collabor_array,'This.id')

			if (ArrayOptFirstElem(_learning_array)!=undefined)
			{
				for (_person in _cur_sub_collabor_array)
				{
					_learning_array_person = ArrayUnion(_learning_array_person,ArraySelect(_learning_array, 'person_id ==' + _person.id))
				}
			}
			else
			{
				_learning_array_person = fnQueryCatalogByKeys('event_results', 'person_id', arrCurrentCollaboratorsIDs);
			}

			if ( oParams.add_courses)
			{
				for (strElem in arrLearningTypes)
				{
					_learning_array_course_person = ArrayUnion(_learning_array_course_person,fnQueryWithMatchSome(strElem,'person_id',arrCurrentCollaboratorsIDs,_where_courses_str))
				}
			}

			arrLearningPersons=ArrayExtract(_learning_array_person,'This.person_id')
			if ( oParams.add_courses)
			{
				arrLearningPersons=ArrayUnion(arrLearningPersons,ArrayExtract(_learning_array_course_person,'This.person_id'))
			}

			_child.sub_collabor_in_event_count=ArrayCount(arrLearningPersons);
			_child.sub_collabor_in_event_count_unique=ArrayCount(ArraySelectDistinct(arrLearningPersons,'This'));

			_child.days_count=0;
			if (oParams.use_fact_duration)
			{
				for (iDurationElem in arrDuration)
				{
					if (!oParams.count_training_days)
					{
						try
						{
							_child.days_count=_child.days_count+ArraySum(ArraySelect(fnQueryCatalogByKeys( 'events', 'id',ArrayExtract( ArraySelectDistinct( _learning_array_person, 'event_id'), 'event_id')),iDurationElem.select_string),' (x=OpenDoc(UrlFromDocID(id)).TopElem, _duration_fact=(x.duration_days_fact!=null? x.duration_days_fact: (x.duration_fact!=null?StrRealFixed(Real(x.duration_fact)/Real('+iDurationElem.event_duration+'),2):(start_date.HasValue && finish_date.HasValue? (DateToRawSeconds(finish_date)- DateToRawSeconds(start_date))/86400 + 1 :0))))');
						}
						catch(ex)
						{
							temp_events_array=ArraySelect(fnQueryCatalogByKeys( 'events', 'id',ArrayExtract( ArraySelectDistinct( _learning_array_person, 'event_id'), 'event_id')),iDurationElem.select_string)
							Summ=0
							for (iEventElem in temp_events_array)
							{
								try
								{
									x=OpenDoc(UrlFromDocID(iEventElem.id)).TopElem;
									_duration_fact=(x.duration_days_fact!=null? x.duration_days_fact: (x.duration_fact!=null?StrRealFixed(Real(x.duration_fact)/Real(iDurationElem.event_duration),2):(iEventElem.start_date.HasValue && iEventElem.finish_date.HasValue? (DateToRawSeconds(iEventElem.finish_date)- DateToRawSeconds(iEventElem.start_date))/86400 + 1 :0)))
									Summ=Summ+_duration_fact
								}
								catch(ex)
								{

								}
							}
							_child.days_count=_child.days_count+Summ

						}
					}
					else
					{
						try
						{
							_child.days_count=_child.days_count+ArraySum(ArraySelect(fnQueryCatalogByKeys( 'events', 'id',ArrayExtract( ArraySelectDistinct( _learning_array_person, 'event_id'), 'event_id')),iDurationElem.select_string),' (x=OpenDoc(UrlFromDocID(id)).TopElem, _duration_fact=(x.duration_days_fact!=null? x.duration_days_fact:(x.duration_fact!=null?StrRealFixed(Real(x.duration_fact)/Real('+iDurationElem.event_duration+'),2):(start_date.HasValue && finish_date.HasValue? (DateToRawSeconds(finish_date)- DateToRawSeconds(start_date))/86400 + 1 :0))))* ArrayCount(ArraySelect(_learning_array_person, &quot;event_id ==&quot; +id))');
						}
						catch(ex)
						{
							temp_events_array=ArraySelect(fnQueryCatalogByKeys( 'events', 'id',ArrayExtract( ArraySelectDistinct( _learning_array_person, 'event_id'), 'event_id')),iDurationElem.select_string)
							Summ=0
							for (iEventElem in temp_events_array)
							{
								try
								{
									x=OpenDoc(UrlFromDocID(iEventElem.id)).TopElem;
									_duration_fact=(x.duration_days_fact!=null? x.duration_days_fact: (x.duration_fact!=null?StrRealFixed(Real(x.duration_fact)/Real(iDurationElem.event_duration),2):(iEventElem.start_date.HasValue && iEventElem.finish_date.HasValue? (DateToRawSeconds(iEventElem.finish_date)- DateToRawSeconds(iEventElem.start_date))/86400 + 1 :0)))* ArrayCount(ArraySelect(_learning_array_person, 'event_id ==' +iEventElem.id))
									Summ=Summ+_duration_fact
								}
								catch(ex)
								{

								}
							}
							_child.days_count=_child.days_count+Summ
						}
					}
				}
			}
			else
			{
				if (!oParams.count_training_days)
				{
					_child.days_count=ArraySum(fnQueryCatalogByKeys( 'events', 'id',ArrayExtract( ArraySelectDistinct( _learning_array_person, 'event_id'), 'event_id')),' (start_date.HasValue && finish_date.HasValue? (DateToRawSeconds(finish_date)- DateToRawSeconds(start_date))/86400 + 1 :0)* ArrayCount(ArraySelect(_learning_array_person, &quot;event_id ==&quot; +id))');
				}
				else
				{
					_child.days_count=ArraySum(fnQueryCatalogByKeys( 'events', 'id',ArrayExtract( ArraySelectDistinct( _learning_array_person, 'event_id'), 'event_id')),' (start_date.HasValue && finish_date.HasValue? (DateToRawSeconds(finish_date)- DateToRawSeconds(start_date))/86400 + 1 :0)');
				}
			}
			if ( oParams.add_courses)
			{
				if (!oParams.count_training_days)
				{
					_child.days_count=_child.days_count+ StrRealFixed(Real(ArrayCount(ArraySelectDistinct(_learning_array_course_person,'course_id')))*Real(oParams.course_duration),2)
				}
				else
				{
					_child.days_count=_child.days_count+StrRealFixed(Real(ArrayCount(ArraySelectDistinct(_learning_array_course_person,'person_id')))*Real(oParams.course_duration),2)
				}
			}

			_learning_array_person = Array();
			_learning_array_course_person = Array();

			arrCurrentCollaboratorsIDs = ArrayExtract( _down_levels_collabor_array, 'This.id' )

			if ( ArrayOptFirstElem( _learning_array ) != undefined )
			{
				for ( _person in _down_levels_collabor_array )
				{
					_learning_array_person = ArrayUnion( _learning_array_person, ArraySelect( _learning_array, 'person_id ==' + _person.id ) );
				}
			}
			else
			{
				_learning_array_person = fnQueryCatalogByKeys( 'event_results', 'person_id', arrCurrentCollaboratorsIDs );
			}

			if ( oParams.add_courses )
			{
				for ( strElem in arrLearningTypes )
				{
					_learning_array_course_person = ArrayUnion(_learning_array_course_person,fnQueryWithMatchSome(strElem,'person_id',arrCurrentCollaboratorsIDs,_where_courses_str))
				}
			}

			arrLearningPersons = ArrayExtract( _learning_array_person, 'This.person_id' )
			if ( oParams.add_courses )
			{
				arrLearningPersons = ArrayUnion( arrLearningPersons, ArrayExtract( _learning_array_course_person, 'This.person_id' ) )
			}

			_child.down_levels_collabor_in_event_count 			= ArrayCount( arrLearningPersons );
			_child.down_levels_collabor_in_event_count_unique	= ArrayCount( ArraySelectDistinct( arrLearningPersons, 'This' ) );

			if ( oParams.use_fact_duration )
			{
				_child.days_count_total=0
				for (iDurationElem in arrDuration)
				{
					if (!oParams.count_training_days)
					{
						try
						{
							_child.days_count_total=_child.days_count_total+ArraySum(ArraySelect(fnQueryCatalogByKeys( 'events', 'id',ArrayExtract( ArraySelectDistinct( _learning_array_person, 'event_id'), 'event_id')),iDurationElem.select_string),' (x=OpenDoc(UrlFromDocID(id)).TopElem, _duration_fact=(x.duration_days_fact!=null? x.duration_days_fact: (x.duration_fact!=null?Real(Real(x.duration_fact)/Real('+iDurationElem.event_duration+')):(start_date.HasValue && finish_date.HasValue? (DateToRawSeconds(finish_date)- DateToRawSeconds(start_date))/86400 + 1 :0))))');
						}
						catch(ex)
						{
							temp_events_array=ArraySelect(fnQueryCatalogByKeys( 'events', 'id',ArrayExtract( ArraySelectDistinct( _learning_array_person, 'event_id'), 'event_id')),iDurationElem.select_string)
							Summ=0
							for (iEventElem in temp_events_array)
							{
								try
								{
									x=OpenDoc(UrlFromDocID(iEventElem.id)).TopElem;
									_duration_fact=(x.duration_days_fact!=null? x.duration_days_fact: (x.duration_fact!=null?Real(Real(x.duration_fact)/Real(iDurationElem.event_duration)):(iEventElem.start_date.HasValue && iEventElem.finish_date.HasValue? (DateToRawSeconds(iEventElem.finish_date)- DateToRawSeconds(iEventElem.start_date))/86400 + 1 :0)))
									Summ=Summ+_duration_fact
								}
								catch(ex)
								{

								}
							}
							_child.days_count_total=_child.days_count_total+Summ
						}
					}
					else
					{
						try
						{
							_child.days_count_total=_child.days_count_total+ArraySum(ArraySelect(fnQueryCatalogByKeys( 'events', 'id',ArrayExtract( ArraySelectDistinct( _learning_array_person, 'event_id'), 'event_id')),iDurationElem.select_string),' (x=OpenDoc(UrlFromDocID(id)).TopElem, _duration_fact=(x.duration_days_fact!=null? x.duration_days_fact:(x.duration_fact!=null?Real(Real(x.duration_fact)/Real('+iDurationElem.event_duration+')):(start_date.HasValue && finish_date.HasValue? (DateToRawSeconds(finish_date)- DateToRawSeconds(start_date))/86400 + 1 :0))))* ArrayCount(ArraySelect(_learning_array_person, &quot;event_id ==&quot; +id))');
						}
						catch(ex)
						{
							temp_events_array=ArraySelect(fnQueryCatalogByKeys( 'events', 'id',ArrayExtract( ArraySelectDistinct( _learning_array_person, 'event_id'), 'event_id')),iDurationElem.select_string)
							Summ=0
							for (iEventElem in temp_events_array)
							{
								try
								{
									x=OpenDoc(UrlFromDocID(iEventElem.id)).TopElem;
									_duration_fact=(x.duration_days_fact!=null? x.duration_days_fact: (x.duration_fact!=null?Real(Real(x.duration_fact)/Real(iDurationElem.event_duration)):(iEventElem.start_date.HasValue && iEventElem.finish_date.HasValue? (DateToRawSeconds(iEventElem.finish_date)- DateToRawSeconds(iEventElem.start_date))/86400 + 1 :0)))* ArrayCount(ArraySelect(_learning_array_person, 'event_id ==' +iEventElem.id))
									Summ=Summ+_duration_fact
								}
								catch(ex)
								{

								}
							}
							_child.days_count_total=_child.days_count_total+Summ
						}
					}
				}
			}
			else
			{
				if (!oParams.count_training_days)
				{
					_child.days_count_total=ArraySum(fnQueryCatalogByKeys( 'events', 'id',ArrayExtract( ArraySelectDistinct( _learning_array_person, 'event_id'), 'event_id')),' (start_date.HasValue && finish_date.HasValue? (DateToRawSeconds(finish_date)- DateToRawSeconds(start_date))/86400 + 1 :0)');
				}
				else
				{
					_child.days_count_total=ArraySum(fnQueryCatalogByKeys( 'events', 'id',ArrayExtract( ArraySelectDistinct( _learning_array_person, 'event_id'), 'event_id')),' (start_date.HasValue && finish_date.HasValue? (DateToRawSeconds(finish_date)- DateToRawSeconds(start_date))/86400 + 1 :0)* ArrayCount(ArraySelect(_learning_array_person, &quot;event_id ==&quot; +id))');
				}
			}

			if ( oParams.add_courses)
			{
				if (!oParams.count_training_days)
				{
					_child.days_count_total=_child.days_count_total+Real(Real(ArrayCount(ArraySelectDistinct(_learning_array_course_person,'course_id')))*Real(oParams.course_duration))
				}
				else
				{
					_child.days_count_total=_child.days_count_total+Real(Real(ArrayCount(ArraySelectDistinct(_learning_array_course_person,'person_id')))*Real(oParams.course_duration))
				}
			}

			_child.person_count=ArrayCount(_cur_sub_collabor_array);
			_child.total_person_count=ArrayCount(_down_levels_collabor_array);

			if (_child.total_person_count!=0)
			{
				_child.percent_total=StrReal(((Real(_child.down_levels_collabor_in_event_count_unique)/Real(_child.total_person_count))*100),2);
			}

			if (_child.person_count!=0)
			{
				_child.percent=StrReal(((Real(_child.sub_collabor_in_event_count_unique)/Real(_child.person_count))*100),2);
			}

			if (oParams.use_whole_staff)
			{
				if (_child.total_person_count!=0)
				{
					_child.average_days_total=StrReal(((Real(_child.days_count_total)/Real(_child.total_person_count))),2);
				}
				if (_child.person_count!=0)
				{
					_child.average_days=StrReal(((Real(_child.days_count)/Real(_child.person_count))),2);
				}
			}
			else
			{
				if (_child.down_levels_collabor_in_event_count_unique!=0)
				{
					_child.average_days_total=StrReal(((Real(_child.days_count_total)/Real(_child.down_levels_collabor_in_event_count_unique))),2);
				}
				if (_child.sub_collabor_in_event_count_unique!=0)
				{
					_child.average_days=StrReal(((Real(_child.days_count)/Real(_child.sub_collabor_in_event_count_unique))),2);
				}
			}
			if (_child.is_main==true)
			{
				if (ArrayCount(dataForm.total_subdivisions)==0)
				{
					_total_child = dataForm.total_subdivisions.AddChild();
					_total_child.name=ms_tools.get_const('vagb_summary') + ':';
				}
				_total_child.total_person_count=_total_child.total_person_count+_child.total_person_count;
				_total_child.total_collabor=_total_child.total_collabor+_child.down_levels_collabor_in_event_count;
				_total_child.total_collabor_unique=_total_child.total_collabor_unique+_child.down_levels_collabor_in_event_count_unique;
				_total_child.total_days_count=_total_child.total_days_count+_child.days_count_total;
			}
		}

		for (_elem in dataForm.total_subdivisions)
		{
			if (_elem.total_person_count!=0)
			{
				_elem.total_percent=StrReal(((Real(_elem.total_collabor_unique)/Real(_elem.total_person_count))*100),2);
			}
			if (oParams.use_whole_staff)
			{
				if (_elem.total_person_count!=0)
				{
					_elem.total_average_days=StrReal(((Real(_elem.total_days_count)/Real(_elem.total_person_count))),2);
				}
			}
			else
			{
				if (_elem.total_collabor_unique!=0)
				{
					_elem.total_average_days=StrReal(((Real(_elem.total_days_count)/Real(_elem.total_collabor_unique))),2);
				}
			}
		}

		dataForm.subdivisions.Sort('name', '+' );
		//alert(dataForm.subdivisions.Xml)
		return dataForm.GetXml( { 'tabs': false } );
	"/>


	<budget_report PROPERTY="1" PARAM="sXmlParam" ALLOW-CALL-FROM-CLIENT="1" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools_report', 'budget_report', [ RValue( sXmlParam ),  ] );

			fldParams = OpenDocFromStr( UrlDecode(sXmlParam), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.budget_report;

			TopElem = OpenNewDoc( 'x-local://wtv/wtv_view_budget_report.xml' ).TopElem;
			TopElem.AssignElem( fldParams );
			TopElem.calculation();

			return TopElem.data.GetXml( { 'tabs': false } );
	"/>

	<request_report PROPERTY="1" PARAM="oParams" ALLOW-CALL-FROM-CLIENT="1" EXPR="

			if ( oParams == null || oParams == undefined )
			{
				oResult.error = 1;
			}

			CheckCurThread();

			oResult = new Object();
			oResult.error = 0;
			oResult.requests = [];
			oResult.immediate_export = false;
			oResult.exported_file_link = '';
			oResult.rows_count = 0;

			var progress = new TaskProgress;
			progress.TaskName = ms_tools.get_const( 'bb1jhx82gs' );

			arrPersonsIDs = Array();
			arrRequests = Array();
			arrGroupRequestsByPersons = Array();

			var arrXQueryConditions = [];
			var arrXQueryConditionsWithPersons = [];

			if ( oParams.budget_period_id != null )
				arrXQueryConditions.push( '$elem/budget_period_id = ' + oParams.budget_period_id );

			if ( oParams.request_type_id != null )
				arrXQueryConditions.push( '$elem/request_type_id = ' + oParams.request_type_id );

			if ( oParams.start_date != null )
				arrXQueryConditions.push( '$elem/create_date >= ' + XQueryLiteral( DateNewTime( oParams.start_date, 0, 0, 0 ) ) );

			if ( oParams.finish_date != null )
				arrXQueryConditions.push( '$elem/create_date <= ' + XQueryLiteral( DateNewTime( oParams.finish_date, 23, 59, 59 ) ) );

			if ( oParams.status_id != 'all' )
				arrXQueryConditions.push( '$elem/status_id = ' + XQueryLiteral( oParams.status_id ) );

			if ( oParams.group_id != null )
			{
				arrGroupPersonsIDs = new Array();

				docGroup = tools.open_doc( oParams.group_id );
				if ( docGroup != undefined )
				{
					arrGroupPersonsIDs = ArrayExtract( docGroup.TopElem.collaborators, 'collaborator_id' );

					arrXQueryConditionsWithPersons.push( 'MatchSome( $elem/person_id, ( ' + ArrayMerge( arrGroupPersonsIDs, 'This.PrimaryKey', ',' ) + ' ) ) ' );
				}
			}

			if ( oParams.parent_object_id != null )
			{
				catSub = ArrayOptFirstElem( XQuery('for $elem in subdivisions where $elem/id = ' + oParams.parent_object_id + ' return $elem') );

				arrPersonsIDs = ArrayExtract( tools.xquery( 'for $elem in person_hierarchys where MatchSome( $elem/subdivision_id, ( ' + ( catSub != undefined ? catSub.id : null ) + ' ) ) return $elem/Fields( \'collaborator_id\')' ), 'This.collaborator_id' );

				if ( oParams.hier_sub_select )
				{
					arrXQueryConditionsWithPersons.push( 'MatchSome( $elem/person_id, ( ' + ArrayMerge( arrPersonsIDs, 'This.PrimaryKey', ',' ) + ' ) ) ' );
				}
				else
				{
					arrXQueryConditionsWithPersons.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/position_parent_id = ' + oParams.parent_object_id + ' )' );
				}
			}

			if ( oParams.org_id != null && oParams.parent_object_id == null )
			{
				if ( oParams.hier_sub_select )
				{
					arrXQueryConditionsWithPersons.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/org_id = ' + oParams.org_id + ' )' );
				}
				else
				{
					arrXQueryConditionsWithPersons.push( 'some $person in collaborators satisfies ( $elem/person_id = $person/id and $person/org_id = ' + oParams.org_id + ' and $person/position_parent_id = null() )' );
				}
			}

			if ( oParams.person_id != null || oParams.org_id != null && oParams.parent_object_id != null || oParams.group_id != null )
			{
				if ( oParams.person_id != null )
					arrXQueryConditionsWithPersons.push( '$elem/person_id = ' + oParams.person_id );

				sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

				sXQueryConditionsWithPersons = ArrayCount( arrXQueryConditionsWithPersons ) > 0 ? ArrayMerge( arrXQueryConditionsWithPersons, 'This', ' and ' ) : '';

				arrRequests = XQuery( 'for $elem in requests' + sXQueryConditions + ( sXQueryConditions != '' ? ' and ' : ' where ' ) + sXQueryConditionsWithPersons + ' and $elem/is_group = false() return $elem' );

				arrGroupRequests = XQuery( 'for $elem in requests' + sXQueryConditions + ( sXQueryConditions != '' ? ' and ' : ' where ' ) + ' $elem/is_group = true() return $elem' );

				arrGroupRequestsByPersons = XQuery( 'for $elem in request_collaborators where MatchSome( $elem/request_id, ( ' + ArrayMerge( arrGroupRequests, 'This.PrimaryKey', ',' ) + ' ) ) ' + ( sXQueryConditionsWithPersons != '' ? ' and ' + sXQueryConditionsWithPersons : sXQueryConditionsWithPersons ) + ' return $elem' )
			}
			else
			{
				if ( oParams.person_id != null )
					arrXQueryConditions.push( '$elem/person_id = ' + oParams.person_id );

				sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

				arrRequests = XQuery( 'for $elem in requests ' + sXQueryConditions + ' return $elem' );
			}

			//progress.ItemCount = ArrayCount( arrRequests ) + ArrayCount( arrGroupRequestsByPersons );
			//progress.CurrentItemIndex = -1;

			for ( catRequest in arrRequests )
			{
				//progress.CurrentItemName = catRequest.person_fullname;

				oTempRequest = {};

				oTempRequest.id						= catRequest.id;
				oTempRequest.code					= catRequest.code;
				oTempRequest.create_date			= catRequest.create_date.HasValue ? StrDate( catRequest.create_date, true, false ) : '';
				oTempRequest.request_type_id		= catRequest.request_type_id;

				try
				{
					oTempRequest.request_type_name	= catRequest.request_type_id.ForeignElem.name;
				}
				catch( ex )
				{
					oTempRequest.request_type_name  = '';
				}

				oTempRequest.object_id 	 			= catRequest.object_id;
				oTempRequest.object_name			= catRequest.object_name;
				oTempRequest.person_id 				= catRequest.person_id;
				oTempRequest.person_fullname  		= catRequest.person_fullname;
				oTempRequest.applicant_fullname		= catRequest.person_fullname;
				oTempRequest.status_id 				= catRequest.status_id;

				try
				{
					oTempRequest.status_name		= catRequest.status_id.ForeignElem.name;
				}
				catch( ex )
				{
					oTempRequest.status_name		= '';
				}

				oTempRequest.workflow_state_name	= catRequest.workflow_state_name;
				oTempRequest.is_group 		 		= catRequest.is_group? '+' : '';

				oResult.requests.push( oTempRequest );

				//progress.CurrentItemIndex++;
			}

			for ( catRequest in arrGroupRequestsByPersons )
			{
				//progress.CurrentItemName = catRequest.person_fullname;

				oTempRequest = {};

				oTempRequest.id						= catRequest.request_id;
				oTempRequest.code					= catRequest.code;
				oTempRequest.create_date			= catRequest.create_date.HasValue ? StrDate( catRequest.create_date, true, false ) : '';
				oTempRequest.request_type_id		= catRequest.request_type_id;

				try
				{
					oTempRequest.request_type_name	= catRequest.request_type_id.ForeignElem.name;
				}
				catch( ex )
				{
					oTempRequest.request_type_name  = '';
				}

				oTempRequest.object_id 	 			= catRequest.object_id;
				oTempRequest.object_name			= catRequest.object_name;
				oTempRequest.person_id 				= catRequest.person_id;
				oTempRequest.person_fullname  		= catRequest.person_fullname;

				try
				{
					oTempRequest.applicant_fullname	= catRequest.request_id.ForeignElem.person_fullname;
				}
				catch( ex )
				{
					oTempRequest.applicant_fullname	= '';
				}

				oTempRequest.status_id 				= catRequest.status_id;

				try
				{
					oTempRequest.status_name		= catRequest.status_id.ForeignElem.name;
				}
				catch( ex )
				{
					oTempRequest.status_name		= '';
				}

				try
				{
					oTempRequest.workflow_state_name = catRequest.request_id.ForeignElem.workflow_state_name;
				}
				catch( ex )
				{
					oTempRequest.workflow_state_name = '';
				}

				oTempRequest.is_group 		 		= catRequest.is_group? '+' : '';

				oResult.requests.push( oTempRequest );

				//progress.CurrentItemIndex++;
			}

			if ( progress.ItemCount > oParams.max_visible_rows )
			{
				oResult.immediate_export = true;
				oResult.rows_count = progress.ItemCount;
			}

			oResult.exported_file_link = tools_report.save_report_to_file( '', oParams.report_name, 'xlsx', '', oParams.bIsWebClient, oParams.columns, oResult.requests );

			return oResult;
	"/>


	<server_log_report PROPERTY="1" PARAM="_param_str" ALLOW-CALL-FROM-CLIENT="1" EXPR="

			if ( ! LdsIsServer )
				return CallServerMethod( 'tools_report', 'server_log_report', [ RValue( _param_str ),  ] );

			var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.server_log_report;

			dataForm = OpenNewDoc( 'x-local://wtv/wtv_form_table_data.xmd' ).TopElem;


			_names_array()=Array();

			_NewElem= new Object;
			_NewElem.type='xhttp_info';
			_NewElem.name=ms_tools.get_const('zhurnalxhttpinf_2')+'('+_NewElem.type+')';
			_NewElem.red_flag=false;
			_names_array[ArrayCount(_names_array)]=_NewElem;

			_NewElem= new Object;
			_NewElem.type='xhttp';
			_NewElem.name=ms_tools.get_const('osnovnoyzhurnal_2')+'('+_NewElem.type+')';
			_NewElem.red_flag=false;
			_names_array[ArrayCount(_names_array)]=_NewElem;

			_NewElem= new Object;
			_NewElem.type='critical-error';
			_NewElem.name=ms_tools.get_const('zhurnalkritiches_2')+'('+_NewElem.type+')';
			_NewElem.red_flag=true;
			_names_array[ArrayCount(_names_array)]=_NewElem;

			_NewElem= new Object;
			_NewElem.type='web_request';
			_NewElem.name=ms_tools.get_const('zhurnalwebzapro_2')+'('+_NewElem.type+')';
			_NewElem.red_flag=false;
			_names_array[ArrayCount(_names_array)]=_NewElem;

			_NewElem= new Object;
			_NewElem.type='email';
			_NewElem.name=ms_tools.get_const('zhurnalotpravki_2')+'('+_NewElem.type+')';
			_NewElem.red_flag=false;
			_names_array[ArrayCount(_names_array)]=_NewElem;

			_NewElem= new Object;
			_NewElem.type='actions';
			_NewElem.name=ms_tools.get_const('zhurnaldeystviy_4')+'('+_NewElem.type+')';
			_NewElem.red_flag=false;
			_names_array[ArrayCount(_names_array)]=_NewElem;

			_NewElem= new Object;
			_NewElem.type='agent';
			_NewElem.name=ms_tools.get_const('zhurnaldeystviy_5')+'('+_NewElem.type+')';
			_NewElem.red_flag=false;
			_names_array[ArrayCount(_names_array)]=_NewElem;

			_NewElem= new Object;
			_NewElem.type='config';
			_NewElem.name=ms_tools.get_const('zhurnalkonfigur_2')+'('+_NewElem.type+')';
			_NewElem.red_flag=false;
			_names_array[ArrayCount(_names_array)]=_NewElem;

			_NewElem= new Object;
			_NewElem.type='sql';
			_NewElem.name= ms_tools.get_const('zhurnalzaprosov') + ' ('+_NewElem.type+')';
			_NewElem.red_flag=false;
			_names_array[ArrayCount(_names_array)]=_NewElem;

			if (_params.show_alert) alert('_names_array='+ArrayCount(_names_array));
			path='x-local://Logs'
			if (_params.show_alert) alert('path='+path)
			try
			{
				_files_array=ReadDirectory(path)
			}
			catch(ex)
			{
				strTempUrl=FilePathToUrl(FilePath( AppDirectoryPath(),'Logs' ))
				if (_params.show_alert) alert('strTempUrl='+strTempUrl)
				_files_array=ReadDirectory(strTempUrl)
			}
			//			_files_array=ArraySelect(_files_array,'UrlPathSuffix(This)==\'.log\'&amp;&amp;!IsDirectory(This)');
			_files_array=ArraySelect(_files_array,'UrlPathSuffix(This)==\'.log\'');
			_temp_files_array=Array();
			if (_params.show_alert) alert('_files_array='+ArrayCount(_files_array));
			for (_elem in _files_array)
			{
				if ( IsDirectory( _elem ) )
					continue;
				if (_params.show_alert) alert(_elem);
				//_child = _tempDoc.files.AddChild();
				_child = new Object;
				_FileName=UrlFileName(_elem);
				_no_dot_name= _FileName.substr(0,_FileName.lastIndexOf(&quot;.&quot;));
				_new_name=false;
				_child.file_date=null
				for (_name in _names_array)
				{
					if (StrContains(_no_dot_name, _name.type, true))
					{
						_child.name=_name.name;
						_child.log_type=_name.type;
						_child.red_flag=_name.red_flag;
						_new_name=true;
						break;
					}
				}

				if (_new_name==false)
				{

					_child.log_type='sql';
					_temp=ArrayOptFind(_names_array, 'This.type == &quot;'+_child.log_type+'&quot;' );
					if (_temp!=undefined)
					{
						_child.red_flag=_temp.red_flag;
						_child.name=_temp.name;
					}
					else
					{
						_child.red_flag=false;
						_child.name= ms_tools.get_const('zhurnalzaprosov');
					}
					_child.red_flag=false;
				}

				if (_params.show_alert) alert('_child.log_type='+_child.log_type);
				if (_child.log_type=='sql')
				{
					try
					{
						_child.file_date=UrlModDate(_elem);
						//_child.file_date=ParseDate(_no_dot_name)
					}
					catch(ex)
					{
						alert(ms_tools.get_const('neudalospoluchi') + ': '+ex);
					}
				}
				else
				{

					try
					{
						/*_date= _no_dot_name.substr((_no_dot_name.indexOf(&quot;-&quot;)+1),StrLen(_no_dot_name));
						_child.file_date=ParseDate(_date+'t00:00:00');*/
						_ind=_no_dot_name.indexOf(&quot;'+_child.log_type+'&quot;)+StrLen(_child.log_type)+2;
						_date= _no_dot_name.substr(Int(_ind));
						//alert('date='+_date);
						_child.file_date=ParseDate(_date+'t00:00:00');
					}
					catch(ex)
					{
						try
						{
							_child.file_date=ParseDate(UrlModDate(_elem));
							//_child.file_date=ParseDate(_no_dot_name)
						}
						catch(ex)
						{
							alert(ms_tools.get_const('neudalospoluchi') + ': '+ex);
						}
					}
				}
				if (_params.show_alert) alert('_child.file_date='+_child.file_date);

				_child.file_name=_FileName;
				_child.file_url=_elem;
				_child.file_size=UrlFileSize(_elem);
				if (_params.show_alert) alert('ch '+_child.name+' '+_child.red_flag);
				_temp_files_array[ArrayCount(_temp_files_array)]=_child;
			}

			if (_params.type_id!='all')
			{
				 _temp_files_array=ArraySelect(_temp_files_array,'This.log_type == &quot;'+_params.type_id+'&quot;' );

			}
			if (_params.start_date!=null)
			{
				_temp_files_array=ArraySelect(_temp_files_array,'DateNewTime(Date(This.file_date),00,00,00) >= DateNewTime(Date(&quot;'+_params.start_date+'&quot;),00,00,00)' );
			}
			if (_params.end_date!=null)
			{
				_temp_files_array=ArraySelect(_temp_files_array,'DateNewTime(Date(This.file_date),00,00,00) <= DateNewTime(Date(&quot;'+_params.end_date+'&quot;),23,59,59)' );

			}

			for (_temp_elem in _temp_files_array)
			{
				if (_params.show_alert) alert(_temp_elem.name+' '+_temp_elem.red_flag+ ' '+_temp_elem.file_date);

				_child = dataForm.rs.AddChild();

				for( i=0; i&lt;10; i++ )
					_child.cs.AddChild();

				_child.cs.Child( 0 ).t=_temp_elem.name;
				_child.cs.Child( 1 ).t= StrDate(_temp_elem.file_date, false, false );
				_child.cs.Child( 1 ).s = _temp_elem.file_date
				try
				{
					_child.cs.Child( 1 ).r = DateToRawSeconds(_temp_elem.file_date)
				}
				catch(ex)
				{
					_child.cs.Child( 1 ).r = 0
				}
				_child.cs.Child( 2 ).t=_temp_elem.file_name;
				_child.cs.Child( 3 ).t=_temp_elem.file_size;
				_child.cs.Child( 3 ).r=_temp_elem.file_size;
				_child.cs.Child( 4 ).t=_temp_elem.log_type;
				_child.cs.Child( 5 ).t=_temp_elem.red_flag;
				_child.cs.Child( 6 ).t=_temp_elem.file_url;
			}

			//alert(dataForm.Xml)
			return dataForm.GetXml( { 'tabs': false } );
	"/>


	<education_method_report PROPERTY="1" PARAM="_param_str" ALLOW-CALL-FROM-CLIENT="1" EXPR="

			if ( ! LdsIsServer )
				return CallServerMethod( 'tools_report', 'education_method_report', [ RValue( _param_str ),  ] );

			var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.education_method_report
			dataForm = OpenNewDoc( 'x-local://wtv/wtv_view_education_method_report.xml' ).TopElem.data;

			function add_person(PERSON_ID,SELECTOR,WHERE_STR,WHERE_REQ_STR,START_DATE,FINISH_DATE)
			{

				curPerson=ArrayOptFirstElem(XQuery('for $elem in collaborators where $elem/id='+PERSON_ID+' and $elem/is_dismiss=false() return $elem'))
				if (curPerson!=undefined)
				{
					_child = dataForm.persons.AddChild();
					_child.person_id = PERSON_ID
					_child.person_fullname=curPerson.fullname
					_child.person_position_name=curPerson.position_name
					_child.person_subdivision_name=curPerson.position_parent_name

					arrPositions=Array();
					if (curPerson.position_id.HasValue)
					{
						try
						{
							arrPositions=XQuery('for $elem in positions where $elem/id='+curPerson.position_id+' return $elem')
						}
						catch(ex)
						{

						}
					}
					arrEducationMethods=Array()
					for (iPositionElem in arrPositions)
					{
						if (iPositionElem.position_common_id.HasValue)
						{
							try
							{
								tePositionCommon = OpenDoc( UrlFromDocID( iPositionElem.position_common_id ) ).TopElem;
								arrEducationMethods=ArrayUnion(arrEducationMethods,tePositionCommon.education_methods)
							}
							catch(ex)
							{
							}
						}
					}
					arrEducationMethods=ArraySelectDistinct(arrEducationMethods,'education_method_id')
					if (SELECTOR=='common_position')
					{
						arrEducationMethodIds=ArrayExtract( arrEducationMethods, 'education_method_id' );
					}
					else if (SELECTOR=='selected')
					{
						arrEducationMethodIds=ArrayExtract( _params.education_methods, 'education_method_id' );
					}

					if (SELECTOR=='all')
					{
						arrGlobalEducationMethods=XQuery('for $elem in education_methods return $elem')
					}
					else
					{
						arrGlobalEducationMethods=QueryCatalogByKeys( 'education_methods', 'id', arrEducationMethodIds );
					}

					for (iGlobalEducationMethodElem in arrGlobalEducationMethods)
					{
						person_child = _child.education_methods.AddChild();
						person_child.education_method_id=iGlobalEducationMethodElem.id;
						person_child.education_method_name=iGlobalEducationMethodElem.name;
						person_child.type=iGlobalEducationMethodElem.type;

						curEducationMethod=ArrayOptFind(arrEducationMethods,'education_method_id=='+iGlobalEducationMethodElem.id)
						if (curEducationMethod!=undefined)
						{
							person_child.common_position_method=true;
							person_child.period=curEducationMethod.period
						}


						arrEducationPlanCollaborators = XQuery( 'for $elem in education_plan_collaborators where $elem/education_method_id = ' + iGlobalEducationMethodElem.id+ ' and $elem/person_id ='+_child.person_id+''+WHERE_STR+ ' return $elem' );
						curEducationPlanCollaborator=ArrayOptFirstElem(arrEducationPlanCollaborators)
						if (curEducationPlanCollaborator!=undefined)
						{
								person_child.education_plan_id=curEducationPlanCollaborator.education_plan_id;
								try
								{
									person_child.education_plan_name=curEducationPlanCollaborator.education_plan_id.ForeignElem.name;
								}
								catch(ex)
								{
									person_child.education_plan_name='';
								}
						}


						_where_date_str=''
						_where_date_str = START_DATE!=null ? ' and $elem/create_date &gt;= date( \'' + START_DATE + '\' )' : '';
						_where_date_str += FINISH_DATE!=null ? ' and $elem/create_date &lt;= date( \'' + FINISH_DATE + '\' )' : '';

						QueryString='for $elem in requests where $elem/type=\'education_method\' and $elem/object_id='+iGlobalEducationMethodElem.id+' and $elem/is_group=true() '+WHERE_STR+''+WHERE_REQ_STR+''+_where_date_str+' order by $elem/create_date descending return $elem'
						arrReqs=XQuery(QueryString);
			//alert(QueryString)
						arrGroupRequests=Array();
						for (iReqElem in arrReqs)
						{
							arrGroupRequests=ArrayUnion(arrGroupRequests,XQuery( 'for $elem in request_collaborators where $elem/request_id='+iReqElem.id+' and $elem/person_id = ' + PERSON_ID+' return $elem'));
						}
						QueryString='for $elem in requests where $elem/type=\'education_method\' and $elem/object_id='+iGlobalEducationMethodElem.id+' and $elem/is_group=false() '+WHERE_STR+''+WHERE_REQ_STR+''+_where_date_str+' and $elem/person_id ='+_child.person_id+' order by $elem/create_date descending return $elem'
						arrReqs=XQuery(QueryString);

						LastActiveRequest=ArrayOptFind(arrReqs,'status_id==\'active\'')
						LastActiveGroupRequest=ArrayOptFind(arrGroupRequests,'status_id==\'active\'')

						active_date_req=DateNewTime(Date( 1990, 1, 1 ),00,00,00)
						active_date_group_req=DateNewTime(Date( 1990, 1, 1 ),00,00,00)
						if (LastActiveRequest!=undefined)
						{
							active_date_req=LastActiveRequest.create_date
						}
						if (LastActiveGroupRequest!=undefined)
						{
							active_date_group_req=LastActiveGroupRequest.create_date
						}

						try
						{
							if(active_date_req>active_date_group_req)
							{
								person_child.active_request_id=LastActiveRequest.id;
								person_child.active_request_name=ms_tools.get_const('c_request')+' '+LastActiveRequest.code+' '+LastActiveRequest.create_date
							}
							else
							{
								person_child.active_request_id=LastActiveGroupRequest.request_id;
								person_child.active_request_name=ms_tools.get_const('c_request')+' '+LastActiveGroupRequest.code+' '+LastActiveGroupRequest.create_date
							}
						}
						catch(ex)
						{
							//alert(ex)
						}

						LastCloseRequest=ArrayOptFind(arrReqs,'status_id==\'close\'')
						LastCloseGroupRequest=ArrayOptFind(arrGroupRequests,'status_id==\'close\'')

						close_date_req=DateNewTime(Date( 1990, 1, 1 ),00,00,00)
						close_date_group_req=DateNewTime(Date( 1990, 1, 1 ),00,00,00)
						if (LastCloseRequest!=undefined)
						{
							close_date_req=LastCloseRequest.create_date
						}
						if (LastCloseGroupRequest!=undefined)
						{
							close_date_group_req=LastCloseGroupRequest.create_date
						}

						try
						{
							if(close_date_req>close_date_group_req)
							{
								person_child.close_request_id=LastCloseRequest.id;
								person_child.close_request_name=ms_tools.get_const('c_request')+' '+LastCloseRequest.code+' '+LastCloseRequest.create_date
							}
							else
							{
								person_child.close_request_id=LastCloseGroupRequest.request_id;
								person_child.close_request_name=ms_tools.get_const('c_request')+' '+LastCloseGroupRequest.code+' '+LastCloseGroupRequest.create_date
							}
						}
						catch(ex)
						{
							//alert(ex)
						}

						_where_date_str=''
						_where_date_str = START_DATE!=null ? ' and $elem/start_usage_date &gt;= date( \'' + START_DATE + '\' )' : '';
						_where_date_str += FINISH_DATE!=null ? ' and $elem/start_usage_date &lt;= date( \'' + FINISH_DATE + '\' )' : '';
						if ( iGlobalEducationMethodElem.type == 'course' )
						{
							if ( iGlobalEducationMethodElem.course_id.HasValue )
							{
								learningArray = XQuery('for $elem in learnings where $elem/course_id='+iGlobalEducationMethodElem.course_id+' and $elem/person_id='+_child.person_id+''+_where_date_str+' order by $elem/start_usage_date descending return $elem');
								curLearning=ArrayOptFirstElem(learningArray)
								if ( curLearning!=undefined )
								{
									person_child.last_learning_date=curLearning.start_usage_date
									person_child.last_learning_id=iGlobalEducationMethodElem.course_id
								}

								futurLearningArray = XQuery('for $elem in active_learnings where $elem/course_id='+iGlobalEducationMethodElem.course_id+' and $elem/person_id='+_child.person_id+' and $elem/start_usage_date&gt;=date( \'' + DateNewTime(Date(),00,00,00) + '\' ) order by $elem/start_usage_date descending return $elem');
								curLearning=ArrayOptFirstElem(futurLearningArray)
								if ( curLearning!=undefined )
								{
									person_child.future_learning_date=curLearning.start_usage_date
									person_child.future_learning_id=iGlobalEducationMethodElem.course_id
								}
							}
						}
						else
						{

							_where_date_str=''
							_where_date_str = START_DATE!=null ? ' and $elem/start_date &gt;= date( \'' + START_DATE + '\' )' : '';
							_where_date_str += FINISH_DATE!=null ? ' and $elem/start_date &lt;= date( \'' + FINISH_DATE + '\' )' : '';
							//and $elem/status_id=\'close\'
							arrEvents = XQuery('for $elem in events where $elem/education_method_id='+iGlobalEducationMethodElem.id+' and $elem/status_id=\'close\' '+_where_date_str+' order by $elem/start_date descending return $elem');
							for (iEventElem in arrEvents)
							{
								arrEventResults = XQuery('for $elem in event_results where $elem/event_id='+iEventElem.id+' and $elem/person_id='+_child.person_id+'  and  $elem/is_assist=true() return $elem');
								if (ArrayOptFirstElem(arrEventResults)!=undefined)
								{
									person_child.last_learning_date=iEventElem.start_date
									person_child.last_learning_id=iEventElem.id
									break;
								}
							}

							arrEvents = XQuery('for $elem in events where $elem/education_method_id='+iGlobalEducationMethodElem.id+' and $elem/status_id!=\'close\' and $elem/status_id!=\'cancel\' and $elem/start_date &gt;= date( \'' +  DateNewTime(Date(),00,00,00) + '\' ) order by $elem/start_date descending return $elem');
							for (iEventElem in arrEvents)
							{
								arrEventResults = XQuery('for $elem in event_results where $elem/event_id='+iEventElem.id+' and $elem/person_id='+_child.person_id+'  return $elem');
								if (ArrayOptFirstElem(arrEventResults)!=undefined)
								{
									person_child.future_learning_date=iEventElem.start_date
									person_child.future_learning_id=iEventElem.id
									break;
								}
							}
						}

						if (person_child.last_learning_date.HasValue&&person_child.period>0)
						{
							try
							{
								_date= DateNewTime(person_child.last_learning_date,00,00,00);
								_date=RawSecondsToDate(( DateToRawSeconds( _date)+(person_child.period)*2592000) );
								person_child.finish_date=DateNewTime(_date,00,00,00);
							}
							catch(ex)
							{
							}
						}

					}
				}

			}

			where_str = '';
			if (_params.budget_period_id.HasValue)
			{
				where_str=' and $elem/budget_period_id='+_params.budget_period_id
			}


			where_req_str='';
			if (_params.request_type_id.HasValue)
			{
				where_req_str=' and $elem/request_type_id='+_params.request_type_id
			}


			start_date=_params.start_date.HasValue ?_params.start_date:null;
			finish_date=_params.finish_date.HasValue ?_params.finish_date:null;


			if ( _params.person_id.HasValue )
			{
				add_person( _params.person_id,_params.education_method_selector,where_str,where_req_str,start_date,finish_date);
			}
			else if ( _params.org_id.HasValue || _params.parent_object_id.HasValue || _params.group_id.HasValue )
			{
				_person_ids_array=Array()
				if ( _params.org_id.HasValue || _params.parent_object_id.HasValue )
				{
					curNodeID = _params.parent_object_id.HasValue ? _params.parent_object_id : _params.org_id;

					if ( _params.hier_sub_select )
						_person_ids_array = tools.get_sub_person_ids_by_subdivision_id( curNodeID );
					else
						_person_ids_array = ArrayExtract( XQuery( 'for $elem in subs where $elem/parent_id = ' + curNodeID + ' and $elem/type = &quot;position&quot; and $elem/basic_collaborator_id != null() return $elem' ), 'basic_collaborator_id' );
				}

				if ( _params.group_id.HasValue )
				{
					try
					{
						groupDoc = OpenDoc( UrlFromDocID( _params.group_id ) ).TopElem;

						groupPersonsIDArray = ArrayExtract( groupDoc.collaborators, 'collaborator_id' );

						if ( ArrayOptFirstElem( _person_ids_array ) != undefined )
							_person_ids_array = arrayCross( _person_ids_array, groupPersonsIDArray );
						else
							_person_ids_array = groupPersonsIDArray;
					}
					catch( err )
					{
					}
				}

				_person_ids_array = ArraySelectDistinct( _person_ids_array );

				for ( _person_id in _person_ids_array )
					add_person( _person_id,_params.education_method_selector,where_str,where_req_str,start_date,finish_date);
			}
			else
			{
				_person_ids_array=XQuery('for $elem in collaborators return $elem')
				for ( _person_id in _person_ids_array )
					add_person( _person_id.id,_params.education_method_selector,where_str,where_req_str,start_date,finish_date);
			}
			dataForm.persons.Sort('person_fullname','+')
			return dataForm.GetXml( { 'tabs': false } );
	"/>

	<event_by_depart_report PROPERTY="1" PARAM="_param_str" PARAM="curUser" ALLOW-CALL-FROM-CLIENT="1" EXPR="

			if ( ! LdsIsServer )
				return CallServerMethod( 'tools_report', 'event_by_depart_report', [ RValue( _param_str ), curUser ] );

			var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.view_event_by_depart_report
			dataForm = OpenNewDoc( 'x-local://wtv/wtv_view_event_by_depart_report.xml' ).TopElem.data;

			try
			{
				_learnings=dataForm.learnings;
				function add_learnings( _learning_array, _str )
				{
					for ( _learning in _learning_array )
						try
						{
							//alert('_learning.event_id='+_learning.event_id+' '+_learning.person_fullname);
							//_cur_event = _learning.event_id.ForeignElem;
							try
							{
								_cur_event = _learning.event_id.ForeignElem;
							}
							catch(ec)
							{
								_cur_event= ArrayOptFirstElem(XQuery('for $obj in events where $obj/id='+_learning.event_id+' return $obj'));
							}

							docEvent = tools.open_doc( _cur_event.id );
							if ( docEvent != undefined )
							{
								if ( ! tools.check_cur_user_admin_access( docEvent.TopElem ) )
								{
									continue;
								}
							}

							if ( _str != '' && tools.safe_execution( '!( ' + _str + ' )' ) )
								continue;

							_child = _learnings.AddChild();
							_child.AssignElem( _learning );
							_child.AssignElem( _cur_event );

							_child.id =_learning.id

							try
							{
								_child.person_code= _learning.person_id.ForeignElem.code
							}
							catch(ex)
							{
								//alert(ex)
							}




							try
							{
								_child.place_name = OpenDoc( UrlFromDocID( _child.place_id ) ).TopElem.name;
							}
							catch(err)
							{
							}

							if (_params.disp_person_list_staff)
								_child.person_list_staff = tools.person_list_staff_by_person_id(_child.person_id);

							if ( _learning.event_id != null )
								_child.event_name = _cur_event.name;

							if ( _cur_event.education_method_id != null )
								_child.education_method_name = _cur_event.education_method_id.ForeignElem.name;

							if ( _cur_event.education_org_id != null )
								_child.education_org_name = _cur_event.education_org_id.ForeignElem.disp_name;
						}
						catch ( ujm )
						{
							//alert(ujm)
						}
				}

				if ( _params.lector_id.HasValue)
				{
					lectors_events = XQuery('for $elem in event_lectors where $elem/lector_id=' + _params.lector_id + ' return $elem' );
					eventID = ArrayExtract( ArraySelectDistinct( lectors_events, 'event_id'), 'event_id');
					_learning_array = QueryCatalogByKeys( 'event_results', 'event_id', eventID );
				}
				else
				{
					_learning_array = XQuery('event_results');
				}

				if ( _params.event_id.HasValue )
					_learning_array = ArraySelect(_learning_array, 'event_id =='+ _params.event_id );

				if ( _params.person_id.HasValue )
					_learning_array = ArraySelect(_learning_array, 'person_id =='+ _params.person_id );

				//return ArrayCount(_learning_array);


				_where_str2 = ( _params.education_method_id == null ? '' : ' _cur_event.education_method_id == ' + _params.education_method_id );
				_where_str2 = _where_str2 + ( _params.education_org_id == null ? '' : ( _where_str2 == '' ? ' ' : ' &amp;&amp; ' ) + ' _cur_event.education_org_id == ' + _params.education_org_id );

				if (!_params.disp_aggregated_list)
				{
					_where_str2 = _where_str2 + ( _params.disp_type_id == 'all' ? '' : ( _where_str2 == '' ? ' ' : ' &amp;&amp; ' ) + ' _cur_event.type_id == &quot;' + _params.disp_type_id +'&quot;' );
				}
				_where_str2 = _where_str2 + ( _params.start_date == null ? '' : ( _where_str2 == '' ? ' ' : ' &amp;&amp; ' ) + ' _cur_event.start_date &gt;= Date(&quot;'+_params.start_date+'&quot;)' );
				_where_str2 = _where_str2 + ( _params.finish_date == null ? '' : ( _where_str2 == '' ? ' ' : ' &amp;&amp; ' ) + ' _cur_event.start_date &lt;=Date(&quot;'+_params.finish_date+'&quot;)' );
				_where_str2 = Trim( _where_str2 );

				if (!_params.disp_aggregated_list)
				{
					if ( _params.org_id != null||_params.parent_object_id!= null)
					{
						_position_array = XQuery( 'for $position in positions where $position/parent_object_id = ' + (_params.parent_object_id == null ? 'null()' : _params.parent_object_id) +' and $position/org_id = '+ ( _params.org_id == null ? 'null()' : _params.org_id) + ' return $position' );

						curNodeID = (( _params.parent_object_id != null ? _params.parent_object_id : _params.org_id )==null?'0':( _params.parent_object_id != null ? _params.parent_object_id : _params.org_id ))
						if ( _params.hier_sub_select )
						{
							subPersonsIDArray = ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( curNodeID )) ;
						}
						else
						{
							subsArray = XQuery('for $elem in subs where $elem/parent_id='+ curNodeID +' and $elem/type=&quot;position&quot; return $elem');
							subPersonsIDArray = Array();
							count=0;
							for ( _sub in subsArray )
							{
								if ( _sub.basic_collaborator_id.HasValue)
								{
									subPersonsIDArray[count] = _sub.basic_collaborator_id;
									count++;
								}
							}
							subPersonsIDArray = ArraySelectDistinct(subPersonsIDArray);
						}
						if ( _params.group_id.HasValue )
						{
							try
							{
								groupDoc = OpenDoc( UrlFromDocID( _params.group_id ) ).TopElem;
								for ( _person in groupDoc.collaborators )
								{
									for ( i=0; i<ArrayCount(subPersonsIDArray); i++ )
									{
										if ( _person.collaborator_id == subPersonsIDArray[i] )
										{
											_learning_array_person = ArraySelect(_learning_array, 'person_id ==' + subPersonsIDArray[i] );
											add_learnings( _learning_array_person, _where_str2 );
										}
									}
								}
							}
							catch(err)
							{
							}
						}
						else
						{
							for ( i=0; i<ArrayCount(subPersonsIDArray); i++ )
							{
								_learning_array_person = ArraySelect(_learning_array, 'person_id ==' + subPersonsIDArray[i] );
								add_learnings( _learning_array_person,_where_str2 );
							}
						}

					}
					else
					{
						if ( _params.group_id.HasValue )
						{
							try
							{
								groupDoc = OpenDoc( UrlFromDocID( _params.group_id ) ).TopElem;
								for ( _person in groupDoc.collaborators )
								{
									_learning_array_person = ArraySelect(_learning_array, 'person_id ==' + _person.collaborator_id );
									add_learnings( _learning_array_person, _where_str2  );
								}
							}
							catch(err)
							{
							}
						}
						else
						{
							add_learnings( _learning_array, _where_str2  );
						}
					}

					for( _learning in _learnings )
					{
						count = 0;
						score_percent = 0;
						test_learningArray = XQuery('for $elem in test_learnings where $elem/event_id = ' + _learning.event_id + ' and $elem/person_id = ' + _learning.person_id + ' return $elem');
						for ( _test_learning in test_learningArray )
						{
							try
							{
								score_percent = score_percent + ( 100*_test_learning.score )/_test_learning.max_score;
								count++;
							}
							catch(err)
							{}
						}
						if ( count != 0 )
							_learning.test_score_percent = Real(score_percent)/Real(count);
					}

					_learnings.Sort( _params.sort_type_id, '+' );
					//return dataForm.Xml;
				}
				else//if (_params.disp_aggregated_list!=false)
				{
					_aggregated_array=Array();
					_person_array = Array();

					//alert(_where_str2);

					if ( _where_str2 !='' )
					{
						_final_learning_array=Array();
						for ( _learning in _learning_array )
						{
							try
							{
								try
								{
									_cur_event = _learning.event_id.ForeignElem;
								}
								catch(ec)
								{
									_cur_event= ArrayOptFirstElem(XQuery('for $obj in events where $obj/id='+_learning.event_id+' return $obj'));
								}

								if ( _where_str2!= '' &amp;&amp; tools.safe_execution( '!( ' + _where_str2 + ' )' ) )
									continue;
								_final_learning_array[ArrayCount(_final_learning_array)]=_learning;
							}
							catch(kk)
							{
								alert(kk)
							}
						}
							//_learning_array = ArraySelect(_learning_array, _where_str2);
					}
					else
					{
						_final_learning_array=_learning_array;
					}
					if ( _params.org_id.HasValue || _params.parent_object_id.HasValue )
					{
						curNodeID = (( _params.parent_object_id != null ? _params.parent_object_id : _params.org_id )==null?'0':( _params.parent_object_id != null ? _params.parent_object_id : _params.org_id ))
						//_ids_array = ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( curNodeID )) ;

						if ( _params.hier_sub_select )
						{
							_ids_array = ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( curNodeID )) ;
						}
						else
						{
							subsArray = XQuery('for $elem in subs where $elem/parent_id='+ curNodeID +' and $elem/type=&quot;position&quot; return $elem');
							_ids_array = Array();
							count=0;
							for ( _sub in subsArray )
							{
								if ( _sub.basic_collaborator_id.HasValue)
								{
									_ids_array[count] = _sub.basic_collaborator_id;
									count++;
								}
							}
							_ids_array = ArraySelectDistinct(_ids_array);
						}
						_person_array = QueryCatalogByKeys( 'collaborators', 'id', _ids_array );
					}


					if ( _params.group_id.HasValue)
					{
						try
						{
							groupDoc = OpenDoc( UrlFromDocID( _params.group_id ) ).TopElem;
						}
						catch(_gigi_)
						{
							groupDoc = undefined;
						}
						if (groupDoc != undefined)
							groupPersonsIDArray = ArrayExtract( groupDoc.collaborators, 'collaborator_id' );

						if ( ArrayOptFirstElem( _person_array ) !=undefined )
						{
							_person_array = QueryCatalogByKeys( 'collaborators', 'id', arrayCross( ArrayExtract(_person_array,'id'), groupPersonsIDArray));
						}
						else
						{
							_person_array = QueryCatalogByKeys( 'collaborators', 'id', groupPersonsIDArray );
						}

					}

					if ( _params.person_id.HasValue)
					{
						if ( ArrayCount( _person_array )>0 )
						{
							_person_array = ArraySelect( _person_array, 'id == '+_params.person_id);
						}
						else if (!( _params.org_id.HasValue || _params.parent_object_id.HasValue || _params.group_id.HasValue ))
						{
							_person_array = XQuery( 'for $elem in collaborators where $elem/id = ' + _params.person_id + ' return $elem' );
						}
					}

					if  ( !_params.org_id.HasValue && !_params.parent_object_id.HasValue && !_params.group_id.HasValue && !_params.person_id.HasValue)
					{
						if ( ArrayCount( _person_array ) == 0 )
						{
							 _person_array=collaborators;
						}
					}

					if (_params.disp_all_org_list)
					{
						_person_array=collaborators;
					}

					for ( _person in _person_array )
					{
						if ( _person.id!= undefined )
						{

								_events_array =ArraySelect(_final_learning_array, 'This.person_id =='+_person.id);

								if (!_params.disp_all_org_list)
								{
									if  (!_params.person_id.HasValue)
									{
										position_parent_id=_person.position_parent_id
										position_parent_name=_person.position_parent_name;
										if  ( _params.show_people )
										{
											if  ( _params.parent_object_id.HasValue )
											{
												if (Int(_params.parent_object_id)==_person.position_parent_id)
												{
													position_parent_id=_person.id;
													position_parent_name=_person.fullname;
												}
											}
											else
											{
												if  ( _params.org_id.HasValue )
												{
													if (Int(_params.org_id)==_person.org_id)
													{
														if ( !_person.position_parent_id.HasValue==true )
														{
															position_parent_id=_person.id;
															position_parent_name=_person.fullname;
														}
													}
												}
											}
										}
									}
									else
									{
										position_parent_id=_person.id;
										position_parent_name=_person.fullname;
									}
								}
								else
								{
									position_parent_id=_person.org_id;
									position_parent_name=_person.org_name;
								}
								if (Trim(position_parent_id) == '')
								{
									position_parent_id=0;
									position_parent_name=ms_tools.get_const('neopredeleno');
								}
								cur_elem=ArrayOptFind( _aggregated_array, 'This.obj_id =='+position_parent_id )
								if ( cur_elem== undefined )
								{
									NewElem = new Object;
									NewElem.obj_id=Int(position_parent_id);
									NewElem.name=position_parent_name;
									NewElem.applied=0;
									NewElem.present=0;
									NewElem.average_cost=0;
									NewElem.average_duration=0;
									NewElem.events=Array();
									if (_params.disp_person_list_staff)
									{
										if (!_params.disp_all_org_list)
										{
											NewElem.obj_sub_path = tools.person_list_staff_by_person_id(_person.id,_person,'','','/');

											if ( NewElem.obj_sub_path=='')
											{
												if ( _person.org_id.HasValue&&_person.org_name.HasValue)
												{
													NewElem.obj_sub_path=_person.org_name;
												}
											}
										}
										else
										{
											NewElem.obj_sub_path=_person.org_name;
										}
									}
									else
									{
										NewElem.obj_sub_path ='';
									}
									_col=ArrayCount(_aggregated_array);
									_aggregated_array[_col]=NewElem;
									cur_elem=_aggregated_array[(_col)];
								}
								_average_duration=0;
								_average_cost=0;

								for (_event in _events_array)
								{
									if (_event.is_assist)
									{
										cur_elem.present++;
									}
									cur_elem.applied++;
									if (_params.disp_average_duration)
									{
										cur_event=ArrayOptFind( cur_elem.events, 'This =='+_event.event_id )
										if ( cur_event== undefined )
										{
											cur_elem.events[ArrayCount(cur_elem.events)]=_event.event_id;

											try
											{

												eventDoc = OpenDoc( UrlFromDocID( _event.event_id ) ).TopElem;
												_duration=0;
												try
												{
													_duration=Real(eventDoc.duration_fact);
												}
												catch(ex1)
												{
													try
													{
														_duration=Real(eventDoc.duration_plan);
													}
													catch(ex2)
													{

													}
												}
												_average_duration=_average_duration+_duration;
											}
											catch(ex3)
											{
											}

										}
									}
									if (_params.disp_average_cost)
									{
										try
										{

											eventResultDoc = OpenDoc( UrlFromDocID( _event.id ) ).TopElem;
											_cost=0;
											try
											{
												for (_item in eventResultDoc.expense_items)
												{
													_cost=_cost+Real(_item.sum);
												}
											}
											catch(ex1)
											{
											}
											_average_cost=_average_cost+_cost;
										}
										catch(ex3)
										{
										}
									}
								}
								cur_elem.average_cost=cur_elem.average_cost+_average_cost;
								cur_elem.average_duration=cur_elem.average_duration+_average_duration;
							}
					}

					is_total_elem=false;
					_total_average_count=0;
					_total_average_score=0;
					for ( _elem in _aggregated_array )
					{
							_child = dataForm.learnings_aggregated.AddChild();
							_child.obj_id=_elem.obj_id;
							_child.name=_elem.name;
							_child.applied=_elem.applied;
							_child.present=_elem.present;
							if (_elem.applied!=0)
							{
								_child.average_cost=(_elem.average_cost/_elem.applied);
								_child.average_duration=(_elem.average_duration/_elem.applied);
							}
							else
							{
								_child.average_cost=0;
								_child.average_duration=0;
							}
							_child.obj_sub_path=_elem.obj_sub_path;
							if (is_total_elem==false)
							{
								_total_child = dataForm.learnings_aggregated_total.AddChild();
								_total_child.obj_id=0;
								_total_child.name=ms_tools.get_const('vagb_summary');
								_total_child.applied=0;
								_total_child.present=0;
								_total_child.obj_sub_path='';
								_total_child.average_cost=0;
								_total_child.average_duration=0;
								is_total_elem=true;
							}
							_total_child.applied=_total_child.applied+_elem.applied;
							_total_child.present=_total_child.present+_elem.present;
							_total_child.average_cost=_total_child.average_cost+_elem.average_cost;
							_total_child.average_duration=_total_child.average_duration+_elem.average_duration;
							_total_average_count=_total_average_count+_elem.applied;
					}

					for ( _child in dataForm.learnings_aggregated_total )
					{
							if ( _total_average_count!= 0 )
							{
								_child.average_cost = ( _child.average_cost /_total_average_count);
								_child.average_duration = ( _child.average_duration /_total_average_count);
							}
							else
							{
								_child.average_cost =0;
								_child.average_duration=0;
							}
					}
					dataForm.learnings_aggregated.Sort( _params.sort_type_aggregated_id, '+' );
					//return dataForm.Xml;

				}
			}
			catch(ex)
			{
				alert(ex);
			}

			return dataForm.GetXml( { 'tabs': false } );
	"/>


	<budget_transfers_report PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" EXPR="
	
		oResult = new Object();
		oResult.error = 0;
		oResult.transfers = [];

		sQuery = 'for $elem in budgets return $elem';
		xarrBudgets = tools.xquery( sQuery )

		for ( oBudget in xarrBudgets )
		{
			_oBudget = tools.open_doc(oBudget.id);
			oBudgetTE = _oBudget.TopElem;

			for ( oTransfer in oBudgetTE.transfers )
			{
				_child = {};

				_child.budget_id = oTransfer.budget_id.Value;

				// сумма
				_child.sum = oTransfer.sum.Value;
				
				// валюта
				_child.currency_name = '';
				oCurrency = lists.currency_types.GetOptChildByKey( oBudget.currency );
				if( oCurrency != undefined )
				{
					sCurrencyName = oCurrency.name.Value;
					_child.currency_name = sCurrencyName;
				}

				// источник
				_child.source_cost_center_name = oBudgetTE.cost_center_id.HasValue ? oBudgetTE.cost_center_id.ForeignElem.name.Value : '';
				_child.source_expense_item_name = oBudgetTE.expense_item_id.HasValue ? oBudgetTE.expense_item_id.ForeignElem.name.Value : '';
				_child.source_education_method_name = ArrayMerge( oBudgetTE.catalogs.ObtainChildByKey( 'education_method' ).objects, 'PrimaryKey.ForeignElem.name.Value', ', ' );

				oBudgetTarget = tools.open_doc( oTransfer.budget_id );
				oBudgetTargetTE = oBudgetTarget.TopElem;

				// получатель
				_child.recipient_cost_center_name = oBudgetTargetTE.cost_center_id.HasValue ? oBudgetTargetTE.cost_center_id.ForeignElem.name.Value : '';
				_child.recipient_expense_item_name = oBudgetTargetTE.expense_item_id.HasValue ? oBudgetTargetTE.expense_item_id.ForeignElem.name.Value : '';
				_child.recipient_education_method_name = ArrayMerge( oBudgetTargetTE.catalogs.ObtainChildByKey( 'education_method' ).objects, 'PrimaryKey.ForeignElem.name.Value', ', ' );
			
				_child.comment = oTransfer.comment.Value;
				_child.direction = oTransfer.direction ? 1 : 0;
				
				_child.date = oTransfer.date.Value;

				oResult.transfers.push(_child);

			}
		}

		return oResult;

	"/>

	<course_by_depart_report PROPERTY="1" PARAM="_param_str" ALLOW-CALL-FROM-CLIENT="1" EXPR="

		if ( ! LdsIsServer )
			return CallServerMethod( 'tools_report', 'course_by_depart_report', [ RValue( _param_str ),  ] );

		var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.view_course_by_depart_report
		dataForm = OpenNewDoc( 'x-local://wtv/wtv_view_course_by_depart_report.xml' ).TopElem.data;

		try
		{
			function get_xquery_merge( _person_id, _where_str )
			{
				_where = _person_id == '' ? '' : ' $elem/person_id = ' + _person_id;
				_where += ( _where_str != '' &amp;&amp; _where != '' ? ' and' : '' ) + _where_str;

				for ( _catalog in String( _params.disp_learning_type ).split( ',' ) )
				{
					//add_learnings( XQuery( 'for $elem in ' + _catalog + ( _where == '' ? '' : ' where' ) + _where + ' return $elem' ) );

					sQuery = 'for $elem in ' + _catalog + ( _where == '' ? '' : ' where' ) + _where + ' return $elem';
					fnAddLearnings(XQuery( sQuery ), _params, dataForm)
				}
			}

			_person_array = Array();

			bHasOrgs=(ArrayOptFirstElem(_params.orgs)!=undefined)
			bHasSubs=(ArrayOptFirstElem(_params.subdivisions)!=undefined)
			bHasPersons=(ArrayOptFirstElem(_params.persons)!=undefined)
			bHasGroup= _params.group_id.HasValue

			if ( (bHasOrgs || bHasSubs)==true)
			{
				if (bHasSubs)
				{
					arrTemp=_params.subdivisions
				}
				else
				{
					arrTemp=_params.orgs
				}

				_ids_array = Array();
				for (fldElem in arrTemp)
				{
					if ( _params.hier_sub_select==true )
					{
						_ids_array = ArrayUnion(_ids_array,ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( fldElem.PrimaryKey ))) ;
					}
					else
					{
						subsArray = XQuery('for $elem in subs where $elem/parent_id='+ fldElem.PrimaryKey +' and $elem/type=&quot;position&quot; return $elem');
						for ( _sub in subsArray )
						{
							if ( _sub.basic_collaborator_id.HasValue)
							{
								_ids_array.push( _sub.basic_collaborator_id);
							}
						}
						_ids_array = ArrayUnion(_ids_array,ArraySelectDistinct(_ids_array));
					}
				}
				_person_array = QueryCatalogByKeys( 'collaborators', 'id', ArraySelectDistinct(_ids_array));
			}
			else if	( bHasPersons)
			{
				_person_array = QueryCatalogByKeys( 'collaborators', 'id', ArrayExtract(_params.persons,'This.person_id') );
			}

			if ( bHasGroup==true)
			{

				groupPersonsIDArray = ArrayExtract( XQuery('for $elem in group_collaborators where $elem/group_id='+_params.group_id+' return $elem'),'collaborator_id' );

				if ( ArrayOptFirstElem( _person_array ) !=undefined )
				{
					_person_array = QueryCatalogByKeys( 'collaborators', 'id', arrayCross( ArrayExtract(_person_array,'id'), groupPersonsIDArray))
				}
				else
				{
					_person_array = QueryCatalogByKeys( 'collaborators', 'id', groupPersonsIDArray );
				}

			}

			_where_str ='';
			if  (_params.disp_learning_prog==true)
			{
				if (_params.education_program_id.HasValue)
				{
					_where_program_str =' where $elem/education_program_id='+_params.education_program_id;


					arrEducationProgram=XQuery('for $elem in education_program_education_methods '+_where_program_str+' return $elem')
					for (iEducationProgramElem in arrEducationProgram)
					{
						try
						{
							if (iEducationProgramElem.type=='course'&&iEducationProgramElem.education_method_id.ForeignElem.course_id.HasValue)
							{
								_where_str += ( _where_str == '' ? '' : ' or ' ) + ' $elem/course_id = ' + iEducationProgramElem.education_method_id.ForeignElem.course_id ;
							}
						}
						catch(ex)
						{
						}
					}

					if (_where_str!='')
					{
						_where_str='('+_where_str+')'
					}
				}
			}
			else
			{
				_where_str = _params.course_id.HasValue ? ' $elem/course_id = ' + _params.course_id : '';
			}

			if (_params.disp_only_exceeded)
			{
				_params.disp_learning_type='active_learnings'
				_where_str = _where_str + ( _params.exceed_date.HasValue==false ? '' : ( _where_str == '' ? ' ' : ' and ' ) + '$elem/max_end_date != null() and $elem/max_end_date &lt; date(&quot;' + _params.exceed_date + '&quot;) and $elem/state_id &lt; 2 ');
			}

			_where_str = _where_str + ( _params.start_date.HasValue==false ? '' : ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_usage_date &gt;= date( &quot;' + _params.start_date + '&quot; )' );
			_where_str = _where_str + ( _params.finish_date.HasValue==false ? '' : ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_usage_date &lt;= date( &quot;' + _params.finish_date + '&quot; )' );

			if (_params.disp_aggregated_list==false)
			{
				if  ( (bHasOrgs || bHasSubs || bHasGroup || bHasPersons)==true  )
				{
					for ( _person in _person_array )
					{
						if ( _person.id != null )
						{
							get_xquery_merge( _person.id, _where_str );
						}
					}
				}
				else
				{
					get_xquery_merge( '', _where_str );
				}

				//_learnings.Sort( _params.sort_type_id, '+' );
				//return dataForm.learnings.Xml;
			}
			else
			{

				_aggregated_array = Array();
				if  ( (!bHasOrgs&&!bHasSubs&&!bHasGroup&&!bHasPersons) )
				{
					if ( ArrayOptFirstElem( _person_array ) ==undefined )
					{
						 _person_array=collaborators;
					}
				}

				if (_params.disp_all_org_list==true)
				{
					_person_array=collaborators;
				}

				bShowSubPath=ArrayOptFind(_params.columns,'This.name==\'s2\'||This.name==\'s3\'||This.name==\'s4\'||This.name==\'s5\'||This.name==\'s6\'||This.name==\'s7\'')!=undefined

				for ( _person in _person_array )
				{
					if ( _person.id != null )
					{
						_active_learning_array = XQuery( 'for $elem in active_learnings where $elem/person_id = ' + _person.id + ( _where_str == '' ? '' : ' and ' ) + _where_str + ' return $elem' );

						if (!_params.disp_only_exceeded)
						{
							_learning_array = XQuery( 'for $elem in learnings where $elem/person_id = ' + _person.id + ( _where_str == '' ? '' : ' and ' ) + _where_str + ' return $elem' );
						}
						else
						{
							_learning_array = Array()
						}

						if (_params.disp_all_org_list==false)
						{
							if  ( !bHasPersons)
							{
								position_parent_id=_person.position_parent_id
								position_parent_name=_person.position_parent_name;
								struct_type='sub'
								if  ( _params.show_people )
								{
									if  ( bHasSubs )
									{
										if (ArrayOptFind(_params.subdivisions,'This.subdivision_id=='+_person.position_parent_id)!=undefined)
										{
											position_parent_id=_person.id;
											position_parent_name=_person.fullname;
											struct_type='coll'
										}
									}
									else
									{
										if  ( bHasOrgs )
										{
											if ( !_person.position_parent_id.HasValue )
											{
												if (ArrayOptFind(_params.orgs,'This.org_id=='+_person.org_id)!=undefined)
												{
													position_parent_id=_person.id;
													position_parent_name=_person.fullname;
													struct_type='coll'
												}
											}
										}
									}
								}
							}
							else
							{
								position_parent_id=_person.id;
								position_parent_name=_person.fullname;
								struct_type='coll'
							}
						}
						else
						{
							position_parent_id = _person.org_id;
							position_parent_name = _person.org_name;
							struct_type = 'org'
						}
						if (Trim(position_parent_id) == '')
						{
							position_parent_id = 0;
							position_parent_name = ms_tools.get_const('z0dh5azv44');
							struct_type = ''
						}
						cur_elem=ArrayOptFind( _aggregated_array, 'This.obj_id =='+position_parent_id )
						if ( cur_elem == undefined )
						{
							NewElem = new Object;
							NewElem.obj_id = Int(position_parent_id);
							NewElem.name = position_parent_name;
							NewElem.finished = 0;
							NewElem.unfinished = 0;
							NewElem.appointed=0;
							NewElem.inprocess=0;
							NewElem.completed=0;
							NewElem.failed=0;
							NewElem.browsed=0;
							NewElem.total=0;
							NewElem.average_score=0;
							NewElem.average_count=0;
							NewElem.struct_type=struct_type;
							if ( _params.disp_person_list_staff == true || bShowSubPath )
							{
								if (_params.disp_all_org_list == false)
								{
									NewElem.obj_sub_path = tools.person_list_staff_by_person_id(_person.id,_person,'','');

									if ( NewElem.obj_sub_path == '')
									{
										if ( _person.org_id.HasValue&&_person.org_name.HasValue)
										{
											NewElem.obj_sub_path = _person.org_name;
										}
									}
								}
								else
								{
									NewElem.obj_sub_path = _person.org_name;
								}
							}
							else
							{
								NewElem.obj_sub_path = '';
							}
							_col = ArrayCount(_aggregated_array);
							_aggregated_array[_col] = NewElem;
							cur_elem = _aggregated_array[(_col)];
						}
						cur_elem.finished = cur_elem.finished+ArrayCount(_learning_array);
						cur_elem.unfinished = cur_elem.unfinished+ArrayCount(_active_learning_array);
						cur_elem.total = cur_elem.finished+cur_elem.unfinished;
						_appointed = 0;
						_inprocess = 0;
						_completed = 0;
						_failed = 0; 
						_browsed = 0;
						for (_learning in _active_learning_array)
						{
							switch( _learning.state_id )
							{
								case 0:
										_appointed++;
										break;
								case 1:
										_inprocess++;
										break;
								case 2:
										_completed++;
										break;
								case 3:
										_failed++;
										break;
								case 5:
										_browsed++;
										break;
							}
						}
						_average_score=0;
						_average_count=0;
						for (_learning in _learning_array)
						{
							_average_score=_average_score+_learning.score;
							_average_count++;
						}
						cur_elem.appointed = cur_elem.appointed+_appointed;
						cur_elem.inprocess = cur_elem.inprocess+_inprocess;
						cur_elem.completed = cur_elem.completed+_completed;
						cur_elem.failed = cur_elem.failed+_failed;
						cur_elem.browsed = cur_elem.browsed+_browsed;
						cur_elem.average_score = cur_elem.average_score+_average_score;
						cur_elem.average_count = cur_elem.average_count+_average_count;

					}
				}

				dataForm.has_fixed_rows = true
				fldFixedElem = dataForm.rs.AddChild()
				fldFixedElem.f = true
				fldNewColumn = fldFixedElem.cs.AddChild();
				fldNewColumn.name = 'id';
				fldNewColumn.s = '';
				fldNewColumn.cl = '';
						
			/*********************************/
			/*********************************/
			/*******                  ********/
			/******* итоговая колонка ********/
			/*******                  ********/
			/*********************************/
			/*********************************/
				for (fldColunm in _params.columns)
				{
					fldNewColumn = fldFixedElem.cs.AddChild();
					fldNewColumn.name = fldColunm.name;

					//iIndex = OptInt(fldColunm.name.Value, null);

					if(fldColunm.name.Value == 'object_name')
					{
						fldNewColumn.t = ms_tools.get_const('vagb_summary') + ':'; /* Итого */
					}
					else if(fldColunm.name.Value == 'org_name'){
						fldNewColumn.t = '';
						fldNewColumn.r = '';
					} else {
						fldNewColumn.t = 0;
						fldNewColumn.r = 0;
					}
				}
			/*********************************/
			/*********************************/

				is_total_elem = false;
				_total_average_count = 0;
				_total_average_score = 0;

				for ( _elem in _aggregated_array )
				{
					sQuery = 'for $elem in subdivisions where MatchSome($elem/id, ' + _elem.obj_id + ') return $elem';
					oSubdivision = tools.xquery(sQuery);

					if(ArrayOptFirstElem(oSubdivision) != undefined || _elem.obj_id == 0){

						fldNewRow = dataForm.rs.AddChild()
						fldNewColumn = fldNewRow.cs.AddChild();
						fldNewColumn.name = 'id';
						fldNewColumn.s = _elem.struct_type;
						fldNewColumn.cl = _elem.obj_id;
						fldNewColumn.t = _elem.obj_id;

						if (bShowSubPath)
						{
							try
							{
								strSubsPath=_elem.obj_sub_path
								arrSubs=strSubsPath.split('->');
								iSubsPathCounter=ArrayCount(arrSubs)
							}
							catch(ex)
							{
							}
						}

						for (fldColunm in _params.columns)
						{
							fldNewColumn = fldNewRow.cs.AddChild();
							fldNewColumn.name = fldColunm.name;

							switch( fldColunm.name )
							{
								case 'object_name':
									fldNewColumn.t = _elem.name;
									break;
								case 'subdivision_name':
									fldNewColumn.t =''
									if (bShowSubPath)
									{
										try
										{
											fldNewColumn.t = arrSubs[1]
										}
										catch(ex)
										{
										}
									}
									else
									{
										fldNewColumn.t = _elem.obj_sub_path;
									}
									break;
								case 's2':
								case 's3':
								case 's4':
								case 's5':
								case 's6':
								case 's7':
									fldNewColumn.t =''
									try
									{
										iSubIndex=Int(StrReplace(fldColunm.name,'s',''))
										if (iSubsPathCounter!=iSubIndex)
											fldNewColumn.t = arrSubs[(iSubIndex)]
									}
									catch(ex)
									{
									}
									break;
								case 'org_name':
									sOrgName = '';

									if(_elem.obj_id != 0)
									{
										sQuery = 'for $elem in subdivisions where MatchSome($elem/id, ' + _elem.obj_id + ') return $elem';
										oSubdivision = tools.xquery(sQuery);

										if(ArrayOptFirstElem(oSubdivision) != undefined)
										{
											arrOrgID = ArrayExtract(oSubdivision, 'OptInt(This.org_id)');

											if(ArrayOptFirstElem(arrOrgID) != undefined)
											{
												sQuery = 'for $elem in orgs where MatchSome( $elem/id, ( ' + ArrayMerge(arrOrgID, 'This', ',') + ' ) ) return $elem';
												oOrg = tools.xquery(sQuery);

												if(ArrayOptFirstElem(oOrg) != undefined)
												{
													sOrgName = ArrayOptFirstElem(ArrayExtract(oOrg, 'This.name.Value'));
												}
											}
										}
									}
									
									fldNewColumn.t = sOrgName;
									
									break;
								case 'finished_count':
										fldNewColumn.t = _elem.finished;
										fldNewColumn.r = _elem.finished;

										fldFixedElem.cs.GetChildByKey(fldColunm.name).r+=fldNewColumn.r
										fldFixedElem.cs.GetChildByKey(fldColunm.name).t=fldFixedElem.cs.GetChildByKey(fldColunm.name).r.Value
										break;
								case 'average_score':
										if ( _elem.average_count!= 0 )
										{
											iAverageScore = ( _elem.average_score / _elem.average_count );
										}
										else
										{
											iAverageScore =0;
										}
										fldNewColumn.t = StrReal( iAverageScore, 2 );
										fldNewColumn.r = StrReal( iAverageScore, 2 );

										_total_average_count = _total_average_count + _elem.average_count;
										_total_average_score = _total_average_score + _elem.average_score;
										break;
								case 'unfinished_count':
										fldNewColumn.t = _elem.unfinished;
										fldNewColumn.r = _elem.unfinished;
										fldFixedElem.cs.GetChildByKey(fldColunm.name).r+=fldNewColumn.r
										fldFixedElem.cs.GetChildByKey(fldColunm.name).t=fldFixedElem.cs.GetChildByKey(fldColunm.name).r.Value
										break;
								case 'assigned_count':
										fldNewColumn.t = _elem.appointed;
										fldNewColumn.r = _elem.appointed;
										fldFixedElem.cs.GetChildByKey(fldColunm.name).r+=fldNewColumn.r
										fldFixedElem.cs.GetChildByKey(fldColunm.name).t=fldFixedElem.cs.GetChildByKey(fldColunm.name).r.Value
										break;
								case 'in_process':
										fldNewColumn.t = _elem.inprocess;
										fldNewColumn.r = _elem.inprocess;
										fldFixedElem.cs.GetChildByKey(fldColunm.name).r+=fldNewColumn.r
										fldFixedElem.cs.GetChildByKey(fldColunm.name).t=fldFixedElem.cs.GetChildByKey(fldColunm.name).r.Value
										break;
								case 'completed_count':
										fldNewColumn.t = _elem.completed;
										fldNewColumn.r = _elem.completed;
										fldFixedElem.cs.GetChildByKey(fldColunm.name).r+=fldNewColumn.r
										fldFixedElem.cs.GetChildByKey(fldColunm.name).t=fldFixedElem.cs.GetChildByKey(fldColunm.name).r.Value
										break;
								case 'missed_count':
										fldNewColumn.t = _elem.failed;
										fldNewColumn.r = _elem.failed;
										fldFixedElem.cs.GetChildByKey(fldColunm.name).r+=fldNewColumn.r
										fldFixedElem.cs.GetChildByKey(fldColunm.name).t=fldFixedElem.cs.GetChildByKey(fldColunm.name).r.Value
										break;
								case 'views_count':
									fldNewColumn.t = _elem.browsed;
									fldNewColumn.r = _elem.browsed;
									fldFixedElem.cs.GetChildByKey(fldColunm.name).r+=fldNewColumn.r
									fldFixedElem.cs.GetChildByKey(fldColunm.name).t=fldFixedElem.cs.GetChildByKey(fldColunm.name).r.Value
									break;
								case 'completed_incomplete_total':
									fldNewColumn.t = _elem.total;
									fldNewColumn.r = _elem.total;

									fldFixedElem.cs.GetChildByKey( fldColunm.name ).r += fldNewColumn.r;
									fldFixedElem.cs.GetChildByKey( fldColunm.name ).t = fldFixedElem.cs.GetChildByKey(fldColunm.name).r.Value;
									break;
							}
						}

					}
				}

				fldAvarageScoreColumn = fldFixedElem.cs.GetOptChildByKey('3');

				if (fldAvarageScoreColumn != undefined)
				{
					if ( _total_average_count != 0 )
					{
						fldAvarageScoreColumn.r = StrReal( _total_average_score /_total_average_count, 2 );
						fldAvarageScoreColumn.t = StrReal( fldAvarageScoreColumn.r, 2 );
					}
				}

				//dataForm.learnings_aggregated.Sort( 'completed_incomplete_total', '+' );
				//return dataForm.Xml;
			}

		}
		catch(ex)
		{
			alert(ex);
		}
		
		return dataForm.GetXml( { 'tabs': false } );
	"/>

	<test_by_depart_report PROPERTY="1" PARAM="_param_str" ALLOW-CALL-FROM-CLIENT="1" EXPR="

		if ( ! LdsIsServer )
		return CallServerMethod( 'tools_report', 'test_by_depart_report', [ RValue( _param_str ),  ] );

		var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.view_test_by_depart_report
		dataForm = OpenNewDoc( 'x-local://wtv/wtv_view_test_by_depart_report.xml' ).TopElem.data;

		try
		{
			function get_xquery_merge( _person_id, _where_str )
			{
				_where = _person_id == '' ? '' : ' $elem/person_id = ' + _person_id;
				_where += ( _where_str != '' && _where != '' ? ' and' : '' ) + _where_str;

				for ( _catalog in String( _params.disp_learning_type ).split( ',' ) )
				{
					sQuery = 'for $elem in ' + _catalog + ( _where == '' ? '' : ' where' ) + _where + ' return $elem';
					fnAddTestLearnings(XQuery( 'for $elem in ' + _catalog + ( _where == '' ? '' : ' where' ) + _where + ' return $elem' ), _params,dataForm)
				}
			}
			_person_array = Array();

			bHasOrgs = (ArrayOptFirstElem(_params.orgs) != undefined);
			bHasSubs = (ArrayOptFirstElem(_params.subdivisions) != undefined);
			bHasPersons = (ArrayOptFirstElem(_params.persons) != undefined);
			bHasGroup = _params.group_id.HasValue;

			if ( (bHasOrgs || bHasSubs) == true)
			{

				if (bHasSubs)
				{
					arrTemp = _params.subdivisions
				}
				else
				{
					arrTemp = _params.orgs
				}

				_ids_array = Array();
				for (fldElem in arrTemp)
				{
					if ( _params.hier_sub_select == true )
					{
						_ids_array = ArrayUnion(_ids_array,ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( fldElem.PrimaryKey ))) ;
					}
					else
					{
						subsArray = XQuery('for $elem in subs where $elem/parent_id='+ fldElem.PrimaryKey +' and $elem/type=&quot;position&quot; return $elem');
						for ( _sub in subsArray )
						{
							if ( _sub.basic_collaborator_id.HasValue)
							{
								_ids_array.push( _sub.basic_collaborator_id);
							}
						}
						_ids_array = ArrayUnion(_ids_array,ArraySelectDistinct(_ids_array));
					}
				}
				_person_array = QueryCatalogByKeys( 'collaborators', 'id', ArraySelectDistinct(_ids_array));
			}
			else if	( bHasPersons)
			{
				_person_array = QueryCatalogByKeys( 'collaborators', 'id', ArrayExtract(_params.persons,'This.person_id') );
			}


			if ( bHasGroup)
			{
				groupPersonsIDArray = ArrayExtract( XQuery('for $elem in group_collaborators where $elem/group_id='+_params.group_id+' return $elem'),'collaborator_id' );

				if ( ArrayOptFirstElem( _person_array ) != undefined )
				{
					_person_array = QueryCatalogByKeys( 'collaborators', 'id', arrayCross( ArrayExtract(_person_array,'id'), groupPersonsIDArray))
				}
				else
				{
					_person_array = QueryCatalogByKeys( 'collaborators', 'id', groupPersonsIDArray );
				}
			}

			_where_str = ( _params.assessment_id == null ? '' : ' $elem/assessment_id = ' + _params.assessment_id );
			_where_str = _where_str + ( _params.start_date == null ? '' : ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_usage_date &gt;= date( &quot;' + _params.start_date + '&quot; )' );
			_where_str = _where_str + ( _params.finish_date == null ? '' : ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_usage_date &lt;= date( &quot;' + _params.finish_date + '&quot; )' );
			
			if (_params.disp_only_exceeded)
			{
				_params.disp_learning_type='active_test_learnings'
				_where_str = _where_str + ( _params.exceed_date.HasValue == false ? '' : ( _where_str == '' ? ' ' : ' and ' ) + '$elem/max_end_date != null() and $elem/max_end_date &lt; date(&quot;' + _params.exceed_date + '&quot;) and $elem/state_id &lt; 2 ');
			}

			if (_params.disp_aggregated_list == false)
			{
				if  ( (bHasOrgs || bHasSubs || bHasGroup || bHasPersons) == true  )
				{
					for ( _person in _person_array )
					{
						if ( _person.id != null )
						{
							get_xquery_merge( _person.id, _where_str );
						}
					}
				}
				else
				{
					get_xquery_merge( '', _where_str );
				}
			}
			else
			{
				_aggregated_array = Array();
				if  ( (!bHasOrgs && !bHasSubs && !bHasGroup && !bHasPersons) )
				{
					if ( ArrayOptFirstElem( _person_array ) == undefined )
					{
						 _person_array=collaborators;
					}
				}

				if (_params.disp_all_org_list == true)
				{
					_person_array = collaborators;
				}

				bShowSubPath = ArrayOptFind(_params.columns,'This.name==\'s2\'||This.name==\'s3\'||This.name==\'s4\'||This.name==\'s5\'||This.name==\'s6\'||This.name==\'s7\'')!=undefined

				for ( _person in _person_array )
				{
					if ( _person.id != null )
					{
						_active_learning_array = XQuery( 'for $elem in active_test_learnings where $elem/person_id = ' + _person.id + ( _where_str == '' ? '' : ' and ' ) + _where_str + ' return $elem' );

						_learning_array = Array()

						if (!_params.disp_only_exceeded)
						{
							sQuery = 'for $elem in test_learnings where $elem/person_id = ' + _person.id + ( _where_str == '' ? '' : ' and ' ) + _where_str + ' return $elem';
							_learning_array = XQuery( sQuery );
						}

						if (_params.disp_all_org_list == false)
						{
							if  ( !bHasPersons )
							{
								position_parent_id = _person.position_parent_id
								position_parent_name = _person.position_parent_name;
								struct_type = 'sub'
								if  ( _params.show_people )
								{
									if  ( bHasSubs )
									{
										if (ArrayOptFind(_params.subdivisions,'This.subdivision_id=='+_person.position_parent_id)!=undefined)
										{
											position_parent_id = _person.id;
											position_parent_name = _person.fullname;
											struct_type = 'coll'
										}
									}
									else
									{
										if  ( bHasOrgs )
										{
											if ( !_person.position_parent_id.HasValue )
											{
												if (ArrayOptFind(_params.orgs,'This.org_id=='+_person.org_id)!=undefined)
												{
													position_parent_id = _person.id;
													position_parent_name = _person.fullname;
													struct_type = 'coll'
												}
											}
										}
									}
								}
							}
							else
							{
								position_parent_id = _person.id;
								position_parent_name = _person.fullname;
								struct_type = 'coll'
							}
						}
						else
						{
							position_parent_id = _person.org_id;
							position_parent_name = _person.org_name;
							struct_type = 'org'
						}

						if (Trim(position_parent_id) == '')
						{
							position_parent_id = 0;
							position_parent_name = ms_tools.get_const('neopredeleno');
							struct_type = ''
						}

						cur_elem = ArrayOptFind( _aggregated_array, 'This.obj_id =='+position_parent_id );

						if ( cur_elem == undefined )
						{
							NewElem = new Object;
							NewElem.obj_id = Int(position_parent_id);
							NewElem.name = position_parent_name;
							NewElem.finished = 0;
							NewElem.unfinished = 0;
							NewElem.appointed = 0;
							NewElem.inprocess = 0;
							NewElem.completed = 0;
							NewElem.failed = 0;
							NewElem.browsed=0;
							NewElem.total = 0;
							NewElem.average_score = 0;
							NewElem.average_count = 0;
							NewElem.struct_type=struct_type;

							if (_params.disp_person_list_staff == true||bShowSubPath)
							{
								if (_params.disp_all_org_list == false)
								{
									NewElem.obj_sub_path = tools.person_list_staff_by_person_id(_person.id,_person,'','');

									if ( NewElem.obj_sub_path == '')
									{
										if ( _person.org_id.HasValue && _person.org_name.HasValue)
										{
											NewElem.obj_sub_path = _person.org_name;
										}
									}
								}
								else
								{
									NewElem.obj_sub_path = _person.org_name;
								}
							}
							else
							{
								NewElem.obj_sub_path = '';
							}
							_col = ArrayCount(_aggregated_array);
							_aggregated_array[_col] = NewElem;
							cur_elem = _aggregated_array[(_col)];
						}

						cur_elem.finished = cur_elem.finished + ArrayCount(ArraySelect(_learning_array,'This.state_id == 4'));
						cur_elem.unfinished = cur_elem.unfinished + ArrayCount(_active_learning_array);
						cur_elem.total = cur_elem.finished + cur_elem.unfinished;
						
						_appointed = 0;
						_inprocess = 0;
						_completed = 0;
						_failed = 0;
						_browsed = 0;

						for (_learning in _active_learning_array)
						{
							switch( _learning.state_id )
							{
								case 0: // назначен
										_appointed++;
										break;
								case 1: // в процессе
										_inprocess++;
										break;
								case 2: // завершен
								case 4: // пройден
										_completed++;
										break;
								case 3: // не пройден
										_failed++;
										break;
								case 5: // просмотрен
										_browsed++;
										break;
							}
						}

						_average_score = 0;
						_average_count = 0;

						for (_learning in _learning_array)
						{
							switch( _learning.state_id )
							{
								case 0: // назначен
									_appointed++;
									break;
								case 1: // в процессе
									_inprocess++;
									break;
								case 2: // завершен
								case 4: // пройден
									_completed++;
									break;
								case 3: // не пройден
									_failed++;
									break;
								case 5: // просмотрен
									_browsed++;
									break;
							}
							_average_score = _average_score + _learning.score;
							_average_count++;
						}

						cur_elem.appointed = cur_elem.appointed+_appointed;
						cur_elem.inprocess = cur_elem.inprocess+_inprocess;
						cur_elem.completed = cur_elem.completed+_completed;
						cur_elem.failed = cur_elem.failed+_failed;
						cur_elem.browsed = cur_elem.browsed+_browsed;
						cur_elem.average_score = cur_elem.average_score+_average_score;
						cur_elem.average_count = cur_elem.average_count+_average_count;
					}
				}

				dataForm.has_fixed_rows = true
				fldFixedElem = dataForm.rs.AddChild()
				fldFixedElem.f = true
				fldNewColumn = fldFixedElem.cs.AddChild();
				fldNewColumn.name = 'id';
				fldNewColumn.s = '';
				fldNewColumn.cl = '';

				for (fldColunm in _params.columns)
				{
					fldNewColumn = fldFixedElem.cs.AddChild();
					fldNewColumn.name = fldColunm.name;

					iIndex = OptInt(fldColunm.name,null)
					if (iIndex == 0)
					{
						fldNewColumn.t = ms_tools.get_const('vagb_summary');
					}
					else if (iIndex >= 2)
					{
						fldNewColumn.t = 0;
						fldNewColumn.r = 0;
					}
				}
				is_total_elem = false;
				_total_average_count = 0;
				_total_average_score = 0;
				for ( _elem in _aggregated_array )
				{
					fldNewRow = dataForm.rs.AddChild()
					fldNewColumn = fldNewRow.cs.AddChild();
					fldNewColumn.name = 'id';
					fldNewColumn.s = _elem.struct_type;
					fldNewColumn.cl = _elem.obj_id;
					fldNewColumn.t = _elem.obj_id;

					if (bShowSubPath)
					{
						try
						{
							strSubsPath = _elem.obj_sub_path
							arrSubs = strSubsPath.split('->');
							iSubsPathCounter = ArrayCount(arrSubs)
						}
						catch(ex)
						{
						}
					}

					for (fldColunm in _params.columns)
					{
						fldNewColumn = fldNewRow.cs.AddChild();
						fldNewColumn.name = fldColunm.name;

						switch( fldColunm.name )
						{
							case '0':
								fldNewColumn.t = _elem.name;
								break;
							case '1':
								fldNewColumn.t = ''
								if (bShowSubPath)
								{
									try
									{
										fldNewColumn.t = arrSubs[1]
									}
									catch(ex)
									{
									}
								}
								else
								{
									fldNewColumn.t = _elem.obj_sub_path;
								}
								break;
							case 's2':
							case 's3':
							case 's4':
							case 's5':
							case 's6':
							case 's7':
								fldNewColumn.t = ''
								try
								{
									iSubIndex = Int(StrReplace(fldColunm.name,'s',''))
									if (iSubsPathCounter != iSubIndex)
										fldNewColumn.t = arrSubs[(iSubIndex)]
								}
								catch(ex)
								{
								}
								break;
							case 'o':
								fldNewColumn.t = ''
								fldNewColumn.t =  _elem.obj_sub_path;
								if (bShowSubPath)
								{
									try
									{
										fldNewColumn.t = arrSubs[0]
										if (Trim(fldNewColumn.t) == '')
										{
											throw 'no org'
										}
									}
									catch(ex)
									{
									}
								}
								break;
							case '2':
								fldNewColumn.t = _elem.finished;
								fldNewColumn.r = _elem.finished;

								fldFixedElem.cs.GetChildByKey(fldColunm.name).r += fldNewColumn.r
								fldFixedElem.cs.GetChildByKey(fldColunm.name).t = fldFixedElem.cs.GetChildByKey(fldColunm.name).r.Value
								break;
							case '3':
								if ( _elem.average_count != 0 )
								{
									iAverageScore = ( _elem.average_score / _elem.average_count );
								}
								else
								{
									iAverageScore = 0;
								}

								fldNewColumn.t = iAverageScore > 0 ? StrRealFixed(iAverageScore, 2) : 0;
								fldNewColumn.r = iAverageScore > 0 ? StrRealFixed(iAverageScore, 2) : 0;

								_total_average_count = _total_average_count + _elem.average_count;
								_total_average_score = _total_average_score + _elem.average_score;

								break;
							case '4':
								fldNewColumn.t = _elem.unfinished;
								fldNewColumn.r = _elem.unfinished;
								fldFixedElem.cs.GetChildByKey(fldColunm.name).r += fldNewColumn.r
								fldFixedElem.cs.GetChildByKey(fldColunm.name).t = fldFixedElem.cs.GetChildByKey(fldColunm.name).r.Value
								break;
							case '5':
								fldNewColumn.t = _elem.appointed;
								fldNewColumn.r = _elem.appointed;
								fldFixedElem.cs.GetChildByKey(fldColunm.name).r += fldNewColumn.r
								fldFixedElem.cs.GetChildByKey(fldColunm.name).t = fldFixedElem.cs.GetChildByKey(fldColunm.name).r.Value
								break;
							case '6':
								fldNewColumn.t = _elem.inprocess;
								fldNewColumn.r = _elem.inprocess;
								fldFixedElem.cs.GetChildByKey(fldColunm.name).r += fldNewColumn.r
								fldFixedElem.cs.GetChildByKey(fldColunm.name).t = fldFixedElem.cs.GetChildByKey(fldColunm.name).r.Value
								break;
							case '7':
								fldNewColumn.t = _elem.completed;
								fldNewColumn.r = _elem.completed;
								fldFixedElem.cs.GetChildByKey(fldColunm.name).r += fldNewColumn.r
								fldFixedElem.cs.GetChildByKey(fldColunm.name).t = fldFixedElem.cs.GetChildByKey(fldColunm.name).r.Value
								break;
							case '8':
								fldNewColumn.t = _elem.failed;
								fldNewColumn.r = _elem.failed;
								fldFixedElem.cs.GetChildByKey(fldColunm.name).r += fldNewColumn.r
								fldFixedElem.cs.GetChildByKey(fldColunm.name).t = fldFixedElem.cs.GetChildByKey(fldColunm.name).r.Value
								break;
							case '9':
								fldNewColumn.t = _elem.browsed;
								fldNewColumn.r = _elem.browsed;
								fldFixedElem.cs.GetChildByKey(fldColunm.name).r += fldNewColumn.r
								fldFixedElem.cs.GetChildByKey(fldColunm.name).t = fldFixedElem.cs.GetChildByKey(fldColunm.name).r.Value
								break;
							case '10':
								fldNewColumn.t = _elem.total;
								fldNewColumn.r = _elem.total;
								fldFixedElem.cs.GetChildByKey(fldColunm.name).r += fldNewColumn.r
								fldFixedElem.cs.GetChildByKey(fldColunm.name).t = fldFixedElem.cs.GetChildByKey(fldColunm.name).r.Value
								break;
						}
					}
				}

				fldAvarageScoreColumn = fldFixedElem.cs.GetOptChildByKey('3')
				if (fldAvarageScoreColumn != undefined)
				{
					if ( _total_average_count != 0 )
					{
						_score = 0;

						if(_total_average_count > 0)
							_score = ( _total_average_score /_total_average_count);					

						fldAvarageScoreColumn.r = _score > 0 ? StrRealFixed(_score, 2) : 0;
						fldAvarageScoreColumn.t = fldAvarageScoreColumn.r
					}
				}
			}
		}
		catch(ex)
		{
			alert(ex);
		}

		return dataForm.GetXml( { 'tabs': false } );
	"/>

	<certificate_type_report PROPERTY="1" PARAM="oParams" ALLOW-CALL-FROM-CLIENT="1" EXPR="

		if ( oParams == null || oParams == undefined )
		{
			oResult.error = 1;
		}

		CheckCurThread();

		oResult = new Object();
		oResult.error = 0;
		oResult.certificate_types = [];
		oResult.immediate_export = false;
		oResult.exported_file_link = '';
		oResult.rows_count = 0;

		var progress = new TaskProgress;
		progress.TaskName = ms_tools.get_const( 'bb1jhx82gs' );

		var arrXQueryConditions = [];

		if ( oParams.certificate_type_id != null )
			arrXQueryConditions.push( '$elem/id = ' + oParams.certificate_type_id );

		if ( oParams.education_org_id != null )
			arrXQueryConditions.push( '$elem/education_org_id = ' + oParams.education_org_id );

		var sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ' where ' + ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

		arrCertificateTypes = XQuery( 'for $elem in certificate_types' + sXQueryConditions + ' return $elem' );

		for ( catCertificateType in arrCertificateTypes )
		{
			oTempCertificateType = {};
			oTempCertificateType.id					= catCertificateType.id;
			oTempCertificateType.name				= catCertificateType.name;
			oTempCertificateType.education_org_id	= catCertificateType.education_org_id;

			try
			{
				oTempCertificateType.education_org_name	= catCertificateType.education_org_id.ForeignElem.disp_name;
			}
			catch( ex )
			{
				oTempCertificateType.education_org_name = global_settings.object_deleted_str;
			}

			oTempCertificateType.certificates_num	= ArrayCount( XQuery( 'for $elem in certificates where $elem/type_id = ' + catCertificateType.id + ' and $elem/valid = true() return $elem' ) );
			oTempCertificateType.required_certificates_num	= catCertificateType.required_quantity;

			oResult.certificate_types.push( oTempCertificateType );
		}

		if ( ArrayCount( oResult.certificate_types ) > oParams.max_visible_rows )
		{
			oResult.immediate_export = true;
			oResult.rows_count = progress.ItemCount;
		}

		oResult.exported_file_link = tools_report.save_report_to_file( '', oParams.report_name, 'xlsx', '', oParams.bIsWebClient, oParams.columns, oResult.certificate_types );

		return oResult;

	"/>

	<test_report PROPERTY="1" PARAM="_param_str" PARAM="curUserID" PARAM="sApplicationID" ALLOW-CALL-FROM-CLIENT="1" EXPR="

			if ( ! LdsIsServer )
				return CallServerMethod( 'tools_report', 'test_report', [ RValue( _param_str ),  ] );

			var oRes = {'iErrorCounter':0,'iCounter':0,'sErrorText':'','sDataUrl':'','bExcel':false,'oFileObject':null}

			if( sApplicationID != undefined || sApplicationID != null )
			{
				oModelRoles = CallServerMethod( 'tools_report', 'model_roles', [ curUserID, sApplicationID ] );
				
				sXQueryQual = '';
				arrSubordinateIDs = [];
				arrGroupIDs = [];
				arrPersonIDs = [];

				if(oModelRoles.type != '')
				{
					switch( oModelRoles.type )
					{
						case 'hr':
						{
							arrSubordinateIDs = oModelRoles.subordinate_ids.hr;

							arrOrgIDs = oModelRoles.org_ids.hr;

							arrOrgPersonIDs = [];
							if (ArrayOptFirstElem(arrOrgIDs) != undefined)
							{
								sQuery = 'for $elem in collaborators where MatchSome($elem/org_id, (' + ArrayMerge(arrOrgIDs, 'This', ',') + ')) return $elem/Fields(\'id\')';
								xarrOrgPersonIDs = tools.xquery(sQuery);
								arrOrgPersonIDs = ArrayExtract(xarrOrgPersonIDs, 'This.id.Value');
							}

							arrGroupIDs = oModelRoles.group_ids.hr;

							arrGroupPersonIDs = [];
							if (ArrayOptFirstElem(arrGroupIDs) != undefined)
							{
								sQuery = 'for $elem in group_collaborators where MatchSome($elem/group_id, (' + ArrayMerge(arrGroupIDs, 'This', ',') + ')) return $elem/Fields(\'collaborator_id\')';
								xarrGroupPersonIDs = tools.xquery(sQuery);
								arrGroupPersonIDs = ArrayExtract(xarrGroupPersonIDs, 'This.collaborator_id.Value');
							}

							arrSubdivisionIDs = oModelRoles.subdivision_ids.hr;

							arrSubdivisionPersonIDs = [];
							if (ArrayOptFirstElem(arrSubdivisionIDs) != undefined)
							{
								sQuery = 'for $elem in collaborators where MatchSome($elem/position_parent_id, (' + ArrayMerge(arrSubdivisionIDs, 'This', ',') + ')) return $elem/Fields(\'id\')';
								xarrSubdivisionPersonIDs = tools.xquery(sQuery);
								arrSubdivisionPersonIDs = ArrayExtract(xarrSubdivisionPersonIDs, 'This.id.Value');
							}

							_arrPersonIDs = ArrayUnion(arrOrgPersonIDs, arrSubordinateIDs, arrGroupPersonIDs, arrSubdivisionPersonIDs);

							

							if (ArrayOptFirstElem(_arrPersonIDs) != undefined)
							{
								arrPersonIDs = ArraySelect(_arrPersonIDs, 'This != curUserID');
							}

							break;
						}
						case 'observer':
						{
							arrSubordinateIDs = oModelRoles.subordinate_ids.observer;
							break;
						}
						case 'expert':
						{
							if(oModelRoles.expert_id != undefined && oModelRoles.expert_id != null )
							{
								iExpertID = oModelRoles.expert_id;
								
								sAssessmentQuery = 'for $elem in assessments return $elem';
								sAssessmentCategoryQuery = 'for $elem in roles where $elem/catalog_name=\'assessment\' return $elem';
								
								sQuery = 'for $elem in roles where $elem/catalog_name = \'assessment\' and contains($elem/experts,' + OptInt(iExpertID, 0) + ') return $elem/Fields(\'id\')';
								arrRoles = tools.xquery(sQuery);
								
								arrRoleIDs = [];
								for(oRole in arrRoles)
								{
									arrRoleIDs.push(oRole.id.Value);
								}

								arrAssessments = [];
								if(ArrayCount(arrRoleIDs) > 0)
								{
									sQuery = 'for $elem in assessments where MatchSome($elem/role_id, (' + ArrayMerge(arrRoleIDs, 'This', ',') + ')) return $elem/Fields(\'id\')';
									arrAssessments = tools.xquery(sQuery);

									arrAssessmentIDs = [];
									if(ArrayOptFirstElem(arrAssessments) != undefined)
									{
										for(oAssessment in arrAssessments)
										{
											arrAssessmentIDs.push(oAssessment.id.Value);
										}
									}
									sXQueryQual = ' MatchSome($elem/assessment_id, (' + ArrayMerge(arrAssessmentIDs, 'This', ',') + '))'
								} else {
									sXQueryQual = ' $elem/assessment_id = 0';
								}
							}
							break;
						}
					}
				}
			}
		
			try
			{
				CheckCurThread();

				var progress = new TaskProgress;
				progress.TaskName = ms_tools.get_const( 'bb1jhx82gs' );

				var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.test_report;

				function get_xquery_merge( _person_id, _where_str )
				{
					_where = _person_id == '' ? '' : ' $elem/person_id = ' + _person_id;
					_where += ( _where_str != '' &amp;&amp; _where != '' ? ' and' : '' ) + _where_str;

					for ( _catalog in String( _params.disp_learning_type ).split( ',' ) )
					{
						//add_learnings( XQuery( 'for $elem in ' + _catalog + ( _where == '' ? '' : ' where' ) + _where + ' return $elem' ) );

						sQuery = 'for $elem in ' + _catalog + ( _where == '' ? '' : ' where' ) + _where + ' return $elem';

						fnAddTestLearnings(XQuery( sQuery ),_params,dataForm,oRes)
					}
				}

				dataForm = OpenNewDoc( 'x-local://wtv/wtv_form_table_data.xmd' ).TopElem;

				_person_ids_array = Array();

				_where_str ='';

				if(_params.assessment_id.HasValue)
				{
					_where_str += ' MatchSome( $elem/assessment_id, ( ' +  _params.assessment_id.Value + ' ) )';
				} else {
					_where_str += sXQueryQual;
				}

				_where_str += _params.start_date.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_usage_date &gt;= date( \'' + DateNewTime( _params.start_date ) + '\' )' : '';
				_where_str += _params.finish_date.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_usage_date &lt;= date( \'' + DateNewTime( _params.finish_date, 23, 59, 59 ) + '\' )' : '';

				if ( _params.person_id.HasValue )
				{
					get_xquery_merge( _params.person_id, _where_str );
				}
				else if ( _params.org_id.HasValue || _params.parent_object_id.HasValue || _params.group_id.HasValue )
				{
					if ( _params.org_id.HasValue || _params.parent_object_id.HasValue )
					{
						curNodeID = _params.parent_object_id.HasValue ? _params.parent_object_id : _params.org_id;

						if ( _params.hier_sub_select )
							_person_ids_array = tools.get_sub_person_ids_by_subdivision_id( curNodeID );
						else
							_person_ids_array = ArrayExtract( XQuery( 'for $elem in subs where $elem/parent_id = ' + curNodeID + ' and $elem/type = &quot;position&quot; and $elem/basic_collaborator_id != null() return $elem' ), 'basic_collaborator_id' );
					}

					if ( _params.group_id.HasValue )
					{
						try
						{
							groupDoc = OpenDoc( UrlFromDocID( _params.group_id ) ).TopElem;

							groupPersonsIDArray = ArrayExtract( groupDoc.collaborators, 'collaborator_id' );

							if ( ArrayOptFirstElem( _person_ids_array ) != undefined )
								_person_ids_array = arrayCross( _person_ids_array, groupPersonsIDArray );
							else
								_person_ids_array = groupPersonsIDArray;
						}
						catch( err )
						{
						}
					}

					_person_ids_array = ArraySelectDistinct( _person_ids_array );

					for ( _person_id in _person_ids_array )
						get_xquery_merge( _person_id, _where_str );
				}
				else
				{
					_where_str += ( _where_str == '' ? ' ' : ' and ' );

					if(oModelRoles.type != '')
					{
						switch( oModelRoles.type )
						{
							case 'hr':
							{
								if( ArrayCount(arrPersonIDs) != 0)
								{
									_where_str += ' MatchSome($elem/person_id, (' + ArrayMerge(arrPersonIDs, 'This', ',') + '))';
								} else {
									_where_str += ' $elem/id = 0';
								}
								break;
							}
						}
					}

					get_xquery_merge( '', _where_str );
				}

				//alert(dataForm.Xml)
			}
			catch ( err )
			{
				oRes.iErrorCounter=1
				oRes.sErrorText=StrReplace( 'Ошибка при построении отчета: {PARAM1}', '{PARAM1}', err )
			}

			if (oRes.iErrorCounter==0)
			{
				if (oRes.oFileObject!=null)
				{
					oRes.sDataUrl=fnSaveFile(oRes.oFileObject,'Excel');
					if (_params.is_web_client)
					{
						oRes.sDataUrl=UrlFileName(FilePathToUrl(UrlToFilePath(oRes.sDataUrl)))
					}
					oRes.bExcel=true;
				}
				else
				{
					oRes.sDataUrl=fnSaveFile(dataForm.GetXml( { 'tabs': false } ),'Xml');
				}
			}

			return oRes;
	"/>
	
	<course_objectives_report PROPERTY="1" PARAM="oParams" ALLOW-CALL-FROM-CLIENT="1" EXPR="

		if ( oParams == null || oParams == undefined )
		{
			oParams.error = 1;
		}
		
		function add_learnings( _learning_array )
		{
			for ( _learning in _learning_array )
			try
			{
				learningDoc = OpenDoc( UrlFromDocID( _learning.PrimaryKey ) ).TopElem;
				learningPart = learningDoc.parts.GetChildByKey( oParams.part_id );
				
				_child = oParams.learnings.AddChild();
				_child.AssignElem( learningDoc );
				_child.course_start_usage_date = learningDoc.start_usage_date;
				_child.AssignElem( learningPart );
				
				try
				{
					_child.person_code= _learning.person_id.ForeignElem.code
				}
				catch(ex)
				{
				}
				
				if (TopElem.disp_person_list_staff)
					_child.person_list_staff = tools.person_list_staff_by_person_id(_child.person_id);
				
				_child.per_cent = _child.max_score.HasValue &amp;&amp; _child.max_score != 0 ? ( _child.score / _child.max_score ) * 100. : 0;
				
				if ( learningPart.objectives.ChildNum != 0 )
				{
					_objectives = learningPart.objectives;
				}
				else
				{
					fldAnnals = tools.annals_decrypt( learningPart );
					_objectives = fldAnnals == null ? [] : fldAnnals.objectives.lines;
				}
				for ( _objective in _objectives )
				{
					oParams.objectives.ObtainChildByKey( _objective.PrimaryKey );
					_int = _child.objectives.lines.AddChild();
					_int.AssignElem( _objective );
					if ( ! _objective.score.HasValue &amp;&amp; _objective.score.ChildNum != 0 )
						_int.score = ArrayMerge( _objective.score, 'Value', ',' );
				}
			}
			catch ( err )
			{
			}
		}
		
		_where_str = '';
		_where_str = _where_str + ( oParams.start_date == null ? '' : ( _where_str == '' ? '' : ' and' ) + ' $elem/start_usage_date &gt;= ' + XQueryLiteral( DateNewTime( oParams.start_date, 0, 0, 0 ) ) );
		_where_str = _where_str + ( oParams.finish_date == null ? '' : ( _where_str == '' ? '' : ' and' ) + ' $elem/start_usage_date &lt;= ' + XQueryLiteral( DateNewTime( oParams.finish_date, 23, 59, 59 ) ) );
		_where_str = _where_str + ( _where_str == '' ? '' : ' and' ) + ' $elem/course_id = ' + oParams.course_id;
		
		_person_array = Array();

		if ( oParams.org_id.HasValue || oParams.parent_object_id.HasValue )
		{
			curNodeID = ( oParams.parent_object_id != null ? oParams.parent_object_id : oParams.org_id );
			//_ids_array = ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( curNodeID )) ;
			if ( oParams.hier_sub_select )
			{
				_ids_array = ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( curNodeID )) ;
			}
			else
			{
				subsArray = XQuery('for $elem in subs where $elem/parent_id='+ curNodeID +' and $elem/type=&quot;position&quot; return $elem');
				_ids_array = Array();
				count=0;
				for ( _sub in subsArray )
				{
					if ( _sub.basic_collaborator_id.HasValue)
					{
						_ids_array[count] = _sub.basic_collaborator_id;
						count++;
					}
				}
				_ids_array = ArraySelectDistinct(_ids_array);
			}
			_person_array = QueryCatalogByKeys( 'collaborators', 'id', _ids_array );
		}
		
		if ( oParams.group_id.HasValue)
		{
			try
			{
				groupDoc = OpenDoc( UrlFromDocID( TopElem.group_id ) ).TopElem;
			}
			catch(_gigi_)
			{
				groupDoc = undefined;
			}
			if (groupDoc != undefined)
				groupPersonsIDArray = ArrayExtract( groupDoc.collaborators, 'collaborator_id' );
				
			if ( ArrayCount( _person_array ) > 0 )
			{
				_person_array = ArrayIntersect(_person_array,groupPersonsIDArray,'This.id') 
			}
			else
			{		
				_person_array = QueryCatalogByKeys( 'collaborators', 'id', groupPersonsIDArray );
			}
		}
		
		if ( oParams.person_id.HasValue)
		{
			if ( ArrayCount( _person_array )>0 )
			{
				_person_array = ArraySelect( _person_array, 'id == oParams.person_id');
			}
			else if ( !( oParams.org_id.HasValue || oParams.parent_object_id.HasValue || oParams.group_id.HasValue ))
			{
				_person_array = XQuery( 'for $elem in collaborators where $elem/id = ' + oParams.person_id + ' return $elem' );
			}
		}
		
		if  ( oParams.org_id.HasValue || oParams.parent_object_id.HasValue || oParams.group_id.HasValue || oParams.person_id.HasValue  )
		{
			for ( _person in _person_array )
			{
				if ( _person.id != null )
				{
					if ( oParams.disp_learning_type == '(active_learnings,learnings)' )
					{
						_learning_array = XQuery( 'for $elem in active_learnings where $elem/person_id = ' + _person.id + ( _where_str == '' ? '' : ' and' ) + _where_str + ' return $elem' );
						add_learnings( _learning_array );
						
						_learning_array = XQuery( 'for $elem in learnings where $elem/person_id = ' + _person.id + ( _where_str == '' ? '' : ' and' ) + _where_str + ' return $elem' );
						add_learnings( _learning_array );
					}
					else
					{
						_learning_array = XQuery( 'for $elem in ' + oParams.disp_learning_type + ' where $elem/person_id = ' + _person.id + ( _where_str == '' ? '' : ' and' ) + _where_str + ' return $elem' );
						add_learnings( _learning_array );
					}
				}
			}
		}
		else
		{
			if ( oParams.disp_learning_type == '(active_learnings,learnings)' )
			{
				_learning_array = XQuery( 'for $elem in active_learnings where' + _where_str + ' return $elem' );
				add_learnings( _learning_array );
				
				_learning_array = XQuery( 'for $elem in learnings where' + _where_str + ' return $elem' );
				add_learnings( _learning_array );
			}
			else
			{
				_learning_array = XQuery( 'for $elem in ' + oParams.disp_learning_type + ' where' + _where_str + ' return $elem' );
				add_learnings( _learning_array );
			}
		}

		if ( oParams.disp_parts )
			oParams.is_create = true;

		return oParams;
	"/>
	
	<course_module_report PROPERTY="1" PARAM="oParams" ALLOW-CALL-FROM-CLIENT="1" EXPR="
		if ( oParams == null || oParams == undefined )
		{
			oParams.error = 1;
		}
		
		function fnAddLearnings( arrLearnings )
		{		
			for ( catLearning in arrLearnings )
			{
				try
				{
					teLearning = OpenDoc( UrlFromDocID( catLearning.PrimaryKey ) ).TopElem;
					learningPart = teLearning.parts.GetChildByKey( oParams.part_id );
				
					_child = oParams.learnings.AddChild();
					_child.AssignElem( teLearning );
					_child.course_start_usage_date = teLearning.start_usage_date;
					_child.AssignElem( learningPart );

					try
					{
						_child.person_code= catLearning.person_id.ForeignElem.code
					}
					catch(ex)
					{
					}
					
					try
					{
						_child.state_id= catLearning.state_id
					}
					catch(ex)
					{
					}
					
					if ( TopElem.disp_person_list_staff )
						_child.person_list_staff = tools.person_list_staff_by_person_id( _child.person_id );
					
					_child.per_cent = _child.max_score.HasValue &amp;&amp; _child.max_score != 0 ? ( _child.score / _child.max_score ) * 100. : 0;

					if ( learningPart.interactions.ChildNum != 0 )
					{
						_interactions = learningPart.interactions;
					}
					else
					{
						fldAnnals = tools.annals_decrypt( learningPart );
						_interactions = fldAnnals == null ? [] : fldAnnals.interactions.lines;
					}

					for ( _interaction in _interactions )
					{
						oParams.interactions.ObtainChildByKey( _interaction.PrimaryKey );
						_int = _child.interactions.lines.AddChild();
						_int.AssignElem( _interaction );
						_int.type_interaction = _int.type_interaction.HasValue ? _int.type_interaction.ForeignElem.name : '';
						_int.latency = _int.latency.HasValue ? tools.get_period_from_iso( _int.latency ) / 1000 : '';
					}
				}
				catch ( err )
				{
				}
			}
		}

		oParams.learnings.Clear();
		oParams.interactions.Clear();
		
		_where_str = '';
		_where_str = _where_str + ( oParams.start_date == null ? '' : ( _where_str == '' ? '' : ' and' ) + ' $elem/start_usage_date &gt;= ' + XQueryLiteral( DateNewTime( oParams.start_date, 0, 0, 0 ) ) );
		_where_str = _where_str + ( oParams.finish_date == null ? '' : ( _where_str == '' ? '' : ' and' ) + ' $elem/start_usage_date &lt;= ' + XQueryLiteral( DateNewTime(  oParams.finish_date, 23, 59, 59 ) ) );
		_where_str = _where_str + ( _where_str == '' ? '' : ' and' ) + ' $elem/course_id = ' + oParams.course_id;
		
		_person_array = Array();

		if ( oParams.org_id.HasValue || oParams.parent_object_id.HasValue )
		{
			curNodeID = ( oParams.parent_object_id != null ? oParams.parent_object_id : oParams.org_id );
			//_ids_array = ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( curNodeID )) ;
			if ( oParams.hier_sub_select )
			{
				_ids_array = ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( curNodeID )) ;
			}
			else
			{
				subsArray = XQuery('for $elem in subs where $elem/parent_id='+ curNodeID +' and $elem/type=&quot;position&quot; return $elem');
				_ids_array = Array();
				count=0;
				for ( _sub in subsArray )
				{
					if ( _sub.basic_collaborator_id.HasValue)
					{
						_ids_array[count] = _sub.basic_collaborator_id;
						count++;
					}
				}
				_ids_array = ArraySelectDistinct(_ids_array);
			}
			_person_array = QueryCatalogByKeys( 'collaborators', 'id', _ids_array );
		}
		
		
		if ( oParams.group_id.HasValue)
		{
			try
			{
				groupDoc = OpenDoc( UrlFromDocID( TopElem.group_id ) ).TopElem;
			}
			catch(_gigi_)
			{
				groupDoc = undefined;
			}
			if (groupDoc != undefined)
				groupPersonsIDArray = ArrayExtract( groupDoc.collaborators, 'collaborator_id' );
				
			if ( ArrayCount( _person_array ) > 0 )
			{
				_person_array = ArrayIntersect(_person_array,groupPersonsIDArray,'This.id')
			}
			else
			{		
				_person_array = QueryCatalogByKeys( 'collaborators', 'id', groupPersonsIDArray );
			}
		}
		
		if ( oParams.person_id.HasValue)
		{
			if ( ArrayCount( _person_array )>0 )
			{
				_person_array = ArraySelect( _person_array, 'id == oParams.person_id');
			}
			else if ( !( oParams.org_id.HasValue || oParams.parent_object_id.HasValue || oParams.group_id.HasValue ))
			{
				_person_array = XQuery( 'for $elem in collaborators where $elem/id = ' + oParams.person_id + ' return $elem' );
			}
		}
		
		if  ( oParams.org_id.HasValue || oParams.parent_object_id.HasValue || oParams.group_id.HasValue || oParams.person_id.HasValue  )
		{
			for ( _person in _person_array )
			{
				if ( _person.id != null )
				{
					if ( oParams.disp_learning_type == '(active_learnings,learnings)' )
					{
						arrLearnings = XQuery( 'for $elem in active_learnings where $elem/person_id = ' + _person.id + ( _where_str == '' ? '' : ' and' ) + _where_str + ' return $elem' );
						fnAddLearnings( arrLearnings );
						
						arrLearnings = XQuery( 'for $elem in learnings where $elem/person_id = ' + _person.id + ( _where_str == '' ? '' : ' and' ) + _where_str + ' return $elem' );
						fnAddLearnings( arrLearnings );
					}
					else
					{
						arrLearnings = XQuery( 'for $elem in ' + oParams.disp_learning_type + ' where $elem/person_id = ' + _person.id + ( _where_str == '' ? '' : ' and' ) + _where_str + ' return $elem' );
						fnAddLearnings( arrLearnings );
					}
				}
			}
		}
		else
		{
			if ( oParams.disp_learning_type == '(active_learnings,learnings)' )
			{
				arrLearnings = XQuery( 'for $elem in active_learnings where' + _where_str + ' return $elem' );
				fnAddLearnings( arrLearnings );
				
				arrLearnings = XQuery( 'for $elem in learnings where' + _where_str + ' return $elem' );
				fnAddLearnings( arrLearnings );
			}
			else
			{
				arrLearnings = XQuery( 'for $elem in ' + oParams.disp_learning_type + ' where' + _where_str + ' return $elem' );
				fnAddLearnings( arrLearnings );
			}
		}

		oParams.learnings.Sort( oParams.sort_type_id, '+' );
	
		if ( oParams.disp_parts )
			oParams.is_create = true;

		return oParams;		
	"/>

	<question_by_depart_report PROPERTY="1" PARAM="_param_str" ALLOW-CALL-FROM-CLIENT="1" EXPR="

		if ( ! LdsIsServer )
				return CallServerMethod( 'tools_report', 'question_by_depart_report', [ RValue( _param_str ),  ] );

		var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.view_question_by_depart_report
		dataForm = OpenNewDoc( 'x-local://wtv/wtv_view_question_by_depart_report.xml' ).TopElem.data;
		try
		{

				_where_str = ( _params.assessment_id == null ? '' : ' $learning/assessment_id = ' + _params.assessment_id );
				_where_str = _where_str + ( _params.start_date == null ? '' : ( _where_str == '' ? ' ' : ' and ' ) + '$learning/start_usage_date &gt;= date( &quot;' + _params.start_date + '&quot; )' );
				_where_str = _where_str + ( _params.finish_date == null ? '' : ( _where_str == '' ? ' ' : ' and ' ) + '$learning/start_usage_date &lt;= date( &quot;' + _params.finish_date + '&quot; )' );

				_person_array = Array();

				if ( (_params.org_id.HasValue || _params.parent_object_id.HasValue)==true)
				{
					curNodeID = (( _params.parent_object_id != null ? _params.parent_object_id : _params.org_id )==null?'0':( _params.parent_object_id != null ? _params.parent_object_id : _params.org_id ));
					//_ids_array = ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( curNodeID )) ;
					if ( _params.hier_sub_select==true )
					{
						_ids_array = ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( curNodeID )) ;
					}
					else
					{
						subsArray = XQuery('for $elem in subs where $elem/parent_id='+ curNodeID +' and $elem/type=&quot;position&quot; return $elem');
						_ids_array = Array();
						count=0;
						for ( _sub in subsArray )
						{
							if ( _sub.basic_collaborator_id.HasValue)
							{
								_ids_array[count] = _sub.basic_collaborator_id;
								count++;
							}
						}
						_ids_array = ArraySelectDistinct(_ids_array);
					}
					_person_array = QueryCatalogByKeys( 'collaborators', 'id', _ids_array );
				}
				if ( _params.group_id.HasValue==true)
				{
					try
					{
						groupDoc = OpenDoc( UrlFromDocID( _params.group_id ) ).TopElem;
					}
					catch(_gigi_)
					{
						groupDoc = undefined;
					}
					if (groupDoc != undefined)
						groupPersonsIDArray = ArrayExtract( groupDoc.collaborators, 'collaborator_id' );

					if ( ArrayOptFirstElem( _person_array ) !=undefined)
					{
						_person_array = QueryCatalogByKeys( 'collaborators', 'id', arrayCross( ArrayExtract(_person_array,'id'), groupPersonsIDArray))
					}
					else
					{
						_person_array = QueryCatalogByKeys( 'collaborators', 'id', groupPersonsIDArray );
					}

				}
				if ( _params.person_id.HasValue==true)
				{
					if ( ArrayOptFirstElem( _person_array )!=undefined)
					{
						_person_array = ArraySelect( _person_array, 'id == _params.person_id');
					}
					else if ( (!( _params.org_id.HasValue || _params.parent_object_id.HasValue || _params.group_id.HasValue ))==true)
					{
						_person_array = XQuery( 'for $elem in collaborators where $elem/id = ' + _params.person_id + ' return $elem' );
					}
				}



				if  ( (!_params.org_id.HasValue && !_params.parent_object_id.HasValue && !_params.group_id.HasValue && !_params.person_id.HasValue)==true  )
				{
					if ( ArrayOptFirstElem( _person_array )==undefined )
					{
						 _person_array=collaborators;
					}
				}

				if (_params.disp_all_org_list==true)
				{
					_person_array=collaborators;
				}

				arrLearningTypes=ArraySelect(String(_params.disp_learning_type).split(','),'This!=\'\'')
				fldTotalChild = dataForm.learnings_aggregated_total.AddChild();
				fldTotalChild.name=ms_tools.get_const('vagb_summary')
				for ( _person in _person_array )
				{
					if ( _person.id != null )
					{
							arrLearnings=Array()
							for (strLearningType in arrLearningTypes)
							{
								arrLearnings = ArrayUnion(XQuery( 'for $learning in '+strLearningType+' where $learning/person_id = ' + _person.id + ( _where_str == '' ? '' : ' and ' ) + _where_str + ' return $learning' ),arrLearnings);
							}
							strObjectType='collaborator'

							if (_params.disp_all_org_list==false)
							{
								if  ( (!_params.person_id.HasValue)==true )
								{
									position_parent_id=_person.position_parent_id
									position_parent_name=_person.position_parent_name;
									strObjectType='subdivision';
									if  ( _params.show_people )
									{
										if  ( _params.parent_object_id.HasValue==true )
										{
											if (Int(_params.parent_object_id)==_person.position_parent_id)
											{
												position_parent_id=_person.id;
												position_parent_name=_person.fullname;
												strObjectType='collaborator'
											}
										}
										else
										{
											if  ( _params.org_id.HasValue==true  )
											{
												if (Int(_params.org_id)==_person.org_id)
												{
													strObjectType='subdivision';
													if ( !_person.position_parent_id.HasValue )
													{

														position_parent_id=_person.id;
														position_parent_name=_person.fullname;
														strObjectType='collaborator'
													}
												}
											}
										}
									}
								}
								else
								{
									position_parent_id=_person.id;
									position_parent_name=_person.fullname;
									strObjectType='collaborator'
								}
							}
							else
							{
								position_parent_id=_person.org_id;
								position_parent_name=_person.org_name;
								strObjectType='org';
							}

							if (Trim(position_parent_id) == '')
							{
								position_parent_id=0;
								position_parent_name=ms_tools.get_const('neopredeleno');
							}
							fldNewChild=ArrayOptFind( dataForm.learnings_aggregated, 'This.obj_id =='+position_parent_id )
							if ( fldNewChild== undefined )
							{
								fldNewChild = dataForm.learnings_aggregated.AddChild();
								fldNewChild.obj_id=Int(position_parent_id);
								fldNewChild.name=position_parent_name;
								fldNewChild.flag_expanded=_params.expanded_all;
								fldNewChild.type=strObjectType
								if (_params.disp_person_list_staff==true)
								{
									if (_params.disp_all_org_list==false)
									{
										fldNewChild.obj_sub_path = tools.person_list_staff_by_person_id(_person.id,_person,'','','/');

										if ( fldNewChild.obj_sub_path=='')
										{
											if ( _person.org_id.HasValue&&_person.org_name.HasValue)
											{
												fldNewChild.obj_sub_path=_person.org_name;
											}
										}
									}
									else
									{
										fldNewChild.obj_sub_path=_person.org_name;
									}
								}
								else
								{
									fldNewChild.obj_sub_path ='';
								}
							}

							for (fldLearning in arrLearnings)
							{
								try
								{
									docLearning = OpenDoc( UrlFromDocID( fldLearning.id ) ).TopElem;
									fldAnnals = tools.annals_decrypt( docLearning );
									if ( fldAnnals == null )
										continue;

									fldHistory = fldAnnals.au.history;

									if ( ArrayCount( fldHistory.objects ) == 0 )
										continue;

									arrSections = ArrayFirstElem( fldHistory.objects ).section;

									try
									{
										strAssessmentName = docLearning.assessment_id.ForeignElem.title;
									}
									catch ( dd )
									{
										strAssessmentName = ms_tools.get_const('jmkcjvkz8n');
									}

									for ( fldSection in arrSections )
									{
										for ( fldQuestion in fldSection.question )
										{
											try
											{
												fldNewQuestion=fldNewChild.questions.ObtainChildByKey( fldQuestion.PrimaryKey+'_'+  fldLearning.assessment_id);
												fldNewQuestion.text = fldQuestion.text;
												fldNewQuestion.maxweight = fldQuestion.maxweight;
												fldNewQuestion.assessment_name=strAssessmentName;
												fldNewQuestion.section_name=fldSection.title
												fldNewQuestion.num = fldNewQuestion.num + 1;

												fldNewChild.num = fldNewChild.num + 1;
												fldTotalChild.num = fldTotalChild.num + 1;
												if ( fldQuestion.state == 'passed' )
												{
													fldNewQuestion.correct_num += 1;
													fldNewChild.correct_num += 1;
													fldTotalChild.correct_num += 1;
												}
												else
												{
													fldNewQuestion.incorrect_num += 1;
													fldNewChild.incorrect_num += 1;
													fldTotalChild.incorrect_num += 1;
												}

											}
											catch(ex)
											{
												alert('question_by_depart_report. Question process error: '+ex)
											}
										}
									}
								}
								catch(ex)
								{
									alert('question_by_depart_report. Learning process error: '+ex)
								}
							}
						}
					}

			dataForm.learnings_aggregated.Sort( 'name', '+' );

		}
		catch(ex)
		{
			alert(ex);
		}
		return dataForm.GetXml( { 'tabs': false } );
	"/>


	<event_person_report PROPERTY="1" PARAM="_param_str" PARAM="curUser" ALLOW-CALL-FROM-CLIENT="1" EXPR="

		if ( ! LdsIsServer )
				return CallServerMethod( 'tools_report', 'event_person_report', [ RValue( _param_str ), curUser ] );

		isXML=true
		isMSSQL=false
		isOracle=false
		if ((tools.sys_db_capability & tools.UNI_CAP_BASIC) > 0)
		{
			isXML=false
			isMSSQL=((tools.sys_db_capability & tools.UNI_CAP_MSSQL) > 0)
			isOracle=((tools.sys_db_capability & tools.UNI_CAP_ORACLE) > 0)
		}

		var oRes = {'iErrorCounter':0,'iCounter':0,'sErrorText':'','sDataUrl':'','bExcel':false,'oFileObject':null}

		try
		{
			CheckCurThread();

			var progress = new TaskProgress;
			progress.TaskName = ms_tools.get_const( 'bb1jhx82gs' );

				var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.event_person_report
				dataForm = OpenNewDoc( 'x-local://wtv/wtv_form_table_data.xmd' ).TopElem;
				function arrayCross (arrFirstParam,arrSecondParam)
				{
					var arrResult = Array();
					for ( elem1 in arrFirstParam )
					{
						for ( elem2 in arrSecondParam )
						{
							if ( elem1 == elem2 )
							{
								arrResult.push(elem1);
								break;
							}
						}
					}

					return arrResult;
				}


				function fnXQueryMerge( strPersonIDParam, strWhereParam, strQueryParam )
				{
					_where = strPersonIDParam == '' ? '' : ' $er/person_id = ' + strPersonIDParam;

					if (strWhereParam==''&& _where != '')
					{
						_where = ' where'+ _where;
					}
					else if (strWhereParam!=''&& _where != '')
					{
						_where = strWhereParam+' and'+_where
					}
					else if (strWhereParam!=''&& _where == '')
					{
						_where = strWhereParam
					}
					// alert(strQueryParam  + _where  + ' return $er');
					fnAddResults( XQuery( strQueryParam  + _where  + ' return $er' ),_params,dataForm,oRes );
				}

				function check_admin_access( teObjectParam, curUser, fldAccessCalalogParam )
				{
					try
					{
						if ( curUser == null )
						{
							throw 'no_data';
						}
					}
					catch ( err )
					{
						curUser = tools.get_cur_user();
						if ( curUser == null )
						{
							return false;
						}
					}
					try
					{
						if ( fldAccessCalalogParam == null || fldAccessCalalogParam == undefined )
						{
							throw 'no_data';
						}
					}
					catch ( err )
					{
						fldAccessCalalogParam = admin_access_catalogs.GetOptChildByKey( teObjectParam.Name );
						if ( fldAccessCalalogParam == undefined )
						{
							return true;
						}
					}

					if ( ! fldAccessCalalogParam.use_filter )
					{
						return true;
					}
					if ( teObjectParam.user_access_role.HasValue &amp;&amp; teObjectParam.user_access_role != curUser.access.access_role )
					{
						return false;
					}

					arrUserGroups = XQuery( 'for $elem in group_collaborators where $elem/collaborator_id = ' + curUser.id + ' return $elem' );
					arrUserGroups = ArrayExtract( arrUserGroups, 'group_id' );
					arrCurUserGroups = XQuery( 'for $elem in groups where MatchSome( $elem/id, ( ' + ArrayMerge( arrUserGroups, 'This', ',' ) + ' ) ) return $elem' );

					if ( teObjectParam.user_group_id.HasValue &amp;&amp; ArrayOptFindByKey( arrCurUserGroups, teObjectParam.user_group_id, 'id' ) == undefined )
					{
						return false;
					}
					return true;
				}

				function fnAddResults(arrResultsParam,fldParamFormParam,fldDataFormParam,oResParam)
				{
					bShowSubPath=ArrayOptFind(fldParamFormParam.columns,'This.name==\'s2\'||This.name==\'s3\'||This.name==\'s4\'||This.name==\'s5\'||This.name==\'s6\'||This.name==\'s7\'')!=undefined

					var bParamsSet=true
					var iCounter=0;
					try
					{
						iCounter=oResParam.iCounter;
					}
					catch(ex)
					{
						bParamsSet=false;
					}
					iFullLoopCounter=iCounter
					if (bParamsSet)
					{
						iFullLoopCounter=oResParam.oFileObject!=null?iCounter:0
					}
					var oParamObject=null

					var arrResults = ArraySelectAll( arrResultsParam );
					if ( isOracle && ArrayOptFirstElem( arrResultsParam ) != undefined && ArrayOptFirstElem( arrResults ) == undefined )
					{
						arrResults = arrResultsParam;
					}

					for ( fldLearning in arrResults )
					{
						try
						{
							docEvent = tools.open_doc( fldLearning.event_id );
							if ( docEvent != undefined )
							{
								if ( ! check_admin_access( docEvent.TopElem, curUser ) )
								{
									continue;
								}
							}

							_child = fldDataFormParam.rs.AddChild();

							fldNewColumn=_child.cs.AddChild();
							fldNewColumn.name = 'id';
							fldNewColumn.t = fldLearning.person_id;
							fldNewColumn.cl = fldLearning.id.Value;
							fldNewColumn.s = StrLeftRange( fldLearning.Name, 1 );

							fldPerson=fldLearning.person_id.OptForeignElem
							fldPerson=undefined
							if (fldLearning.person_id.HasValue)
							{
								try
								{
									fldPerson = fldLearning.person_id.OptForeignElem;
								}
								catch(ex)
								{
								}

							}

							fldCourse=undefined;
							catUser=undefined;
							strSubsPath=''
							iSubsPathCounter=0;
							if (bShowSubPath&&fldPerson!=undefined)
							{
								try
								{
									strSubsPath=tools.person_list_staff_by_person_id( fldPerson.id,fldPerson,9 )
									arrSubs=strSubsPath.split('->');
									iSubsPathCounter=ArrayCount(arrSubs)
								}
								catch(ex)
								{
								}
							}

							fldEvent=undefined
							if (fldLearning.event_id.HasValue)
							{
								try
								{
									fldEvent = fldLearning.event_id.OptForeignElem;
								}
								catch(ex)
								{
								}

							}

							for (fldColunm in fldParamFormParam.columns)
							{
								fldNewColumn=_child.cs.AddChild();
								fldNewColumn.name = fldColunm.name;

								switch( fldColunm.name )
								{
									case '0':
											fldNewColumn.t = fldLearning.person_fullname;
											break;
									case '1':
											try
											{
												fldNewColumn.t = fldPerson.code;
											}
											catch ( err )
											{
												fldNewColumn.t = err;
											}
											break;
									case '2':
											if (fldParamFormParam.disp_person_list_staff&&fldPerson!=undefined&&bShowSubPath==false)
											{
												fldNewColumn.t = tools.person_list_staff_by_person_id( fldPerson.id,fldPerson );
											}
											else
											{
												if (bShowSubPath&&fldPerson!=undefined)
												{
													try
													{
														fldNewColumn.t = arrSubs[1]
													}
													catch(ex)
													{
													}
												}
												else
												{
													fldNewColumn.t = fldLearning.person_subdivision_name;
												}
											}
											break;
									case 's2':
									case 's3':
									case 's4':
									case 's5':
									case 's6':
									case 's7':
											try
											{
												iSubIndex=Int(StrReplace(fldColunm.name,'s',''))
												if (iSubsPathCounter!=iSubIndex)
													fldNewColumn.t = arrSubs[(iSubIndex)]
											}
											catch(ex)
											{
											}
											break;
									case 'o':
											fldNewColumn.t = fldLearning.person_org_name;
											if (bShowSubPath&&fldPerson!=undefined)
											{
												try
												{
													fldNewColumn.t = arrSubs[0]
													if (Trim(fldNewColumn.t)=='')
													{
														throw 'no org'
													}
												}
												catch(ex)
												{
													fldNewColumn.t = fldPerson.org_name;
												}
											}
											break;
									case '3':
											try
											{
												fldNewColumn.t = fldPerson.position_name;
											}
											catch( error )
											{
												fldNewColumn.t = error;
											}
											break;
									case '4':
											fldNewColumn.t = ''
											if (fldEvent!=undefined)
											{
												fldNewColumn.t = fldEvent.name;
											}
											break;
									case '5':
											fldNewColumn.t = ''
											if (fldEvent!=undefined)
											{
												if (fldEvent.type_id.HasValue)
												{
													try
													{
														fldNewColumn.t = fldEvent.type_id.ForeignElem.name;
													}
													catch(ex)
													{
														fldNewColumn.t = OpenDoc( UrlFromDocID( fldEvent.type_id ) ).TopElem.name;
													}
												}
											}
											break;
									case '6':
											fldNewColumn.t = ''
											if (fldEvent!=undefined)
											{
												if (fldEvent.education_method_id.HasValue)
												{
													try
													{
														fldNewColumn.t = fldEvent.education_method_id.ForeignElem.name;
													}
													catch(ex)
													{
														fldNewColumn.t = OpenDoc( UrlFromDocID( fldEvent.education_method_id ) ).TopElem.name;
													}
												}
											}
											break;
									case '7':
											fldNewColumn.t = ''
											if (fldEvent!=undefined)
											{
												if (fldEvent.education_org_id.HasValue)
												{
													try
													{
														fldNewColumn.t = fldEvent.education_org_id.ForeignElem.name;
													}
													catch(ex)
													{
														fldNewColumn.t = OpenDoc( UrlFromDocID( fldEvent.education_org_id ) ).TopElem.name;
													}
												}
											}
											break;
									case '8':
											fldNewColumn.t = ''
											if (fldEvent!=undefined)
											{
												if (fldEvent.place_id.HasValue)
												{
													try
													{
														fldNewColumn.t = fldEvent.place_id.ForeignElem.name;
													}
													catch(ex)
													{
														fldNewColumn.t = OpenDoc( UrlFromDocID( fldEvent.place_id ) ).TopElem.name;
													}
												}
											}
											break;
									case '9':

											fldNewColumn.t = null;
											fldNewColumn.s = null;

											if (fldEvent!=undefined)
											{
												try
												{
													fldNewColumn.t = StrDate(Date(fldEvent.start_date), true, false );
													fldNewColumn.s = StrXmlDate(Date(fldEvent.start_date));
												}
												catch ( err )
												{

												}
											}
											break;

									case '10':

											fldNewColumn.t = null;
											fldNewColumn.s = null;

											if (fldEvent!=undefined)
											{
												try
												{
													fldNewColumn.t = StrDate(Date(fldEvent.finish_date), true, false );
													fldNewColumn.s = StrXmlDate(Date(fldEvent.finish_date));
												}
												catch ( err )
												{

												}
											}
											break;
									case '11':

											fldNewColumn.t = fldLearning.is_assist ? '+' : '-';
											fldNewColumn.r = fldLearning.is_assist ? 1 : 0;

											break;

									case '12':
											fldNewColumn.t = ''
											if (fldLearning.event_id.HasValue)
											{
												fldNewColumn.t = ArrayMerge(ArraySort(QueryCatalogByKeys( 'lectors', 'id', ArrayExtract(XQuery('for $elem in event_lectors where $elem/event_id='+fldLearning.event_id+' return $elem'),'lector_id')),'lector_fullname','+'),'lector_fullname',', ')
											}
											break;
									case '13':
											fldNewColumn.t = fldLearning.score
											fldNewColumn.r = fldLearning.score

											try
											{
												fldNewColumn.t =  fldLearning.score + ' (' + ( ( 100 *  fldLearning.score ) /  fldLearning.max_score ) + '%)'
											}
											catch ( e )
											{
											}
											break;

									case '14':
											fldNewColumn.t = ''
											fldNewColumn.r = null
											count = 0;
											score_percent = 0;

											if (fldLearning.event_id.HasValue)
											{
												test_learningArray = XQuery('for $elem in test_learnings where $elem/event_id = ' + fldLearning.event_id + ' and $elem/person_id = ' + fldLearning.person_id + ' return $elem');
												for ( _test_learning in test_learningArray )
												{
													try
													{
														score_percent = score_percent + ( 100*_test_learning.score )/_test_learning.max_score;
														count++;
													}
													catch(err)
													{
													}
												}
												if ( count != 0 )
												{
													fldNewColumn.r = Real(score_percent)/Real(count);
													fldNewColumn.t = StrReal(fldNewColumn.r,1)+'%'
												}
											}
											break;

									}

							}
						}
						catch ( ex )
						{
							alert(ex)
							continue;
						}
						if (bParamsSet)
						{
							iCounter++;
							if ( MaxReportVisibleRows != 0 && ( iCounter % MaxReportVisibleRows == 0 ) )
							{
								if (oParamObject==null) oParamObject=new Object()
								oParamObject.bSaveFile=false;
								oParamObject.iStartRow=iFullLoopCounter+1;
								oParamObject.show_table_column_header=(oResParam.oFileObject==null)
								oParamObject.oExcelDoc=oResParam.oFileObject
								oResParam.oFileObject=fnCreateExcelFile(oParamObject,fldParamFormParam,fldDataFormParam)
								fldDataFormParam.Clear();
								iFullLoopCounter=iCounter
							}
						}
					}
					if (bParamsSet)
					{
						if ( MaxReportVisibleRows != 0 && ( iCounter % MaxReportVisibleRows != 0 && oResParam.oFileObject != null ) )
						{
							if (oParamObject==null) oParamObject=new Object()
							oParamObject.bSaveFile=false;
							oParamObject.iStartRow=iFullLoopCounter+1;
							oParamObject.show_table_column_header=(oResParam.oFileObject==null)
							oParamObject.oExcelDoc=oResParam.oFileObject
							oResParam.oFileObject=fnCreateExcelFile(oParamObject,fldParamFormParam,fldDataFormParam)
							fldDataFormParam.Clear();
						}
						oResParam.iCounter=iCounter;
					}
				}


				dataForm.Clear();
				bHasEvents=false;
				strQuery='for $er in event_results'
				strFinalWhere='';
				strWhere=''
				strUnion=''

				if (_params.education_method_id.HasValue)
				{
					bHasEvents=true;
					strQuery=strQuery+', $e in events'
					strUnion=strUnion+( strUnion == '' ? '' : ' and' )+' $er/event_id=$e/id'
					strWhere=strWhere+( strWhere == '' ? '' : ' and' )+' $e/education_method_id='+_params.education_method_id
				}

				if ( _params.education_org_id.HasValue )
				{
					if (!bHasEvents)
					{
						bHasEvents=true;
						strQuery=strQuery+', $e in events'
						strUnion=strUnion+( strUnion == '' ? '' : ' and' )+' $er/event_id=$e/id'
					}
					strWhere = strWhere + ( strWhere == '' ? '' : ' and' ) + ' $e/education_org_id='+_params.education_org_id
				}

				if ( _params.disp_type_id != 'all' )
				{
					if (!bHasEvents)
					{
						bHasEvents=true;
						strQuery=strQuery+', $e in events'
						strUnion=strUnion+( strUnion == '' ? '' : ' and' )+' $er/event_id=$e/id'
					}
					strWhere = strWhere + ( strWhere == '' ? '' : ' and' ) + ' $e/type_id = \'' + _params.disp_type_id + '\''
				}

				if ( _params.disp_status_id != 'all' )
				{
					if (!bHasEvents)
					{
						bHasEvents=true;
						strQuery=strQuery+', $e in events'
						strUnion=strUnion+( strUnion == '' ? '' : ' and' )+' $er/event_id=$e/id'

					}
					strWhere = strWhere + ( strWhere == '' ? '' : ' and' ) + ' $e/status_id = \'' + _params.disp_status_id + '\''
				}

				if ( _params.start_date.HasValue )
				{
					if (!bHasEvents)
					{
						bHasEvents=true;
						strQuery=strQuery+', $e in events'
						strUnion=strUnion+( strUnion == '' ? '' : ' and' )+' $er/event_id=$e/id'
					}
					strWhere = strWhere + ( strWhere == '' ? '' : ' and' ) + ' $e/start_date >= date(\'' + _params.start_date + '\')'
				}

				if ( _params.finish_date.HasValue )
				{
					if (!bHasEvents)
					{
						bHasEvents=true;
						strQuery=strQuery+', $e in events'
						strUnion=strUnion+( strUnion == '' ? '' : ' and' )+' $er/event_id=$e/id'
					}
					strWhere = strWhere + ( strWhere == '' ? '' : ' and' ) + ' $e/start_date <= ' + XQueryLiteral( DateNewTime( _params.finish_date, 23, 59, 59 ) );
				}

				if ( _params.lector_id.HasValue )
				{
					if (!bHasEvents)
					{
						bHasEvents=true;
						strQuery=strQuery+', $e in events'
						strUnion=strUnion+( strUnion == '' ? '' : ' and' )+' $er/event_id=$e/id'
					}
					strQuery=strQuery+', $el in event_lectors'
					strUnion=strUnion+( strUnion == '' ? '' : ' and' )+' $el/event_id=$e/id'
					strWhere = strWhere + ( strWhere == '' ? '' : ' and' ) + ' $el/lector_id=' + _params.lector_id
				}

				if ( _params.event_id.HasValue )
				{
					if (!bHasEvents)
					{
						strWhere=strWhere+( strWhere == '' ? '' : ' and' )+' $er/event_id='+_params.event_id
					}
					else
					{
						strWhere=strWhere+( strWhere == '' ? '' : ' and' )+' $e/id='+_params.event_id
					}
				}

				if (strWhere != '')
				{
					strWhere=' where'+strWhere
				}

				if (strUnion!='')
				{
					strWhere=strWhere+( strWhere == '' ? ' where' : ' and' )+strUnion
				}


				if ( _params.person_id.HasValue )
				{
					fnXQueryMerge( _params.person_id, strWhere, strQuery );
				}
				else if ( _params.org_id.HasValue || _params.parent_object_id.HasValue || _params.group_id.HasValue )
				{
					arrPersonIDs = Array();
					if ( _params.org_id.HasValue || _params.parent_object_id.HasValue )
					{
						curNodeID = _params.parent_object_id.HasValue ? _params.parent_object_id : _params.org_id;

						if ( _params.hier_sub_select )
							arrPersonIDs = tools.get_sub_person_ids_by_subdivision_id( curNodeID );
						else
							arrPersonIDs = ArrayExtract( XQuery( 'for $elem in subs where $elem/parent_id = ' + curNodeID + ' and $elem/type = &quot;position&quot; and $elem/basic_collaborator_id != null() return $elem' ), 'basic_collaborator_id' );
					}

					if ( _params.group_id.HasValue )
					{
						try
						{
							groupDoc = OpenDoc( UrlFromDocID( _params.group_id ) ).TopElem;

							groupPersonsIDArray = ArrayExtract( groupDoc.collaborators, 'collaborator_id' );
							if ( ArrayOptFirstElem( arrPersonIDs ) != undefined )
								arrPersonIDs = arrayCross( arrPersonIDs, groupPersonsIDArray );
							else
								arrPersonIDs = groupPersonsIDArray;
						}
						catch( err )
						{
						}
					}
					arrPersonIDs = ArraySelectDistinct( arrPersonIDs );

					for ( _person_id in arrPersonIDs )
						fnXQueryMerge( _person_id, strWhere, strQuery );
				}
				else
				{
					fnXQueryMerge( '', strWhere, strQuery );
				}

		}
		catch ( err )
		{
			oRes.iErrorCounter=1
			oRes.sErrorText=StrReplace( 'Ошибка при построении отчета: {PARAM1}', '{PARAM1}', err )
		}


		if (oRes.iErrorCounter==0)
		{
			if (oRes.oFileObject!=null)
			{
				oRes.sDataUrl=fnSaveFile(oRes.oFileObject,'Excel');
				if (_params.is_web_client)
				{
					oRes.sDataUrl=UrlFileName(FilePathToUrl(UrlToFilePath(oRes.sDataUrl)))
				}
				oRes.bExcel=true;
			}
			else
			{
				oRes.sDataUrl=fnSaveFile(dataForm.GetXml( { 'tabs': false } ),'Xml');
			}
		}

		return oRes
	"/>


	<profiling_report PROPERTY="1" PARAM="sXmlParam" ALLOW-CALL-FROM-CLIENT="1" EXPR="

			if ( ! LdsIsServer )
				return CallServerMethod( 'tools_report', 'profiling_report ', [ RValue( sXmlParam ),  ] );
			fldParams = OpenDocFromStr( UrlDecode(sXmlParam), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.profiling_report;
			teData = OpenNewDoc( 'x-local://wtv/wtv_form_table_data.xmd' ).TopElem;

			arrFileUrls = ArraySelect( ReadDirectory( 'x-local://Logs' ), 'StrBegins(UrlFileName(This),\'profiling-\')&amp;&amp;UrlPathSuffix(This)==\'.log\'&amp;&amp;!IsDirectory(This)' );
			for ( sFileNameElem in arrFileUrls )
			{
				try
				{
					arrLog = ArraySelectAll( OpenDoc( sFileNameElem, 'format=csv;delim=tab' ).TopElem );
					arrLog = ArraySort( arrLog, 'elem001', '+' );

					sDate = StrRangePos( UrlFileName( sFileNameElem ), 10, 20 );
					bFirst = true;
					oLastElem = ArrayFirstElem( arrLog );
					for ( fldLineElem in arrLog )
					{
						if ( fldLineElem.elem001 == oLastElem.elem001 )
						{
							oLastElem = fldLineElem;
							bFirst = false;
							continue;
						}

						iLastTicks = Int( oLastElem.elem002 );
						iTicks = Int( fldLineElem.elem002 );

						arrFirstField = String( fldLineElem.Child( 0 ) ).split( ' ' );
						sThread = arrFirstField[ 1 ];

						fldRow = teData.rs.AddChild();
						for( i=0; i &lt; 6; i++ )
							fldRow.cs.AddChild().name = 's' + i;

						fldRow.cs.Child( 0 ).t = sDate + 'T' + arrFirstField[ 0 ];
						fldRow.cs.Child( 1 ).t = fldLineElem.elem003;
						fldRow.cs.Child( 2 ).t = sThread;
						fldRow.cs.Child( 3 ).t = fldLineElem.elem004;
						fldRow.cs.Child( 4 ).t = iTicks &gt; iLastTicks ? ( iTicks - iLastTicks ) : ( iLastTicks - iTicks );
						fldRow.cs.Child( 5 ).t = bFirst ? '1' : '0';

						oLastElem = fldLineElem;
						bFirst = true;
					}
				}
				catch ( err )
				{
					alert( err );
				}
			}
			//teData.rs.Sort( 'cs.Child(0).t', '-' );
		//alert(teData.Xml);
			return teData.GetXml( { 'tabs': false } );
	"/>

	<test_person_report PROPERTY="1" PARAM="Ps" ALLOW-CALL-FROM-CLIENT="1" EXPR="
		function fnAddLearnings( arrLearnings )
		{		
			for ( catLearning in arrLearnings )
			{
				_child = Ps.learnings.AddChild();
				_child.AssignElem( catLearning );
				
				if ( Ps.disp_person_list_staff )
				{
					_child.person_list_staff = tools.person_list_staff_by_person_id( catLearning.person_id );
				}
					
				if ( _child.max_score &gt; 0 )
				{
					_child.per_cent = ( _child.score / _child.max_score ) * 100.0;
				}

				try
				{
					_child.person_code = catLearning.person_id.ForeignElem.code;
				}
				catch( ex )
				{
				}

				_child.type = catLearning.Name;
			}
		}

		Ps.learnings.Clear();

		var arrXQueryConditions = [];
		
		if ( Ps.assessment_id != null )
			arrXQueryConditions.push( '$elem/assessment_id = ' + Ps.assessment_id );
		
		if ( Ps.start_date != null )
			arrXQueryConditions.push( '$elem/start_usage_date &gt;= date( \'' + DateNewTime( Ps.start_date ) + '\' )' );
		
		if ( Ps.finish_date != null )
			arrXQueryConditions.push( '$elem/start_usage_date &lt;= date( \'' + DateNewTime( Ps.finish_date, 23, 59, 59 ) + '\' )' );

		var sXQueryConditions = ArrayCount( arrXQueryConditions ) > 0 ? ArrayMerge( arrXQueryConditions, 'This', ' and ' ) : '';

		arrPersons = Array();

		if ( Ps.org_id.HasValue || Ps.parent_object_id.HasValue )
		{
			curNodeID = ( Ps.parent_object_id != null ? Ps.parent_object_id : Ps.org_id );

			if ( Ps.hier_sub_select )
			{
				arrPersonsIDs = ArraySelectDistinct( tools.get_sub_person_ids_by_subdivision_id( curNodeID ) ) ;
			}
			else
			{
				arrSubs = XQuery( 'for $elem in subs where $elem/parent_id = ' + curNodeID + ' and $elem/type = &quot;position&quot; return $elem' );

				arrPersonsIDs = Array();
				count = 0;

				for ( catSub in arrSubs )
				{
					if ( catSub.basic_collaborator_id.HasValue)
					{
						arrPersonsIDs[ count ] = catSub.basic_collaborator_id;
						count++;
					}
				}
				arrPersonsIDs = ArraySelectDistinct( arrPersonsIDs );
			}

			arrPersons = XQuery( 'for $elem in collaborators where MatchSome( $elem/id, ( ' + ArrayMerge( arrPersonsIDs, 'This', ',' ) + ' ) ) return $elem' );
			
		}
		
		if ( Ps.group_id.HasValue )
		{
			arrGroupPersonsIDs = new Array();

			try
			{
				docGroup = OpenDoc( UrlFromDocID( TopElem.group_id ) ).TopElem;
			}
			catch ( error )
			{
				docGroup = undefined;
			}

			if ( docGroup != undefined )
			{
				arrGroupPersonsIDs = ArrayExtract( docGroup.collaborators, 'collaborator_id' );
			}
				
			if ( ArrayCount( arrPersons ) > 0 )
			{
				arrPersons = ArrayIntersect( arrPersons, arrGroupPersonsIDs, 'This.id' );
			}
			else
			{
				arrPersons = XQuery( 'for $elem in collaborators where MatchSome( $elem/id, ( ' + ArrayMerge( arrGroupPersonsIDs, 'This', ',' ) + ' ) ) return $elem' );
			}
		}

		if ( Ps.person_id.HasValue )
		{
			if ( ArrayCount( arrPersons ) > 0 )
			{
				arrPersons = ArraySelect( arrPersons, 'This.id == Ps.person_id' );
			}
			else if ( ! ( Ps.org_id.HasValue || Ps.parent_object_id.HasValue || Ps.group_id.HasValue ) )
			{
				arrPersons = XQuery( 'for $elem in collaborators where $elem/id = ' + Ps.person_id + ' return $elem' );
			}
		}

		if  ( Ps.org_id.HasValue || Ps.parent_object_id.HasValue || Ps.group_id.HasValue || Ps.person_id.HasValue  )
		{
			for ( catPerson in arrPersons )
			{
				if ( catPerson.id != null )
				{
					if ( Ps.disp_learning_type == '(active_test_learnings,test_learnings)' )
					{
						xarrActiveTestLearnings = XQuery( 'for $elem in active_test_learnings where $elem/person_id = ' + catPerson.id + ( sXQueryConditions == '' ? '' : ' and ' ) + sXQueryConditions + ' return $elem' );

						fnAddLearnings( xarrActiveTestLearnings );

						xarrTestLearnings = XQuery( 'for $elem in test_learnings where $elem/person_id = ' + catPerson.id + ( sXQueryConditions == '' ? '' : ' and ' ) + sXQueryConditions + ' return $elem' );

						fnAddLearnings( xarrTestLearnings );
					}
					else
					{
						xarrDispTestLearnings = XQuery( 'for $elem in ' + Ps.disp_learning_type + ' where $elem/person_id = ' + catPerson.id + ( sXQueryConditions == '' ? '' : ' and ' ) + sXQueryConditions + ' return $elem' );

						fnAddLearnings( xarrDispTestLearnings );
					}
				}
			}
		}
		else
		{
			if ( Ps.disp_learning_type == '(active_test_learnings,test_learnings)' )
			{
				xarrActiveTestLearnings = XQuery( ( sXQueryConditions == '' ? 'active_test_learnings' : 'for $elem in active_test_learnings where ' + sXQueryConditions + ' return $elem' ) );

				fnAddLearnings( xarrActiveTestLearnings );

				xarrTestLearnings = XQuery( ( sXQueryConditions == '' ? 'test_learnings' : 'for $elem in test_learnings where ' + sXQueryConditions + ' return $elem' ) );

				fnAddLearnings( xarrTestLearnings );
			}
			else
			{
				xarrDispTestLearnings = XQuery( ( sXQueryConditions == '' ? Ps.disp_learning_type : 'for $elem in ' + Ps.disp_learning_type + ' where ' + sXQueryConditions + ' return $elem' ) );

				fnAddLearnings( xarrDispTestLearnings );
			}
		}

		arrAllLearnings = ArraySort( Ps.learnings, 'person_id', '+' , 'assessment_id', '+' );

		Ps.learnings.Clear();

		i = 0;
		iAllLearningsCount = ArrayCount( arrAllLearnings );
		
		while ( i <= ( iAllLearningsCount - 1 ) )
		{
			iPersonID     = arrAllLearnings[ i ].person_id;
			iAssessmentID = arrAllLearnings[ i ].assessment_id;
			
			j = i;
			
			iMinScore     = 1000000;
			iMaxScore     = 0;
			iSummuryScore = 0;

			_min0  = 1000000;
			_quant = 1;
			
			catMaxScoreLearning = arrAllLearnings[ i ];

			while ( ( j <= ( iAllLearningsCount - 1 ) ) && ( arrAllLearnings[ j ].person_id == iPersonID ) && ( arrAllLearnings[ j ].assessment_id == iAssessmentID ) )
			{	
				if ( arrAllLearnings[ j ].score >= iMaxScore )
				{
					iMaxScore = arrAllLearnings[ j ].score;
					catMaxScoreLearning = arrAllLearnings[ j ];
				}

				if ( ( arrAllLearnings[ j ].score <= iMinScore ) && ( arrAllLearnings[ j ].score != 0 ) )
				{
					iMinScore = arrAllLearnings[ j ].score;
				}
					
				if ( arrAllLearnings[ j ].score <= _min0 )
				{
					_min0 = arrAllLearnings[ j ].score;
				}

				iSummuryScore = iSummuryScore + arrAllLearnings[ j ].score;

				j++;
			}

			_quant = ( j - i );

			_new_learning = Ps.learnings.AddChild();
			_new_learning.AssignElem( catMaxScoreLearning );
			_new_learning.max = iMaxScore;
			_new_learning.min = ( ( iMinScore >= iMaxScore ) ? _min0 : iMinScore );

			try
			{ 
				iAverageScore = ( iSummuryScore / _quant ); 
			} 
			catch ( e ) 
			{ 
				iAverageScore = 0; 
			}

			_new_learning.average = StrReal( iAverageScore, 2, true );
			_new_learning.quantity = _quant;

			i = j;
		}
		
		return Ps;
		
		//Ps.learnings.Sort( Ps.sort_type_id, '+' );
	"/>


	<educ_plan_report PROPERTY="1" PARAM="Ps" ALLOW-CALL-FROM-CLIENT="1" EXPR="
		
		Ps.educ_plans.Clear();
		Ps.education_methods.Clear();
		
		// TopElem

		function getForeignElem(field,strCatalog)
		{
			foreignElem = undefined;
			try
			{
				foreignElem = field.ForeignElem;
			}
			catch ( ex1 )
			{
				try
				{
					foreignElem = ArrayFirstElem( XQuery( 'for $obj in ' + strCatalog + 's where $obj/id = ' +Int(field)+ ' return $obj' ) );
				}
				catch ( ex2 )
				{
					foreignElem = undefined;
				}
			}
			return foreignElem;
		}
		
		function fill_string( PROGRAM_CHILD,PARENT,USE_PARENT )
		{
			if (PROGRAM_CHILD.object_id.HasValue)
			{
				if ( (PROGRAM_CHILD.type == 'course'||PROGRAM_CHILD.type == 'assessment') && PROGRAM_CHILD.result_object_id.HasValue)
				{
					fldCurLearning=getForeignElem(PROGRAM_CHILD.result_object_id,PROGRAM_CHILD.result_type)
					if (fldCurLearning!=undefined)
					{
						PROGRAM_CHILD.active_learning_id =fldCurLearning.PrimaryKey;
						if ( fldCurLearning.max_end_date.HasValue )  
							PROGRAM_CHILD.plan_finish_date = fldCurLearning.max_end_date;
						if ( fldCurLearning.last_usage_date.HasValue )
							PROGRAM_CHILD.fact_start_date = fldCurLearning.last_usage_date;
					}
					else
					{
						sQuery = 'for $elem in '+StrReplace(PROGRAM_CHILD.result_type,'active_','')+'s where $elem/'+PROGRAM_CHILD.type+'_id='+PROGRAM_CHILD.object_id+' and $elem/person_id='+PARENT.person_id+' and $elem/'+PROGRAM_CHILD.result_type+'_id='+PROGRAM_CHILD.result_object_id+' order by $elem/start_usage_date descending return $elem';
						sQuery = 'for $elem in '+StrReplace(PROGRAM_CHILD.result_type,'active_','')+'s where $elem/'+PROGRAM_CHILD.type+'_id='+PROGRAM_CHILD.object_id+' and $elem/person_id='+PARENT.person_id+' order by $elem/start_usage_date descending return $elem';

						fldCurLearning = ArrayOptFirstElem(XQuery(sQuery));

						if ( fldCurLearning!=undefined  )
						{
							PROGRAM_CHILD.learning_id =fldCurLearning.PrimaryKey;
						}
					}
					
					if (fldCurLearning!=undefined)
					{
						PROGRAM_CHILD.plan = true;	
						PROGRAM_CHILD.fact = (fldCurLearning.Name==StrReplace(PROGRAM_CHILD.result_type,'active_',''));
						
						if(USE_PARENT)
						{
							PARENT.plan_count++;
							if (PROGRAM_CHILD.fact)
							{
								PARENT.fact_count++;
							}
						}
						PROGRAM_CHILD.fact_start_date = fldCurLearning.start_usage_date;
						PROGRAM_CHILD.fact_finish_date = fldCurLearning.last_usage_date;
						PROGRAM_CHILD.plan_start_date = fldCurLearning.start_usage_date;
						PROGRAM_CHILD.score = fldCurLearning.score;
						PROGRAM_CHILD.state_id = fldCurLearning.state_id;
					}
				}
				else if (PROGRAM_CHILD.type == 'education_method')
				{			
					arrEventResults=XQuery('for $elem in event_results where $elem/person_id='+PARENT.person_id+' order by modification_date descending return $elem');
					
					fldEvent=undefined;
					fldResultAssised=undefined;
					fldResultNotAssised=undefined;
					for (fldResult in arrEventResults)
					{
						fldFoundEvent=ArrayOptFirstElem(XQuery('for $elem in events where $elem/education_method_id='+PROGRAM_CHILD.object_id+' and $elem/id='+fldResult.event_id+' and $elem/status_id!=\'cancel\' order by finish_date descending return $elem'))

						if (fldFoundEvent!=undefined)
						{
							if (!fldResult.is_assist&&fldResultNotAssised==undefined)
							{
								fldResultNotAssised=fldResult
								fldEvent=fldFoundEvent;
							}
							else
							{
								fldResultNotAssised=fldResult;
								fldResultAssised=fldResult;
								fldEvent=fldFoundEvent;
								break;
							}
						}
					}
					
					if (fldEvent!=undefined)
					{
						if (fldResultNotAssised!=undefined)
						{
							PROGRAM_CHILD.plan = true;
							if(USE_PARENT)
							{
								PARENT.plan_count++;
							}
							PROGRAM_CHILD.plan_start_date = fldEvent.start_date;
							PROGRAM_CHILD.plan_finish_date = fldEvent.finish_date;
							PROGRAM_CHILD.result_object_id=fldEvent.id;
						}
						if ( fldResultAssised!=undefined )
						{
							PROGRAM_CHILD.result_object_id=fldEvent.id;
							PROGRAM_CHILD.score = fldResultAssised.score;
							if ( fldEvent.status_id == 'close' )
							{
								PROGRAM_CHILD.fact = true;
								if(USE_PARENT)
								{
									PARENT.fact_count++;
								}
								PROGRAM_CHILD.fact_start_date = fldEvent.start_date;
								PROGRAM_CHILD.fact_finish_date = fldEvent.finish_date;
								PROGRAM_CHILD.state_id = 4;
							}
						}
						PROGRAM_CHILD.state_id=( fldEvent.status_id == 'close' ||fldEvent.status_id == 'cancel' ? 2 : ( fldEvent.status_id == 'active' ? 1 : 0 ) )
					}
				}
			}
			else
			{
				PROGRAM_CHILD.plan = true;	
				PROGRAM_CHILD.fact = PROGRAM_CHILD.state_id!=0&&PROGRAM_CHILD.state_id!=1&&PROGRAM_CHILD.state_id!=5;
				
				if(USE_PARENT)
				{
					PARENT.plan_count++;
					if (PROGRAM_CHILD.fact)
					{
						PARENT.fact_count++;
					}
				}
			}
		}
		
		function add_person( PERSON_ID,WHERE_STR )
		{
	
			WHERE_DATE = '';
			if (Ps.plan_start_date.HasValue && Ps.plan_finish_date.HasValue)
			{
				WHERE_DATE += ' and $elem/plan_date >= ' + XQueryLiteral(Ps.plan_start_date) + ' and $elem/plan_date <= ' + XQueryLiteral(Ps.plan_finish_date);
			}

			if (Ps.fact_start_date.HasValue && Ps.fact_finish_date.HasValue)
			{
				WHERE_DATE += ' and $elem/fact_finish_date >= ' + XQueryLiteral(Ps.fact_start_date) + ' and $elem/fact_finish_date <= ' + XQueryLiteral(Ps.fact_finish_date);
			}

			sQuery = 'for $elem in education_plans where $elem/person_id = ' + PERSON_ID + ' ' + WHERE_STR + WHERE_DATE + ' return $elem';

			_result_array = XQuery( sQuery );
				
			for ( _result in _result_array )
			{
				_child = Ps.educ_plans.AddChild();
				_child.AssignElem( _result );

				educ_planDoc = OpenDoc( UrlFromDocID( _result.PrimaryKey ) ).TopElem;
				_child.person_id = educ_planDoc.person_id;
				_child.person_fullname = educ_planDoc.person_fullname;
				_child.person_position_name = educ_planDoc.person_position_name;
				_child.person_subdivision_name = educ_planDoc.person_subdivision_name;
				
				try
				{
					_child.person_code=educ_planDoc.person_id.ForeignElem.code						
				}
				catch(ex)
				{
				}
				
				for ( _program in educ_planDoc.programs )
				{
					_program_child = _child.programs.AddChild();
					_program_child.AssignElem( _program );

					if (_program_child.type=='folder')
					{
						_program_child.fact_start_date = _program.create_date;
						_program_child.fact_finish_date = educ_planDoc.finish_date;
						_program_child.plan_start_date = educ_planDoc.plan_date;	
					}
					else if (_program_child.type=='event')
					{
						_program_child.type='education_method'
						_program_child.object_id=_program_child.education_method_id;
					}

					if (_program_child.type=='education_method'||_program_child.type=='course')
					{
						fldForeignElem=getForeignElem(_program_child.object_id,_program_child.type)
						
						if (fldForeignElem!=undefined)
						{
							if (fldForeignElem.Name=='education_method')
							{
								try
								{
									cost=fldForeignElem.cost
									person_num=fldForeignElem.person_num
									cost_type=fldForeignElem.cost_type
									if (cost_type=='person')
									{
										total_cost=Real(cost)
									}
									else if (cost_type=='group')
									{
										total_cost=Real(StrReal(Real(cost)/Real(person_num),2))
									}
									_program_child.cost=total_cost;
									_program_child.currency=fldForeignElem.currency
								}
								catch(ex)
								{
								}
							}
							else if (fldForeignElem.Name=='course')
							{
								try
								{
									_program_child.cost=Real(fldForeignElem.price);
								}
								catch(ex)
								{
								}
							}
						}
					}
					fill_string( _program_child,_child,true )
		
				}	
			}
		}
		
		function add_person_new( PERSON_ID,WHERE_STR,WHERE_REQ_STR,USE_PLAN,USE_REQUEST )
		{
			if (USE_PLAN)
			{
	
				WHERE_DATE = '';
				if (Ps.plan_start_date.HasValue && Ps.plan_finish_date.HasValue)
				{
					WHERE_DATE += ' and $elem/plan_date >= ' + XQueryLiteral(Ps.plan_start_date) + ' and $elem/plan_date <= ' + XQueryLiteral(Ps.plan_finish_date);
				}

				if (Ps.fact_start_date.HasValue && Ps.fact_finish_date.HasValue)
				{
					WHERE_DATE += ' and $elem/fact_finish_date >= ' + XQueryLiteral(Ps.fact_start_date) + ' and $elem/fact_finish_date <= ' + XQueryLiteral(Ps.fact_finish_date);
				}
				
				sQuery = 'for $elem in education_plans where $elem/person_id = ' + PERSON_ID + '' + WHERE_STR + WHERE_DATE + ' return $elem';
				
				arrEducationPlans = XQuery( sQuery );

				//alert('arrEducationPlans='+ArrayCount(arrEducationPlans))
				for ( iEducationPlanElem in arrEducationPlans )
				{
					try
					{	

						try
						{
							arrEducationPlanCollaborators = XQuery( 'for $elem in education_plan_collaborators where $elem/education_plan_id = ' + iEducationPlanElem.PrimaryKey+ ' return $elem' );
						}
						catch(ex)
						{
							arrEducationPlanCollaborators = [];
						}
						if (ArrayOptFirstElem(arrEducationPlanCollaborators)!=undefined)
						{
							teEduPlan = OpenDoc( UrlFromDocID( iEducationPlanElem.PrimaryKey ) ).TopElem;
						}
						else
						{
							continue
						}
						//alert('arrEducationPlanCollaborators='+ArrayCount(arrEducationPlanCollaborators))
						for (iEducationPlanCollaboratorElem in teEduPlan.programs)
						{
							if (iEducationPlanCollaboratorElem.type=='folder')
							{
								continue;
							}
							iEduObjectID=OptInt((iEducationPlanCollaboratorElem.education_method_id.HasValue?iEducationPlanCollaboratorElem.education_method_id:iEducationPlanCollaboratorElem.object_id),null)
	//alert('iEduObjectID='+iEduObjectID)

							if (iEduObjectID!=null)
							{
								curEduProg=ArrayOptFind(Ps.education_methods,'id=='+iEduObjectID);
							}
							else
							{
								continue;
							}
							curEduProg=ArrayOptFind(Ps.education_methods,'id=='+iEduObjectID);
							if (curEduProg==undefined)
							{
								curEduProg=Ps.education_methods.AddChild()
								curEduProg.AssignElem( iEducationPlanCollaboratorElem );
								curEduProg.id=iEduObjectID
								if (curEduProg.type=='event')
								{
									curEduProg.type='education_method'
								}
								
								
								if (curEduProg.type=='education_method'||curEduProg.type=='course')
								{
									fldForeignElem=getForeignElem(curEduProg.object_id,curEduProg.type)
									if (fldForeignElem!=undefined)
									{
										if (fldForeignElem.Name=='education_method')
										{
											try
											{
												cost=fldForeignElem.cost
												person_num=fldForeignElem.person_num
												cost_type=fldForeignElem.cost_type
												if (cost_type=='person')
												{
													total_cost=Real(cost)
												}
												else if (cost_type=='group')
												{
													total_cost=Real(StrReal(Real(cost)/Real(person_num),2))
												}
												curEduProg.cost=total_cost;
												curEduProg.currency=fldForeignElem.currency
											}
											catch(ex)
											{
											}
										}
										else if (fldForeignElem.Name=='course')
										{
											try
											{
												curEduProg.cost=Real(fldForeignElem.price);
											}
											catch(ex)
											{
											}
										}
									}
								}
							}
							
							curPerson=ArrayOptFind(curEduProg.persons,'person_id=='+iEducationPlanElem.person_id);
							if (curPerson==undefined)
							{
								curPerson=curEduProg.persons.AddChild()
								curPerson.person_id=teEduPlan.person_id
								curPerson.person_fullname=teEduPlan.person_fullname
								try
								{
									curPerson.person_position_name=teEduPlan.person_id.ForeignElem.position_name						
								}
								catch(ex)
								{
								}
								
								try
								{
									curPerson.person_code=teEduPlan.person_id.ForeignElem.code						
								}
								catch(ex)
								{
								}
								curPerson.person_subdivision_name =teEduPlan.person_subdivision_name 
							
								//curPerson=ArrayOptFind(curEduProg.persons,'person_id=='+iEducationPlanCollaboratorElem.person_id);
							}
							
							curReason=ArrayOptFind(curPerson.reasons,'id=='+iEducationPlanElem.id);
							if (curReason==undefined)
							{
								curReason=curPerson.reasons.AddChild()
								curReason.AssignElem( iEducationPlanCollaboratorElem );
								if (curReason.type=='event')
								{
									curReason.type='education_method'
								}
								curReason.id=iEducationPlanElem.id
								curReason.name=iEducationPlanElem.name
								curReason.reason_object_id=iEducationPlanElem.id
								curReason.reason_object_type='education_plan';
								
								fill_string( curReason,teEduPlan,false )
								
								//curPerson=ArrayOptFind(curEduProg.persons,'person_id=='+iEducationPlanCollaboratorElem.person_id);
							}
							
						}
					}
					catch(ex)
					{
						alert(ex)
					}
				}
			}
			
			if (USE_REQUEST)
			{

				WHERE_DATE = ''
				/*
				if (Ps.plan_start_date.HasValue && Ps.plan_finish_date.HasValue)
				{
					WHERE_DATE += ' and $elem/close_date >= ' + XQueryLiteral(Ps.plan_start_date) + ' and $elem/close_date <= ' + XQueryLiteral(Ps.plan_finish_date);
				}
				*/

				if (Ps.fact_start_date.HasValue && Ps.fact_finish_date.HasValue)
				{
					WHERE_DATE += ' and $elem/close_date >= ' + XQueryLiteral(Ps.fact_start_date) + ' and $elem/close_date <= ' + XQueryLiteral(Ps.fact_finish_date);
				}

				//QueryString='for $elem in requests where $elem/type=\'education_method\' and $elem/request_type_id='+Ps.request_type_id+' and $elem/status_id=\'close\' and $elem/budget_period_id='+Ps.budget_period_id+' return $elem'
				sQuery = 'for $elem in requests where $elem/type=\'education_method\' and $elem/status_id=\'close\'' + WHERE_STR + '' + WHERE_REQ_STR + WHERE_DATE + ' return $elem';

				arrReqs = XQuery(sQuery);
				//alert(QueryString)
				for (iReqElem in arrReqs)
				{
					if (iReqElem.is_group)
					{
						arrRequestData = XQuery( 'for $elem in request_collaborators where $elem/request_id=' + iReqElem.id + ' and $elem/person_id = ' + PERSON_ID + ' return $elem');
					}
					else
					{
						if (iReqElem.person_id == PERSON_ID)
						{
							arrRequestData = Array();
							NewElem = new Object;
							NewElem.request_id = iReqElem.id;
							NewElem.code = iReqElem.code;
							NewElem.person_id = iReqElem.person_id;
							NewElem.person_fullname = iReqElem.person_fullname;
							NewElem.object_id = iReqElem.object_id;
							NewElem.object_name = iReqElem.object_name;
							arrRequestData[0] = NewElem;


						}
						else
						{
							continue;
						}
					}

					oReqElem = tools.open_doc(iReqElem.id);
					oReqElemTE = oReqElem.TopElem;

					//alert(ArrayCount(arrRequestData))
					for (iRequestDataElem in arrRequestData)
					{
				
						fldObject = iRequestDataElem.object_id.OptForeignElem

						if (fldObject == undefined)
						{
							continue;
						}
						if (fldObject.type == 'course')
						{
							fldObject = fldObject.course_id.OptForeignElem
						}
						
						if (fldObject == undefined)
						{
							continue;
						}
						curEduProg=ArrayOptFind(Ps.education_methods,'id=='+fldObject.id);
						if (curEduProg == undefined)
						{
							curEduProg = Ps.education_methods.AddChild()
							curEduProg.id = fldObject.id;
							curEduProg.name = fldObject.name;
							curEduProg.type = fldObject.Name
							
							if (curEduProg.type == 'education_method'||curEduProg.type == 'course')
							{
								if (curEduProg.type == 'education_method')
								{
									try
									{
										cost = fldObject.cost
										person_num = fldObject.person_num
										cost_type = fldObject.cost_type
										if (cost_type == 'person')
										{
											total_cost = Real(cost)
										}
										else if (cost_type == 'group')
										{
											total_cost = Real(StrReal(Real(cost)/Real(person_num),2))
										}
										curEduProg.cost = total_cost;
										curEduProg.currency = fldObject.currency
									}
									catch(ex)
									{
									}
								}
								else if (curEduProg.type == 'course')
								{
									try
									{
										curEduProg.cost = Real(fldObject.price);
									}
									catch(ex)
									{
									}
								}
							}
						}
						
						curPerson = ArrayOptFind(curEduProg.persons,'person_id=='+iRequestDataElem.person_id);
						if (curPerson == undefined)
						{
							curPerson = curEduProg.persons.AddChild()
							curPerson.person_id = iRequestDataElem.person_id
							curPerson.person_fullname = iRequestDataElem.person_fullname
							try
							{
								curPerson.person_position_name = iRequestDataElem.person_id.ForeignElem.position_name
								curPerson.person_subdivision_name = iRequestDataElem.person_id.ForeignElem.position_parent_name 
							}
							catch(ex)
							{
							}
							try
							{
								curPerson.person_code = iRequestDataElem.person_id.ForeignElem.code						
							}
							catch(ex)
							{
							}
							//curPerson=ArrayOptFind(curEduProg.persons,'person_id=='+iEducationPlanCollaboratorElem.person_id);
						}
						
						curReason = ArrayOptFind(curPerson.reasons,'id=='+iRequestDataElem.request_id);
						if (curReason == undefined)
						{
							curReason = curPerson.reasons.AddChild();
							curReason.id = iRequestDataElem.request_id;
							curReason.name = ms_tools.get_const('c_request') + ' ' + iRequestDataElem.code;
							curReason.reason_object_id = iRequestDataElem.request_id;
							curReason.reason_object_type = 'request';
							curReason.education_method_id = curEduProg.id;
							curReason.type = curEduProg.type;

								curReason.plan_finish_date = StrDate(oReqElemTE.plan_close_date, false, false);
								curReason.fact_finish_date = StrDate(oReqElemTE.close_date, false, false);

							fill_string( curReason, iRequestDataElem, false )
							
							//curPerson=ArrayOptFind(curEduProg.persons,'person_id=='+iEducationPlanCollaboratorElem.person_id);
						}					
					}
				}
			}	
		}
		
		where_str = '';
		if (Ps.budget_period_id.HasValue)
		{
			where_str = ' and $elem/budget_period_id='+Ps.budget_period_id
		}
		
		where_req_str = '';
			
		if  (Ps.group_type=='education_plan')
		{
			Ps.educ_plans.Clear();
		}
		else if (Ps.group_type=='education_method')
		{
			use_requests=false;
			use_education_plans=false
			
			if (Ps.reason_type=='education_plan')
			{
				use_education_plans=true;
			}
			else if (Ps.reason_type=='request')
			{
				use_requests=true;
			}
			else
			{
				use_requests=true;
				use_education_plans=true;
			}
			
			if (Ps.request_type_id.HasValue&&use_requests)
			{
				where_req_str=' and $elem/request_type_id='+Ps.request_type_id
			}
			//Ps.education_methods.Clear();
		}
		
		if ( Ps.type == 'subdivision' )
		{
			if (Ps.parent_object_id.HasValue)
				personIdArray = tools.get_sub_person_ids_by_subdivision_id( Ps.parent_object_id );
			else 
				if (Ps.org_id.HasValue)
					personIdArray = tools.get_sub_person_ids_by_subdivision_id( Ps.org_id );
			for (_personID in personIdArray)
			{
				if  (Ps.group_type=='education_plan')
				{
					add_person( _personID,where_str );
				}
				else if (Ps.group_type=='education_method')
				{
					add_person_new( _personID,where_str,where_req_str,use_education_plans,use_requests );
				}
			}
		}
		else if ( Ps.type == 'group' )
		{
			groupDoc = OpenDoc( UrlFromDocID( Ps.group_id ) ).TopElem;
			for ( _person in groupDoc.collaborators )
			{
				if  (Ps.group_type=='education_plan')
				{
					add_person( _person.PrimaryKey,where_str );
				}
				else if (Ps.group_type=='education_method')
				{
					add_person_new( _person.PrimaryKey,where_str,where_req_str,use_education_plans,use_requests );
				}
			}
		}

		
		if  (Ps.group_type=='education_plan')
		{
			Ps.educ_plans.Sort( Ps.sort_type_id, '+' );
		}
		else if (Ps.group_type=='education_method')
		{
			Ps.education_methods.Sort( 'name', '+' );
			//_PATH = 'C:\\EDUPLAN.txt';
		}
		return Ps;
	"/>

	<learning_dynamics_report PROPERTY="1" PARAM="sParams" ALLOW-CALL-FROM-CLIENT="1" EXPR="

		if ( ! LdsIsServer )
			return CallServerMethod( 'tools_report', 'learning_dynamics_report', [ RValue( sParams ),  ] );

		var oParams = OpenDocFromStr( UrlDecode( sParams ), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.learning_dynamics_report;

		var arrCatalogs = new Array();

		bShowAlert = oParams.show_alert;

		arrCatalogs.push( ( oParams.block_name == 'test' ? 'test_' : '' ) + 'learnings' );

		if ( ArrayOptFind( oParams.columns, 'This.name == \'finished\' || This.name == \'assigned\' || This.name == \'not_finished_in_time\' || This.name == \'finished_in_time\' || This.name == \'passed_percent\'' ) != undefined )
		{
			arrCatalogs.push( 'active_' + ( oParams.block_name == 'test' ? 'test_' : '' ) + 'learnings' );
		}

		function fnXQueryMerge( iPersonID, sCondition )
		{
			var arrResult = new Array();

			sResultCondition = iPersonID == '' ? '' : ' $elem/person_id = ' + iPersonID;
			sResultCondition += ( sCondition != '' &amp;&amp; sResultCondition != '' ? ' and' : '' ) + sCondition;

			for ( sCatalog in arrCatalogs )
			{
				strQuery = 'for $elem in ' + sCatalog + ( sResultCondition == '' ? '' : ' where' ) + sResultCondition + ' return $elem';
				
				if ( bShowAlert ) alert( strQuery )
				
				arrResult = ArrayUnion( arrResult, XQuery( strQuery ) );
			}

			return arrResult;
		}

		dataForm = OpenNewDoc( 'x-local://wtv/wtv_form_table_data.xmd' ).TopElem;

		arrResult = Array();

		arrPersonsIDs = Array();

		_where_str = 'where $elem/start_usage_date != null()';

		if ( oParams.block_name == 'test' )
		{
			_where_str = oParams.assessment_id.HasValue ? ' $elem/assessment_id = ' + oParams.assessment_id : '';
		}
		else
		{
			if ( oParams.disp_learning_prog)
			{
				if ( oParams.education_program_id.HasValue )
				{
					_where_program_str = ' where $elem/education_program_id = ' + oParams.education_program_id;

					arrEducationProgram = XQuery( 'for $elem in education_program_education_methods ' + _where_program_str + ' return $elem' );

					for ( iEducationProgramElem in arrEducationProgram )
					{
						try
						{
							if ( iEducationProgramElem.type == 'course' && iEducationProgramElem.education_method_id.ForeignElem.course_id.HasValue )
							{
								_where_str += ( _where_str == '' ? '' : ' or ' ) + ' $elem/course_id = ' + iEducationProgramElem.education_method_id.ForeignElem.course_id;
							}
						}
						catch(ex)
						{
						}
					}

					if ( _where_str != '' )
					{
						_where_str = '(' + _where_str + ')';
					}
				}
			}
			else
			{
				_where_str = oParams.course_id.HasValue ? ' $elem/course_id = ' + oParams.course_id : '';
			}
		}

		_where_str += oParams.start_date.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_usage_date &gt;= date( \'' + oParams.start_date + '\' )' : '';
		_where_str += oParams.finish_date.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_usage_date &lt;= date( \'' + oParams.finish_date + '\' )' : '';

		if ( oParams.person_id.HasValue )
		{
			arrResult = fnXQueryMerge( oParams.person_id, _where_str );
		}
		else if ( oParams.org_id.HasValue || oParams.parent_object_id.HasValue || oParams.group_id.HasValue )
		{
			if ( oParams.org_id.HasValue || oParams.parent_object_id.HasValue )
			{
				curNodeID = oParams.parent_object_id.HasValue ? oParams.parent_object_id : oParams.org_id;

				if ( oParams.hier_sub_select )
					arrPersonsIDs = tools.get_sub_person_ids_by_subdivision_id( curNodeID );
				else
					arrPersonsIDs = ArrayExtract( XQuery( 'for $elem in subs where $elem/parent_id = ' + curNodeID + ' and $elem/type = &quot;position&quot; and $elem/basic_collaborator_id != null() return $elem' ), 'basic_collaborator_id' );
			}

			if ( oParams.group_id.HasValue )
			{
				try
				{
					teGroup = OpenDoc( UrlFromDocID( oParams.group_id ) ).TopElem;

					groupPersonsIDArray = ArrayExtract( teGroup.collaborators, 'collaborator_id' );
					if ( ArrayOptFirstElem( arrPersonsIDs ) != undefined )
						arrPersonsIDs = arrayCross( arrPersonsIDs, groupPersonsIDArray );
					else
						arrPersonsIDs = groupPersonsIDArray;
				}
				catch( err )
				{
				}
			}

			arrPersonsIDs = ArraySelectDistinct( arrPersonsIDs );

			for ( _person_id in arrPersonsIDs )
				arrResult = ArrayUnion( arrResult, fnXQueryMerge( _person_id, _where_str ) );
		}
		else
		{
			arrResult = fnXQueryMerge( '', _where_str );
		}

			function fnGetPeriod(dDateParam,strTypeParam)
			{
				var iReturn=0
				if (strTypeParam=='year')
				{
					iReturn=Year(dDateParam)
				}
				else if (strTypeParam=='quarter'||strTypeParam=='month')
				{
					iReturn=Month(dDateParam)
					if (strTypeParam=='quarter')
					{
						if (iReturn==1||iReturn==2||iReturn==3)
						{
							iReturn=1
						}
						else if (iReturn==4||iReturn==5||iReturn==6)
						{
							iReturn=2
						}
						else if (iReturn==7||iReturn==8||iReturn==9)
						{
							iReturn=3
						}
						else if (iReturn==10||iReturn==11||iReturn==12)
						{
							iReturn=4
						}
					}
				}
				return iReturn
			}

			function fnGetPeriodDate( iPeriodIndexParam, iYearParam, strTypeParam, strDateTypeParam )
			{
				var dReturn = 0;

				if ( strTypeParam == 'year' )
				{
					if ( strDateTypeParam == 'start' )
						dReturn = DateNewTime( Date( iYearParam, 01, 01 ), 00, 00, 00 );
					else
						dReturn = DateNewTime( Date( iYearParam, 12, 31 ), 23, 59, 59 );
				}
				else if ( strTypeParam == 'month' )
				{
					if ( strDateTypeParam == 'start' )
					{
						dReturn = DateNewTime( Date( iYearParam, iPeriodIndexParam, 01 ),00, 00, 00 )
					}
					else
					{
						dReturn=DateNewTime(Date( (iYearParam+(iPeriodIndexParam!=12?0:1)), (iPeriodIndexParam!=12?iPeriodIndexParam+1:1), 01 ),00,00,00)
					}
				}
				else if (strTypeParam=='quarter')
				{
					if (iPeriodIndexParam==1)
					{
						dReturn=DateNewTime(Date( iYearParam, (strDateTypeParam=='start'?1:4), 01 ),00,00,00)
					}
					else if (iPeriodIndexParam==2)
					{
						dReturn=DateNewTime(Date( iYearParam, (strDateTypeParam=='start'?4:7), 01 ),00,00,00)
					}
					else if (iPeriodIndexParam==3)
					{
						dReturn=DateNewTime(Date( iYearParam, (strDateTypeParam=='start'?7:10), 01 ),00,00,00)
					}
					else if (iPeriodIndexParam==4)
					{
						dReturn=DateNewTime(Date( iYearParam+(strDateTypeParam=='start'?0:1), (strDateTypeParam=='start'?10:1), 01 ),00,00,00)
					}
				}
				return dReturn
			}

			if ( ! oParams.start_date.HasValue )
			{
				fldFirstElem = ArrayOptFirstElem( XQuery( 'for $elem in '+ ( oParams.block_name == 'test' ? 'test_learnings' : 'learnings' ) + ' where $elem/creation_date != null() order by creation_date descending return $elem' ) );
				if ( fldFirstElem != undefined )
				{
					oParams.start_date = fldFirstElem.creation_date;
				}
				else
				{
					oParams.start_date = Date();
				}
			}

			if ( ! oParams.finish_date.HasValue )
			{
				oParams.finish_date = Date();
			}

			if ( oParams.start_date.HasValue && oParams.finish_date.HasValue && oParams.start_date <= oParams.finish_date )
			{
				strMonthNames = 'c_january;c_february;c_march;c_april;c_may;c_june;c_july;c_august;c_september;c_october;c_november;c_december';
				arrMonthNames = strMonthNames.split( ';' );
				arrPeriods = [];

				iStartPeriod=fnGetPeriod(oParams.start_date,oParams.time_period_type)
				iPeriodStap=(oParams.time_period_type=='month'?12:(oParams.time_period_type=='quarter'?4:0))
				iPeriodCount=(fnGetPeriod(oParams.finish_date,oParams.time_period_type)-iStartPeriod)+iPeriodStap*(Year(oParams.finish_date)-Year(oParams.start_date))
				iYear=Year(oParams.start_date)

				iPeriodInd = iStartPeriod;

				for (i=iStartPeriod;i<=iStartPeriod+iPeriodCount;i++)
				{
					fldPeriod = new Object();
					fldPeriod.period_start_date = fnGetPeriodDate( iPeriodInd, iYear, oParams.time_period_type, 'start' );
					fldPeriod.period_end_date = fnGetPeriodDate( iPeriodInd, iYear, oParams.time_period_type, 'end' );
					fldPeriod.global_period_id = DateToRawSeconds( fldPeriod.period_start_date );
					
					if ( oParams.time_period_type == 'month' )
					{
						fldPeriod.global_period_name = ms_tools.get_const( arrMonthNames[ iPeriodInd - 1 ] ) + ' ' + iYear;
					}
					else if ( oParams.time_period_type == 'quarter' )
					{
						fldPeriod.global_period_name = iPeriodInd + ' ' + ms_tools.get_const( 'kvartal' ) + ' ' + iYear;
					}
					else if ( oParams.time_period_type == 'year' )
					{
						fldPeriod.global_period_name = iYear;
					}

					for ( fldColumn in oParams.columns )
					{
						if ( fldColumn.name == '0' )
						{
							fldPeriod.SetProperty( fldColumn.name, fldPeriod.global_period_name )
						}
						else
						{
							fldPeriod.SetProperty( fldColumn.name, 0 );

							if ( fldColumn.name == 'passed_percent' || fldColumn.name == 'average_score' )
							{
								fldPeriod.SetProperty( fldColumn.name + '_counter', 0 );
							}
						}
					}

					arrPeriods.push( fldPeriod );

					iPeriodInd++;

					if ( iPeriodInd > iPeriodStap )
					{
						iPeriodInd = 1;
						iYear = iYear + 1;
					}
				}

				for ( fldResult in arrResult )
				{
					dStartUsageDate = oParams.start_date;

					if ( fldResult.start_usage_date.HasValue )
					{
						dStartUsageDate = fldResult.start_usage_date;
					}
					else if ( fldResult.creation_date.HasValue )
					{
						dStartUsageDate = fldResult.creation_date;
					}

					fldPeriod = ArrayOptFind( arrPeriods, 'This.period_start_date <= Date( \'' + dStartUsageDate + '\' ) && This.period_end_date >= Date( \'' + dStartUsageDate + '\' )' )

					if ( fldPeriod != undefined )
					{
						if ( bShowAlert )
						{
							alert(fldResult.id+' '+fldResult.Name+' '+fldResult.state_id+' '+fldResult.state_id.ForeignElem.name+' '+fldPeriod.global_period_name+' '+fldPeriod.period_start_date+' '+fldPeriod.period_end_date)
						}

						for (fldColumn in oParams.columns)
						{
							switch( fldColumn.name )
							{
								case 'finished':
								{
									if ( fldResult.Name == 'learning' || fldResult.Name == 'test_learning' || ( fldResult.Name == 'active_learning' && ( fldResult.state_id == 2 || fldResult.state_id == 4 ) ) || ( fldResult.Name == 'active_test_learning' && ( fldResult.state_id == 2 || fldResult.state_id == 4 ) ) )
									{
										iValue = fldPeriod.GetProperty( fldColumn.name );
										iValue++;

										fldPeriod.SetProperty( fldColumn.name, iValue );
									}
									break;
								}
								case 'assigned':
								{
									iValue = fldPeriod.GetProperty( fldColumn.name )
									iValue++;

									fldPeriod.SetProperty( fldColumn.name, iValue );
									break;
								}
								case 'finished_in_time':
								{
									if (fldResult.max_end_date.HasValue&&(fldResult.max_end_date>=dStartUsageDate)&&(fldResult.Name=='learning'||fldResult.Name=='test_learning'||(fldResult.Name=='active_learning'&&(fldResult.state_id==2||fldResult.state_id==4))||(fldResult.Name=='active_test_learning'&&(fldResult.state_id==2||fldResult.state_id==4))))
									{
										iValue=fldPeriod.GetProperty(fldColumn.name);
										iValue++;

										fldPeriod.SetProperty(fldColumn.name,iValue)
									}
									break;
								}
								case 'passed':
								case 'passed_percent':
								{
									if ((fldResult.Name=='learning'||fldResult.Name=='test_learning')&&fldResult.state_id==4)
									{
										iValue=fldPeriod.GetProperty(fldColumn.name);
										iValue++;

										fldPeriod.SetProperty(fldColumn.name,iValue)
									}
									if (fldColumn.name=='passed_percent')
									{
										iCounter=fldPeriod.GetProperty(fldColumn.name+'_counter')
										iCounter++;

										fldPeriod.SetProperty(fldColumn.name+'_counter',iCounter)
									}
									break;
								}
								case 'not_finished_in_time':
								{
									if (fldResult.max_end_date.HasValue&&(fldResult.max_end_date<=dStartUsageDate)&&(fldResult.Name=='learning'||fldResult.Name=='test_learning'||(fldResult.Name=='active_learning')||(fldResult.Name=='active_test_learning')))
									{
										iValue=fldPeriod.GetProperty(fldColumn.name);
										iValue++;

										fldPeriod.SetProperty(fldColumn.name,iValue)
									}
									break;
								}
								case 'average_score':
								{
									if (fldResult.Name=='learning'||fldResult.Name=='test_learning'||(fldResult.Name=='active_learning'&&(fldResult.state_id==2||fldResult.state_id==4))||(fldResult.Name=='active_test_learning'&&(fldResult.state_id==2||fldResult.state_id==4)))
									{
										iCounter=fldPeriod.GetProperty(fldColumn.name+'_counter');
										iCounter++;

										fldPeriod.SetProperty(fldColumn.name+'_counter',iCounter)

										if (fldResult.score.HasValue)
										{
											iValue=fldPeriod.GetProperty(fldColumn.name)+fldResult.score
											fldPeriod.SetProperty(fldColumn.name,iValue)
										}
										break;
									}
								}
							}
						}
					}
				}


				for (fldPeriod in arrPeriods)
				{
					_child = dataForm.rs.AddChild();
					fldNewColumn=_child.cs.AddChild();
					fldNewColumn.name = 'id';
					fldNewColumn.t = fldPeriod.global_period_id;

					for (fldColumn in oParams.columns)
					{
						fldNewColumn=_child.cs.AddChild();
						fldNewColumn.name = fldColumn.name;
						switch( fldColumn.name )
						{
							case '0':
							{
								fldNewColumn.t = fldPeriod.GetProperty(fldColumn.name)
								break;
							}
							case 'average_score':
							{
								iValue=fldPeriod.GetProperty(fldColumn.name)
								rValue=0
								iCounter=fldPeriod.GetProperty(fldColumn.name+'_counter')
								if (iCounter!=0)
								{
									rValue=StrRealFixed(Real(iValue)/Real(iCounter),2)
								}
								fldNewColumn.t = fldNewColumn.r = rValue
								break;
							}
							case 'passed_percent':
							{
								iValue=fldPeriod.GetProperty(fldColumn.name)
								rValue=0
								iCounter=fldPeriod.GetProperty(fldColumn.name+'_counter')
								if (iCounter!=0)
								{
									rValue=StrRealFixed(Real(Real(iValue)/Real(iCounter))*100,0)
								}
								fldNewColumn.t = fldNewColumn.r = rValue
								break;
							}
							default:
							{
								fldNewColumn.t = fldNewColumn.r = fldPeriod.GetProperty(fldColumn.name)
							}
						}

					}
				}


				oParamObject = new Object();
				oParamObject.show_graph = true;
				oParamObject.graph_title=ms_tools.get_const('dinamikaobuchen')
				oParamObject.graph_type=oParams.graph_type
				oParamObject.bIncludeDataInFile=!oParams.is_web_client

				fnCreateExcelFile( oParamObject, oParams, dataForm );

				if ( bShowAlert ) alert(dataForm.Xml)

				return dataForm.GetXml( { 'tabs': false } );
			}

	"/>

	<learning_statistics_report PROPERTY="1" PARAM="_param_str" ALLOW-CALL-FROM-CLIENT="1" EXPR="

		if ( ! LdsIsServer )
			return CallServerMethod( 'tools_report', 'learning_statistics_report', [ RValue( _param_str ),  ] );

		var oParams = OpenDocFromStr( UrlDecode( _param_str ), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.learning_statistics_report;

		strCatalog = 'c';

		if ( oParams.block_name == 'test' )
		{
			strCatalog = 't';
		}

		arrCatalogs = [];

		bShowAlert = ( oParams.show_alert )

		arrCatalogs.push( ( oParams.block_name == 'test' ? 'test_' : '' ) + 'learnings' );

		if ( ArrayOptFind( oParams.columns, 'This.name == \'finished\' || This.name == \'assigned\' || This.name == \'finished_in_time\' || This.name == \'popularity\' || This.name == \'complexity\' || This.name == \'score\' || This.name == \'training_success\'' ) != undefined )
		{
			arrCatalogs.push( 'active_' + ( oParams.block_name == 'test' ? 'test_' : '' ) + 'learnings' );
		}

		// учитываем заявки на прохождение тестирования
		arrCatalogs.push('requests');

		function fnAddLearnings( arrLearningParam, fldParamFormParam, fldDataFormParam )
		{
			for ( fldLearning in arrLearningParam )
			{
				if ( fldLearning.Name == 'request' )
				{
					fldLearningObject = fldLearning.object_id.OptForeignElem;
				}
				else
				{
					fldLearningObject = ( oParams.block_name == 'test' ? fldLearning.assessment_id.OptForeignElem : fldLearning.course_id.OptForeignElem );
				}

				if ( fldLearningObject == undefined )
				{
					continue;
				}

				fldResultObject = ArrayOptFind( fldDataFormParam.rs, 'This.cs.GetChildByKey( \'id\',\'name\' ).t == \'' + fldLearningObject.id.Value + '\'' );

				if ( fldResultObject == undefined )
				{
					fldResultObject = fldDataFormParam.rs.AddChild();
					fldNewColumn = fldResultObject.cs.AddChild();
					fldNewColumn.name = 'id';
					fldNewColumn.t = fldLearningObject.id.Value;
					fldNewColumn.s = strCatalog;
				}

				if ( bShowAlert ) alert( fldLearning.id + ' ' + fldLearningObject.Name + ' ' + fldLearningObject.id + ' ' + ( fldLearningObject.ChildExists( 'title' ) ? fldLearningObject.title : fldLearningObject.name ) );

				for ( fldColunm in fldParamFormParam.columns )
				{
					fldNewColumn = fldResultObject.cs.GetOptChildByKey( fldColunm.name )

					if ( fldNewColumn == undefined )
					{
						fldNewColumn=fldResultObject.cs.AddChild();
						fldNewColumn.name = fldColunm.name;
						fldNewColumn.t = fldNewColumn.r = 0
					}

					rValue = OptReal(fldNewColumn.r.HasValue ? fldNewColumn.r : fldNewColumn.t, 0);

					switch( fldColunm.name )
					{
						case '0':
						{
								fldNewColumn.t = ( fldLearningObject.ChildExists('title')?fldLearningObject.title:fldLearningObject.name );
								fldNewColumn.r.Clear();
								break;
						}
						case 'finished':
						{
							if (fldLearning.Name!='request'&&((fldLearning.Name=='learning'||fldLearning.Name=='test_learning'||(fldLearning.Name=='active_learning'&&(fldLearning.state_id==2||fldLearning.state_id==4))||(fldLearning.Name=='active_test_learning'&&(fldLearning.state_id==2||fldLearning.state_id==4)))))
							{
								fldNewColumn.t = fldNewColumn.r = ( rValue + 1 );
							}
							break;
						}
						case 'assigned':
						{
							if (fldLearning.Name!='request')
							{
								fldNewColumn.t = fldNewColumn.r = ( rValue + 1 );
							}
							break;
						}
						case 'finished_in_time':
						{
							if ( ( fldLearning.Name == 'learning' || fldLearning.Name == 'test_learning' ) && ( fldLearning.state_id == 2 || fldLearning.state_id == 4 ) && ( ( fldLearning.max_end_date.HasValue && DateDiff( fldLearning.max_end_date, fldLearning.last_usage_date ) >= 0 ) || ! fldLearning.max_end_date.HasValue ) )
							{
								fldNewColumn.t = fldNewColumn.r = ( rValue + 1 );
							}
							break;
						}
						case 'passed':
						{
							if (fldLearning.Name!='request'&&(((fldLearning.Name=='learning'||fldLearning.Name=='test_learning')&&fldLearning.state_id==4)))
							{
								fldNewColumn.t = fldNewColumn.r = ( rValue + 1 );
							}
							break;
						}
						case 'popularity':
						{
							if (fldLearning.Name!='request'&&((fldLearning.creation_user_id.HasValue&&fldLearning.person_id.HasValue&&fldLearning.creation_user_id==fldLearning.person_id)))
							{
								fldNewColumn.t = fldNewColumn.r = ( rValue + 1 );
							}
							break;
						}
						case 'duration_days':
						{
							if (fldLearning.Name!='request'&&(((fldLearning.Name=='learning'||fldLearning.Name=='test_learning'||(fldLearning.Name=='active_learning'&&(fldLearning.state_id==2||fldLearning.state_id==4))||(fldLearning.Name=='active_test_learning'&&(fldLearning.state_id==2||fldLearning.state_id==4)))&&(fldLearning.start_usage_date.HasValue&&fldLearning.last_usage_date.HasValue))))
							{
								iDays=StrRealFixed(Real(Real(DateToRawSeconds(fldLearning.last_usage_date)-DateToRawSeconds(fldLearning.start_usage_date))/Real(86400)),2)
								fldNewColumn.t = fldNewColumn.r = ( Real( rValue ) + Real( iDays ) )
								rCounter = OptReal( fldNewColumn.s, 0 );
								fldNewColumn.s = rCounter + 1;
							}
							break;
						}
						case 'duration_hours':
						{
							if (fldLearning.Name!='request'&&(((fldLearning.Name=='learning'||fldLearning.Name=='test_learning'||(fldLearning.Name=='active_learning'&&(fldLearning.state_id==2||fldLearning.state_id==4))||(fldLearning.Name=='active_test_learning'&&(fldLearning.state_id==2||fldLearning.state_id==4)))&&(fldLearning.start_usage_date.HasValue&&fldLearning.last_usage_date.HasValue))))
							{
								if (fldLearning.time.HasValue)
								{
									rHours = StrRealFixed( Real( Real( fldLearning.time ) / Real( 1000 ) ) / Real( 3600 ), 2 );
									fldNewColumn.t = fldNewColumn.r = ( Real( rValue ) + Real( rHours ) );
									rCounter = OptReal( fldNewColumn.s, 0 );
									fldNewColumn.s = rCounter + 1;
								}
							}
							break;
						}
						case 'complexity':
						{
							if (fldLearning.Name!='request'&&(((fldLearning.Name=='learning'||fldLearning.Name=='test_learning'||(fldLearning.Name=='active_learning'&&(fldLearning.state_id==2||fldLearning.state_id==4))||(fldLearning.Name=='active_test_learning'&&(fldLearning.state_id==2||fldLearning.state_id==4)))&&fldLearning.score.HasValue)))
							{
								fMaxScore=0
								if (fldLearning.ChildExists('max_score')&&fldLearning.max_score.HasValue)
								{
									fMaxScore=fldLearning.max_score
								}
								else if (fldLearningObject.ChildExists('max_score')&&fldLearningObject.max_score.HasValue)
								{
									fMaxScore=fldLearningObject.max_score
								}
								if (fMaxScore!=0)
								{
									fldNewColumn.t = fldNewColumn.r = rValue+Real(Real(fldLearning.score)/Real(fMaxScore))
									rCounter=OptReal(fldNewColumn.s,0)
									fldNewColumn.s = rCounter + 1;
								}
							}
							break;
						}
						case 'score':
						{
							if (fldLearning.Name!='request'&&(((fldLearning.Name=='learning'||fldLearning.Name=='test_learning'||(fldLearning.Name=='active_learning'&&(fldLearning.state_id==2||fldLearning.state_id==4))||(fldLearning.Name=='active_test_learning'&&(fldLearning.state_id==2||fldLearning.state_id==4)))&&fldLearning.score.HasValue)))
							{
								fldNewColumn.t = fldNewColumn.r = rValue + Real( fldLearning.score );
								rCounter=OptReal(fldNewColumn.s,0)
								fldNewColumn.s = rCounter + 1
							}
							break;
						}
						case 'training_success':
						{
							if (fldLearning.Name!='request'&&(((fldLearning.Name=='learning'||fldLearning.Name=='test_learning')&&fldLearning.state_id==4)))
							{
								fldNewColumn.t = fldNewColumn.r = ( rValue + 1 );
							}
							rCounter=OptReal(fldNewColumn.s,0)
							fldNewColumn.s = ( rCounter + 1 )
							break;
						}
						case 'course_requests':
						{
							if (fldLearning.Name == 'request')
							{
								fldNewColumn.t = fldNewColumn.r = ( rValue + 1 );
							}
							break;
						}
						default:
						{
							fldNewColumn.t = fldNewColumn.r = Real(Random(0,20))
						}
					}
				}
			}
		}

		function get_xquery_merge_requests( _person_id, strRequestWhereParam )
		{
			if (oParams.block_name=='dist')
			{
				if (ArrayOptFirstElem(oParams.columns,'This.name==\'course_requests\'')!=undefined)
				{
					strWhereTypes=''
					strWhere= _person_id == '' ? '' : ' $elem/person_id = ' + _person_id;
					arrCourseRequestTypes=XQuery('for $elem in request_types where $elem/object_type=\'course\' return $elem')
					for (fldCourseRequestType in arrCourseRequestTypes)
					{
						strWhereTypes += ( strWhereTypes == '' ? '' : ' or ' ) + ' $elem/request_type_id = ' + fldCourseRequestType.id ;
					}

					if (strWhereTypes!='')
					{
						strWhereTypes=' ('+strWhereTypes+')'
						strRequestWhereParam=strRequestWhereParam+( strRequestWhereParam != '' ? ' and' : '' ) + strWhereTypes
					}
					strWhere += ( strRequestWhereParam != '' &amp;&amp; strWhere != '' ? ' and' : '' ) + strRequestWhereParam;
					strQuery='for $elem in requests' + ( strWhere == '' ? '' : ' where' ) + strWhere + ' return $elem'
					if ( bShowAlert ) alert('strRequestQuery='+strQuery)
					fnAddLearnings( XQuery( strQuery ) ,oParams,dataForm)
				}
			}
		}

		function get_xquery_merge( _person_id, _where_str )
		{
			_where = _person_id == '' ? '' : ' $elem/person_id = ' + _person_id;
			_where += ( _where_str != '' &amp;&amp; _where != '' ? ' and' : '' ) + _where_str;

			for ( _catalog in arrCatalogs )
			{
				if(_catalog == 'requests')
				{
					_where += ' $elem/type = \'assessment\'';
				}

				strQuery = 'for $elem in ' + _catalog + ( _where == '' ? '' : ' where' ) + _where + ' return $elem';

				if ( bShowAlert ) alert(strQuery)
				fnAddLearnings( XQuery( strQuery ) ,oParams,dataForm)
			}

		}

		dataForm = OpenNewDoc( 'x-local://wtv/wtv_form_table_data.xmd' ).TopElem;

		arrPersonsIDs = Array();

		_where_str = '';
		strRequestWhere = '';

		if ( oParams.block_name == 'test' )
		{
			_where_str = oParams.assessment_id.HasValue ? ' $elem/assessment_id = ' + oParams.assessment_id : '';
		}
		else
		{
			if ( oParams.disp_learning_prog == true )
			{
				if (oParams.education_program_id.HasValue)
				{
					_where_program_str =' where $elem/education_program_id='+oParams.education_program_id;


					arrEducationProgram=XQuery('for $elem in education_program_education_methods '+_where_program_str+' return $elem')
					for (iEducationProgramElem in arrEducationProgram)
					{
						try
						{
							if (iEducationProgramElem.type=='course'&&iEducationProgramElem.education_method_id.ForeignElem.course_id.HasValue)
							{
								_where_str += ( _where_str == '' ? '' : ' or ' ) + ' $elem/course_id = ' + iEducationProgramElem.education_method_id.ForeignElem.course_id ;
							}
						}
						catch(ex)
						{
						}
					}

					if (_where_str!='')
					{
						_where_str=' ('+_where_str+')'

						if (oParams.block_name=='dist')
						{
							if (ArrayOptFirstElem(oParams.columns,'This.name==\'course_requests\'')!=undefined)
							{
								strRequestWhere=StrReplace(_where_str,'/course_id','/object_id')
							}
						}
					}
				}
			}
			else
			{
				_where_str = oParams.course_id.HasValue ? ' $elem/course_id = ' + oParams.course_id : '';
				if ( oParams.block_name == 'dist' )
				{
					if ( ArrayOptFirstElem( oParams.columns, 'This.name == \'course_requests\'' ) != undefined )
					{
						strRequestWhere = oParams.course_id.HasValue ? ' $elem/object_id = ' + oParams.course_id : '';
					}
				}
			}
		}

		_where_str += oParams.start_date.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_usage_date &gt;= date( \'' + oParams.start_date + '\' )' : '';
		_where_str += oParams.finish_date.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_usage_date &lt;= date( \'' + oParams.finish_date + '\' )' : '';

		if (oParams.block_name=='dist')
		{
			if (ArrayOptFirstElem(oParams.columns,'This.name==\'course_requests\'')!=undefined)
			{
				strRequestWhere += oParams.start_date.HasValue ? ( strRequestWhere == '' ? ' ' : ' and ' ) + '$elem/create_date &gt;= date( \'' + oParams.start_date + '\' )' : '';
				strRequestWhere += oParams.finish_date.HasValue ? ( strRequestWhere == '' ? ' ' : ' and ' ) + '$elem/create_date &lt;= date( \'' + oParams.finish_date + '\' )' : '';
			}
		}
		if ( oParams.person_id.HasValue )
		{
			get_xquery_merge( oParams.person_id, _where_str);
			get_xquery_merge_requests( oParams.person_id, strRequestWhere )
		}
		else if ( oParams.org_id.HasValue || oParams.parent_object_id.HasValue || oParams.group_id.HasValue )
		{
			if ( oParams.org_id.HasValue || oParams.parent_object_id.HasValue )
			{
				curNodeID = oParams.parent_object_id.HasValue ? oParams.parent_object_id : oParams.org_id;

				if ( oParams.hier_sub_select )
					arrPersonsIDs = tools.get_sub_person_ids_by_subdivision_id( curNodeID );
				else
					arrPersonsIDs = ArrayExtract( XQuery( 'for $elem in subs where $elem/parent_id = ' + curNodeID + ' and $elem/type = &quot;position&quot; and $elem/basic_collaborator_id != null() return $elem' ), 'basic_collaborator_id' );
			}

			if ( oParams.group_id.HasValue )
			{
				try
				{
					groupDoc = OpenDoc( UrlFromDocID( oParams.group_id ) ).TopElem;

					groupPersonsIDArray = ArrayExtract( groupDoc.collaborators, 'collaborator_id' );
					if ( ArrayOptFirstElem( arrPersonsIDs ) != undefined )
						arrPersonsIDs = arrayCross( arrPersonsIDs, groupPersonsIDArray );
					else
						arrPersonsIDs = groupPersonsIDArray;
				}
				catch( err )
				{
				}
			}
			arrPersonsIDs = ArraySelectDistinct( arrPersonsIDs );

			for ( _person_id in arrPersonsIDs )
			{
				get_xquery_merge( _person_id, _where_str );
				get_xquery_merge_requests( _person_id, strRequestWhere )
			}
		}
		else
		{
			get_xquery_merge( '', _where_str );
			get_xquery_merge_requests( '', strRequestWhere )
		}

		arrRecountColumns=ArraySelect(oParams.columns,'This.name==\'duration_hours\'||This.name==\'duration_days\'||This.name==\'complexity\'||This.name==\'score\'||This.name==\'training_success\'')
		if (ArrayOptFirstElem(arrRecountColumns)!=undefined)
		{
			for (fldRow in dataForm.rs)
			{
				for (fldRecountColumn in arrRecountColumns)
				{
					fldNewColumn=fldRow.cs.GetOptChildByKey( fldRecountColumn.name )
					if (fldNewColumn!=undefined)
					{
						rValue=OptReal(fldNewColumn.r.HasValue?fldNewColumn.r:fldNewColumn.t,0)
						rCounterValue=OptReal(fldNewColumn.s.HasValue?fldNewColumn.s:0,0)
						if (rCounterValue!=0)
						{
							rValue=StrRealFixed(Real(rValue/rCounterValue),2)
							fldNewColumn.s=0
							fldNewColumn.t = fldNewColumn.r = rValue
						}
					}
				}
			}
		}

		fnCreateExcelFile( null, oParams, dataForm );

		if ( bShowAlert ) alert(dataForm.Xml);

		return dataForm.GetXml( { 'tabs': false } );
	"/>


	<course_integral_efficiency_report PROPERTY="1" PARAM="_param_str" ALLOW-CALL-FROM-CLIENT="1" EXPR="

			if ( ! LdsIsServer )
				return CallServerMethod( 'tools_report', 'course_integral_efficiency_report', [ RValue( _param_str ),  ] );

			var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.course_integral_efficiency_report;

			strFormula = '';

			bShowAlert=(_params.show_alert)

			function getFormulaValue( strFormulaParam )
			{
				var iLoopBorder = 100;
				var bLoopBreak  = false;

				var strFormula = StrReplace( String( strFormulaParam ), ';', '' );
				var arrStartEndSimbols = [];

				arrStartEndSimbols.push( {'sStartSimbol':'{\'','sEndSimbol':'\'}','sStartSimbolReplace':'teResponse.custom_elems.GetOptChildByKey(\'','sEndSimbolReplace':'\').value'} );

				//arrStartEndSimbols.push({'sStartSimbol':'objDoc','sEndSimbol':'value','sStartSimbolReplace':'teResponse','sEndSimbolReplace':'value'})

				var i=0;

				for ( fldSimbol in arrStartEndSimbols )
				{
					iStartSimbolLength = StrLen( fldSimbol.sStartSimbol );
					iEndSimbolLength = StrLen( fldSimbol.sEndSimbol );

					iStartindex = strFormula.indexOf( fldSimbol.sStartSimbol, 0 );

					iEndindex = 0 - 1;
					strModelFormula = '';
					i = 0;

					do
					{
						while ( iStartindex >= 0 )
						{
							iEndindex = strFormula.indexOf( fldSimbol.sEndSimbol, iStartindex );

							if ( iEndindex < 0 )
								break;

							strModelFormula = strFormula.slice(iStartindex, iEndindex+iEndSimbolLength );
							strNewFormula = StrReplace( strModelFormula, fldSimbol.sStartSimbol , fldSimbol.sStartSimbolReplace );
							strNewFormula = StrReplace( strNewFormula, fldSimbol.sEndSimbol , fldSimbol.sEndSimbolReplace );

							strNewFormula='OptReal(' + strNewFormula +',0)';
							strFormula = StrReplace( strFormula, strModelFormula , strNewFormula );

							iStartindex = strFormula.indexOf(fldSimbol.sStartSimbol,iEndindex);
							if (i>iLoopBorder)
							{
								bLoopBreak=true;
								break;
							}
							i++

						}

						if (iStartindex < 0 )
						{
							iStartindex = strFormula.indexOf(fldSimbol.sStartSimbol,0);
						}
						i++
						if (i>iLoopBorder)
						{
							bLoopBreak=true
							break;
						}
					}
					while (iStartindex >= 0)
				}
				if (bLoopBreak)
				{
					alert('course_integral_efficiency_report getFormulaValue infinite loop breaked: i='+i+'.')
					strFormula = null;
				}


				return strFormula;
			}

			function add_learnings(arrLearningParam,fldParamFormParam,fldDataFormParam)
			{
					for ( fldLearning in arrLearningParam )
					{

						fldLearningObject=fldLearning.object_id.OptForeignElem
						fldPerson=fldLearning.person_id.OptForeignElem
						if (fldLearningObject==undefined||fldPerson==undefined)
						{
							continue;
						}

						try
						{
							teResponse=OpenDoc( UrlFromDocID( fldLearning.id) ).TopElem;
						}
						catch(ex)
						{
							continue;
						}

						fldNewObject=fldDataFormParam.rs.AddChild();
						fldNewColumn=fldNewObject.cs.AddChild();
						fldNewColumn.name = 'id';
						fldNewColumn.t = fldLearning.id.Value;
						fldNewColumn.s = StrLeftRange( fldLearning.Name, 1 )
						fldNewColumn.cl=fldLearningObject.id.Value


						fldResultObject=ArrayOptFind(fldDataFormParam.rs,'This.cs.GetChildByKey( \'id\',\'name\' ).t==\''+fldLearningObject.id.Value+'\'')

						if (fldResultObject==undefined)
						{
							fldResultObject = fldDataFormParam.rs.AddChild();
							fldResultObject.ex=false;
							fldNewColumn=fldResultObject.cs.AddChild();
							fldNewColumn.name = 'id';
							fldNewColumn.t = fldLearningObject.id.Value;
							fldNewColumn.s = StrLeftRange( fldLearningObject.Name, 1 )
						}

						for (fldColunm in fldParamFormParam.columns)
						{
							fldNewColumn=fldNewObject.cs.AddChild();
							fldNewColumn.name = fldColunm.name;
							fldNewColumn.t = fldNewColumn.r = 0

							fldNewResultColumn=fldResultObject.cs.GetOptChildByKey(  fldColunm.name )
							if (fldNewResultColumn==undefined)
							{
								fldNewResultColumn = fldResultObject.cs.AddChild();
								fldNewResultColumn.name = fldColunm.name;
								fldNewResultColumn.t = fldNewResultColumn.r = 0
							}

							rValue=OptReal(fldNewResultColumn.r.HasValue?fldNewResultColumn.r:fldNewResultColumn.t,0)
							switch( fldColunm.name )
							{
								case '0':
								{
										fldNewResultColumn.t =(fldLearningObject.ChildExists('title')?fldLearningObject.title:fldLearningObject.name);
										fldNewResultColumn.r=rValue++

										fldNewColumn.t=fldPerson.fullname.Value
										fldNewColumn.r.Clear();
										break;
								}
								case 'formula_column':
								{
									rFieldValue=null
									try
									{
										rFieldValue=Real(tools.safe_execution(strFormula))
									}
									catch(ex)
									{
										//alert(ex)
									}
									fldNewColumn.t = fldNewColumn.r = rFieldValue;
									fldNewResultColumn.t = fldNewResultColumn.r= (rValue+rFieldValue)
									break;
								}
								default:
								{
									rFieldValue=null
									fldCustomField=teResponse.custom_elems.GetOptChildByKey(fldColunm.name)
									if (fldCustomField!=undefined)
									{
										try
										{

											if (StrLen(Real(fldCustomField.value))==StrLen(fldCustomField.value))
											{
												rFieldValue=Real(fldCustomField.value)
											}
										}
										catch(ex)
										{
										}
									}
									fldNewColumn.t = fldNewColumn.r = rFieldValue;
									fldNewResultColumn.t = fldNewResultColumn.r= (rValue+rFieldValue)
								}
							}
						}
					}

			}


			function get_xquery_merge( _person_id, _where_str )
			{
				_where = _person_id == '' ? '' : ' $elem/person_id = ' + _person_id;
				_where += ( _where_str != '' &amp;&amp; _where != '' ? ' and' : '' ) + _where_str;

				strQuery='for $elem in responses'  + ( _where == '' ? '' : ' where' ) + _where + ' return $elem'
				if ( bShowAlert ) alert(strQuery)
				add_learnings( XQuery( strQuery ) ,_params,dataForm)

			}


			dataForm = OpenNewDoc( 'x-local://wtv/wtv_form_table_data.xmd' ).TopElem;
			fldFormulaColumn=ArrayOptFirstElem(_params.columns,'This.name==\'formula_column\'')
			if (ArrayOptFirstElem(fldFormulaColumn)!=undefined)
			{
				strFormula=getFormulaValue(_params.formula_column_value)
				if ( bShowAlert ) alert('strFormula='+strFormula)
			}

			_person_ids_array = Array();

			_where_str ='';
			if  (_params.disp_learning_prog==true)
			{
				if (_params.education_program_id.HasValue)
				{
					_where_program_str =' where $elem/education_program_id='+_params.education_program_id;


					arrEducationProgram=XQuery('for $elem in education_program_education_methods '+_where_program_str+' return $elem')
					for (iEducationProgramElem in arrEducationProgram)
					{
						try
						{
							if (iEducationProgramElem.type=='course'&&iEducationProgramElem.education_method_id.ForeignElem.course_id.HasValue)
							{
								_where_str += ( _where_str == '' ? '' : ' or ' ) + ' $elem/object_id = ' + iEducationProgramElem.education_method_id.ForeignElem.course_id ;
							}
						}
						catch(ex)
						{
						}
					}

				}
			}
			else
			{
				for (fldCourse in _params.courses)
				{
					_where_str += ( _where_str == '' ? '' : ' or ' ) + ' $elem/object_id = ' + fldCourse.id ;
				}
			}

			if (_where_str!='')
			{
				_where_str='('+_where_str+')'
			}
			_where_str += _params.response_type_id.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/response_type_id = ' + _params.response_type_id : '';
			_where_str += _params.start_date.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/create_date &gt;= date( \'' + _params.start_date + '\' )' : '';
			_where_str += _params.finish_date.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/create_date &lt;= date( \'' + _params.finish_date + '\' )' : '';
			_where_str += ( _where_str == '' ? ' ' : ' and ' ) + '$elem/type = \'course\' ';


			if ( _params.person_id.HasValue )
			{
				get_xquery_merge( _params.person_id, _where_str);
			}
			else if ( _params.org_id.HasValue || _params.parent_object_id.HasValue || _params.group_id.HasValue )
			{
				if ( _params.org_id.HasValue || _params.parent_object_id.HasValue )
				{
					curNodeID = _params.parent_object_id.HasValue ? _params.parent_object_id : _params.org_id;

					if ( _params.hier_sub_select )
						_person_ids_array = tools.get_sub_person_ids_by_subdivision_id( curNodeID );
					else
						_person_ids_array = ArrayExtract( XQuery( 'for $elem in subs where $elem/parent_id = ' + curNodeID + ' and $elem/type = &quot;position&quot; and $elem/basic_collaborator_id != null() return $elem' ), 'basic_collaborator_id' );
				}

				if ( _params.group_id.HasValue )
				{
					try
					{
						groupDoc = OpenDoc( UrlFromDocID( _params.group_id ) ).TopElem;

						groupPersonsIDArray = ArrayExtract( groupDoc.collaborators, 'collaborator_id' );
						if ( ArrayOptFirstElem( _person_ids_array ) != undefined )
							_person_ids_array = arrayCross( _person_ids_array, groupPersonsIDArray );
						else
							_person_ids_array = groupPersonsIDArray;
					}
					catch( err )
					{
					}
				}
				_person_ids_array = ArraySelectDistinct( _person_ids_array );

				for ( _person_id in _person_ids_array )
				{
					get_xquery_merge( _person_id, _where_str );
				}
			}
			else
			{
				get_xquery_merge( '', _where_str );
			}

			arrCourseRows=ArraySelect(dataForm.rs,'This.cs.GetChildByKey( \'id\',\'name\' ).s==\'c\'')
			arrRecountColumns=ArraySelect(_params.columns,'This.name!=\'id\'&&This.name!=\'0\'')

			for (fldRow in arrCourseRows)
			{
				fldZeroColumn=fldRow.cs.GetOptChildByKey( '0' )
				if (fldZeroColumn!=undefined)
				{
					for (fldRecountColumn in arrRecountColumns)
					{
						fldNewColumn=fldRow.cs.GetOptChildByKey( fldRecountColumn.name )
						if (fldNewColumn!=undefined)
						{
							rValue=OptReal(fldNewColumn.r.HasValue?fldNewColumn.r:fldNewColumn.t,0)
							rCounterValue=OptReal(fldZeroColumn.r.HasValue?fldZeroColumn.r:0,0)
							if (rCounterValue!=0)
							{
								rValue=StrRealFixed(Real(rValue/rCounterValue),2)
								fldNewColumn.s=0
								fldNewColumn.t = fldNewColumn.r = rValue
							}
						}
					}
					fldZeroColumn.r=null
				}
			}


			oParamObject=new Object()
			oParamObject.show_graph=true
			oParamObject.graph_title=ms_tools.get_const('integralnayaeff')
			oParamObject.graph_type=_params.graph_type
			oParamObject.rows_array=arrCourseRows;

			fnCreateExcelFile( oParamObject, _params, dataForm );

			if ( bShowAlert ) alert(dataForm.Xml)
			return dataForm.GetXml( { 'tabs': false } );
	"/>

	<questions_analytics_report PROPERTY="1" PARAM="_param_str" ALLOW-CALL-FROM-CLIENT="1" EXPR="

			if ( ! LdsIsServer )
				return CallServerMethod( 'tools_report', 'questions_analytics_report', [ RValue( _param_str ),  ] );

			var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.questions_analytics_report;
			
			QuestionsForm = OpenNewDoc( 'x-local://wtv/wtv_view_questions_analytics_report.xml' ).TopElem.questions;
			
			dataForm = OpenNewDoc( 'x-local://wtv/wtv_form_table_data.xmd' ).TopElem;
			
			bShowAlert=(_params.show_alert)

			bCheckQuestionRole = ( ArrayOptFirstElem( _params.selected_items ) != undefined );

			if ( bShowAlert ) alert('bCheckQuestionRole='+bCheckQuestionRole)

			arrAllQuestions = ArraySelectAll( XQuery( 'for $elem in items return $elem/Fields( \'id\', \'question_points\' )' ) );

			function fnGetSeconds(strDurationParam)
			{
				var iDuration=0

				strDuration=String(strDurationParam)
				if (StrEnds(strDuration,'S',true))
				{
					arrDuartion=strDuration.split('M');
					try
					{
						arrHMDuration=arrDuartion[0].split('H')
						iDuration=OptInt(arrHMDuration[0],0)*3600+OptInt(arrHMDuration[1],0)*60+OptInt(StrReplace(arrDuartion[1],'S',''),0)
					}
					catch(ex)
					{
					}
				}
				return iDuration
			}

			function add_learnings( _learning_array )
			{

				for ( fldLearning in _learning_array )
				{
					fldAssessment=fldLearning.assessment_id.OptForeignElem
					if (fldAssessment==undefined)
						continue;

					try
					{
						teLearning = OpenDoc( UrlFromDocID( fldLearning.id ) ).TopElem;
					}
					catch(ex)
					{
						continue;
					}
					fldAnnals = tools.annals_decrypt( teLearning );
					if ( fldAnnals == null )
						continue;

					_cur_history = fldAnnals.au.history;

					if ( ArrayOptFirstElem( _cur_history.objects ) == undefined )
						continue;

					bPassed=(teLearning.state_id==4)


					arrSections = ArrayFirstElem( _cur_history.objects ).section;

					for ( fldSection in arrSections )
					{
						for ( fldQuestion in fldSection.question )
						{
							try
							{
								if (bCheckQuestionRole==false||(bCheckQuestionRole&&ArrayOptFind(_params.selected_items,'This.id=='+fldQuestion.PrimaryKey)!=undefined))
								{
									fldCurrentQuestion = QuestionsForm.ObtainChildByKey( fldQuestion.PrimaryKey );

									fldCurrentQuestionAssessment=ArrayOptFind( fldCurrentQuestion.as, 'This.id=='+fldAssessment.id )
									if ( fldCurrentQuestionAssessment == undefined)
									{
										fldCurrentQuestionAssessment=fldCurrentQuestion.as.ObtainChildByKey( fldAssessment.id )
										fldCurrentQuestionAssessment.title=StrReplace(StrReplace(StrReplace(fldAssessment.title,'\\','\\\\'),'\'','\\\''),'&quot;','\\&quot;');
										fldCurrentQuestion.acount++
									}

									fldCurrentQuestionSection=ArrayOptFind( fldCurrentQuestionAssessment.ss, 'This.id==\''+fldSection.PrimaryKey+'\'' )
									if ( fldCurrentQuestionSection == undefined)
									{
										fldCurrentQuestionSection=fldCurrentQuestionAssessment.ss.ObtainChildByKey( fldSection.PrimaryKey )
										fldCurrentQuestionSection.title=StrReplace(StrReplace(StrReplace(fldSection.title,'\\','\\\\'),'\'','\\\''),'&quot;','\\&quot;');
										fldCurrentQuestionAssessment.scount++

									}

									bIsWeight=(ArrayOptFind( fldQuestion.variant, 'varscore.HasValue' ) != undefined)
									fldCurrentQuestion.count ++
									fldCurrentQuestion.qtype = fldQuestion.qtype.OptForeignElem!=undefined?fldQuestion.qtype.OptForeignElem.name:fldQuestion.qtype;
									fldCurrentQuestion.state = fldQuestion.state;

									iTime=OptInt(fldQuestion.elapsed,0)

									iDuration=fnGetSeconds(fldQuestion.duration)
									fldCurrentQuestion.timer=fldCurrentQuestion.timer+iTime
									fldCurrentQuestion.duration=fldCurrentQuestion.duration.HasValue?(fldCurrentQuestion.duration>iDuration?fldCurrentQuestion.duration:iDuration):iDuration;
									fldCurrentQuestion.maxtime=fldCurrentQuestion.maxtime.HasValue?(fldCurrentQuestion.maxtime>iTime?fldCurrentQuestion.maxtime:iTime):iTime;
									fldCurrentQuestion.mintime=fldCurrentQuestion.mintime.HasValue?(fldCurrentQuestion.mintime<iTime?fldCurrentQuestion.mintime:iTime):iTime;
									if (iDuration!=0&&iTime!=0&&iTime==iDuration)
									{
										fldCurrentQuestion.elapsed_count++
									}

									fldCurrentQuestion.maxweight = ( bIsWeight ? fldQuestion.maxweight : fldQuestion.points );

									fldCurrentQuestion.maxweight = 0;

									for ( catQuestion in arrAllQuestions )
									{
										if ( System.IsWebClient )
										{
											if ( catQuestion.id == Int( ( StrCharCount( fldQuestion.ident ) == 19 ? '0x' : '0x0' ) + StrHexInt( fldQuestion.ident ) ) )
											{
												fldCurrentQuestion.maxweight = catQuestion.question_points;
												break;
											}
										}
										else
										{
											if ( catQuestion.id == Int( fldQuestion.ident ) )
											{
												fldCurrentQuestion.maxweight = catQuestion.question_points;
												break;
											}
										}
									}

									fldCurrentQuestion.max_q_attempt=fldCurrentQuestion.max_q_attempt.HasValue?(fldCurrentQuestion.max_q_attempt<fldQuestion.maxattempts?fldCurrentQuestion.max_q_attempt:fldQuestion.maxattempts):fldQuestion.maxattempts;

									iAttempts=OptInt(fldQuestion.attemptslast,0)+1
									fldCurrentQuestion.total_attempts=fldCurrentQuestion.total_attempts+iAttempts
									fldCurrentQuestion.max_attempt=fldCurrentQuestion.max_attempt.HasValue?(fldCurrentQuestion.max_attempt<iAttempts?fldCurrentQuestion.max_attempt:iAttempts):iAttempts;

									fldResult=fldCurrentQuestion.rs.AddChild()
									if (bPassed)
									{
										fldCurrentQuestion.passed_count++
										fldResult.tv=1
									}
									fldCurrentQuestion.text =HtmlToPlainText(fldQuestion.text);

									fldCurrentQuestion.num = fldCurrentQuestion.num + 1;
									if (tools_web.is_correct_question( fldQuestion ))//( fldQuestion.state == 'passed' )
									{
										fldResult.v=1
										fldCurrentQuestion.correct_num += 1;
									}
									else
										fldCurrentQuestion.incorrect_num += 1;

									if (fldQuestion.qtype=='choice')
									{
										for ( _variant in fldQuestion.variant )
										{
											fldCurVariant = fldCurrentQuestion.variants.ObtainChildByKey( _variant.PrimaryKey );

											fldCurVariant.AssignElem( _variant );
											if ( Trim( _variant ) == '1' )
											{
												fldCurVariant.num ++;
											}
										}
									}
								}
							}
							catch ( ex )
							{
								if ( bShowAlert ) alert('fldLearning.id='+fldLearning.id+' fldQuestion.id='+fldQuestion.PrimaryKey+' error: '+ex)
								//break;
							}
						}
					}
				}
			}

			_where_str=''
			for (fldAssessment in _params.assessments)
			{
				_where_str += ( _where_str == '' ? '' : ' or ' ) + ' $elem/assessment_id = ' + fldAssessment.id ;
			}

			if (_where_str!='')
			{
				_where_str='('+_where_str+')'
			}

			_where_str += ( _params.start_date == null ? '' : ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_usage_date &gt;= date( \'' + _params.start_date + '\' )' );
			_where_str += ( _params.finish_date == null ? '' : ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_usage_date &lt;= date( \'' + _params.finish_date + '\' )' );

			arrPersonID = Array();
			if ( _params.person_id.HasValue )
			{
				arrPersonID[ 0 ] = _params.person_id;
			}
			else if ( _params.org_id.HasValue || _params.parent_object_id.HasValue || _params.group_id.HasValue )
			{
				if ( _params.org_id.HasValue || _params.parent_object_id.HasValue )
				{
					curNodeID = _params.parent_object_id != null ? _params.parent_object_id : _params.org_id;
					if ( _params.hier_sub_select )
						arrPersonID = tools.get_sub_person_ids_by_subdivision_id( curNodeID );
					else
						arrPersonID = ArrayExtract( XQuery( 'for $elem in subs where $elem/parent_id = ' + curNodeID + ' and $elem/basic_collaborator_id != null() and $elem/type=&quot;position&quot; return $elem' ), 'basic_collaborator_id' );

					arrPersonID = ArraySelectDistinct( arrPersonID );
				}

				if ( _params.group_id.HasValue )
				{
					groupDoc = OpenDoc( UrlFromDocID( _params.group_id ) ).TopElem;
					groupPersonsIDArray = ArrayExtract( groupDoc.collaborators, 'collaborator_id' );
					arrPersonID = ArrayCount( arrPersonID ) &gt; 0 ? arrayCross( arrPersonID, groupPersonsIDArray ) : groupPersonsIDArray;
				}
			}
			else
			{
				arrPersonID[ 0 ] = null;
			}

			if ( bShowAlert ) alert('_where_str='+_where_str)
			if ( bShowAlert ) alert('arrPersonID='+ArrayCount(arrPersonID))
			arrTypes = String( 'test_learnings,active_test_learnings' ).split( ',' );
			for ( iPersonIDElem in arrPersonID )
			{
				sWhereStr = ( iPersonIDElem == null ? '' : '$elem/person_id = ' + iPersonIDElem ) + ( iPersonIDElem != null &amp;&amp; _where_str != '' ? ' and ' : '' ) + _where_str;
				if ( sWhereStr != '' )
					sWhereStr = ' where' + sWhereStr;

				for ( sTypeElem in arrTypes )
				{
					xarrLearning = XQuery( 'for $elem in ' + sTypeElem + sWhereStr + ' return $elem' );
					add_learnings( xarrLearning );
				}
			}

			for (fldQuestion in QuestionsForm)
			{
				try
				{
					fldQuestion.per_cent=(fldQuestion.num!=0?StrRealFixed((( fldQuestion.correct_num / fldQuestion.num ) * 100.0),2):0.0)
				}
				catch(ex)
				{
					fldQuestion.per_cent=0.0;
				}

				if (StrRealFixed(fldQuestion.per_cent,2)<=StrRealFixed(_params.percent_difficult,2))
				{
					fldQuestion.has_problems=true;
					fldQuestion.problems_text=fldQuestion.problems_text+(fldQuestion.problems_text!=''?'\r\n':'')+StrReplace( ms_tools.get_const('voprosslishkoms'), '{PARAM1}', StrRealFixed(_params.percent_difficult,2) );
					fldQuestion.problems_columns=fldQuestion.problems_columns+'6;7;'
				}
				else if (StrRealFixed(fldQuestion.per_cent,2)>=StrRealFixed(_params.percent_simple,2))
				{
					fldQuestion.has_problems=true;
					fldQuestion.problems_text=fldQuestion.problems_text+(fldQuestion.problems_text!=''?'\r\n':'')+StrReplace( ms_tools.get_const('voprosslishkomp'), '{PARAM1}',StrRealFixed(_params.percent_simple,2) )
					fldQuestion.problems_columns=fldQuestion.problems_columns+'6;7;'
				}

				try
				{
					fldQuestion.incorrect_per_cent=(fldQuestion.num!=0?StrRealFixed((( fldQuestion.incorrect_num / fldQuestion.num ) * 100.0),2):0.0)
				}
				catch(ex)
				{
					fldQuestion.incorrect_per_cent=0.0;
				}


				try
				{
					fldQuestion.avg_score=(fldQuestion.num!=0?StrRealFixed((( ( Real( fldQuestion.maxweight ) * fldQuestion.correct_num ) / fldQuestion.num )),2):0.0)
				}
				catch(ex)
				{
					fldQuestion.avg_score=0.0;
				}

				try
				{
					fldQuestion.avg_time=(fldQuestion.count!=0?StrRealFixed((( Real( fldQuestion.timer ) / fldQuestion.count )),2):0.0)
				}
				catch(ex)
				{
					fldQuestion.avg_time=0.0;
				}

				try
				{
					fldQuestion.avg_attempt=(fldQuestion.num!=0?StrRealFixed((( Real( fldQuestion.total_attempts ) / fldQuestion.num )),2):0.0)
				}
				catch(ex)
				{
					fldQuestion.avg_attempt=0.0;
				}

				try
				{
					fldQuestion.elapsed_percent=(fldQuestion.num!=0?StrRealFixed((( fldQuestion.elapsed_count / fldQuestion.num ) * 100.0),2):0.0)
				}
				catch(ex)
				{
					fldQuestion.elapsed_percent=0.0;
				}

				if (StrRealFixed(fldQuestion.elapsed_percent,2)>=StrRealFixed(_params.elapsed_percent,2))
				{
					fldQuestion.has_problems=true;
					fldQuestion.problems_text=fldQuestion.problems_text+(fldQuestion.problems_text!=''?'\r\n':'')+StrReplace(ms_tools.get_const('nehvataetvreme'), '{PARAM1}',StrRealFixed(_params.elapsed_percent,2))
					fldQuestion.problems_columns=fldQuestion.problems_columns+'12;'
				}

				if (fldQuestion.num!=0)
				{
					fAvgX=Real(fldQuestion.correct_num)/Real(fldQuestion.num)
					fAvgY=Real(fldQuestion.passed_count)/Real(fldQuestion.num)

					fNumerator=0
					fXSquareDifference=0
					fYSquareDifference=0
					i=0
					for (fldResult in fldQuestion.rs)
					{
						fNumerator=fNumerator+((Real(fldResult.v)-fAvgX)*(Real(fldResult.tv)-fAvgY))
						fXSquareDifference=fXSquareDifference+((Real(fldResult.v)-fAvgX)*(Real(fldResult.v)-fAvgX))
						fYSquareDifference=fYSquareDifference+((Real(fldResult.tv)-fAvgY)*(Real(fldResult.tv)-fAvgY))
					}
					fDenominator=Real(Math.sqrt((fXSquareDifference*fYSquareDifference)))
					if (fDenominator!=0.0)
					{
						fldQuestion.correlation_coefficient=StrRealFixed(Real(fNumerator)/Real(fDenominator),2)
					}
					else
					{
						fldQuestion.correlation_coefficient=1
					}
				}

				if (fldQuestion.correlation_coefficient.HasValue&&fldQuestion.correlation_coefficient<=_params.correlation_coefficient)
				{
					fldQuestion.has_problems=true;
					fldQuestion.problems_text=fldQuestion.problems_text+(fldQuestion.problems_text!=''?'\r\n':'')+StrReplace(ms_tools.get_const('opasnoeznacheni'), '{PARAM1}',StrRealFixed(_params.correlation_coefficient,2))
					fldQuestion.problems_columns=fldQuestion.problems_columns+'17;'
				}

				bNormal=true
				iVariantsCount=ArrayCount(fldQuestion.variants)
				iNum=0;
				strMaxText=''
				if (iVariantsCount!=0)
				{
					iNormalBorder=StrRealFixed(Real(1)/Real(iVariantsCount),2)
					sumX=0
					for (fldVariant in fldQuestion.variants)
					{
						if (fldVariant.correct!='1')
						{
							fPersent=StrRealFixed(Real(fldVariant.num)/Real(iVariantsCount),2)
							if (iNum<fldVariant.num)
							{
								iNum=fldVariant.num
								strMaxText=HtmlToPlainText(fldVariant.text)
							}
							if (fPersent>iNormalBorder)
							{
								bNormal=false
							}
						}
						sumX=sumX+(fldQuestion.num!=0?(Real(fldVariant.num)/Real(fldQuestion.num)):0)
					}
					fAvgX=Real(sumX)/Real(iVariantsCount)
					fXSquareDifference=0
					for (fldVariant in fldQuestion.variants)
					{

						rValue=(fldQuestion.num!=0?(Real(fldVariant.num)/Real(fldQuestion.num)):0)
						fXSquareDifference=fXSquareDifference+((Real(rValue)-fAvgX)*(Real(rValue)-fAvgX))
					}
					iVariantsCount=iVariantsCount-1
					if(iVariantsCount!=0)
					{
						fldQuestion.variance=StrRealFixed(Real(fXSquareDifference)/Real(iVariantsCount),2)
					}
				}

				if (fldQuestion.variance.HasValue&&fldQuestion.variance>=_params.variance)
				{
					fldQuestion.has_problems=true;
					fldQuestion.problems_text=fldQuestion.problems_text+(fldQuestion.problems_text!=''?'\r\n':'')+StrReplace(ms_tools.get_const('opasnoeznacheni_1'), '{PARAM1}',StrRealFixed(_params.variance,2))
					fldQuestion.problems_columns=fldQuestion.problems_columns+'18;'

				}

				if (bNormal==false)
				{
					fldQuestion.has_problems=true;
					fldQuestion.problems_text=fldQuestion.problems_text+(fldQuestion.problems_text!=''?'\r\n':'')+StrReplace(ms_tools.get_const('otsutstvuetnor'), '{PARAM1}',strMaxText)
				}

				_child = dataForm.rs.AddChild();

				fldNewColumn=_child.cs.AddChild();
				fldNewColumn.name = 'id';
				fldNewColumn.t = fldQuestion.ident;
				//fldNewColumn.cl =fldQuestion.has_problems?'#fad2d2':'';

				for (fldColunm in _params.columns)
				{
					fldNewColumn=_child.cs.AddChild();
					fldNewColumn.name = fldColunm.name;
					fldNewColumn.cl =fldQuestion.has_problems&&StrContains(fldQuestion.problems_columns, ';'+fldColunm.name+';', true)?'#fad2d2':'';
					switch( fldColunm.name )
					{
						case '0':
								fldNewColumn.t = fldQuestion.text;
								fldNewColumn.s = 'ObtainDocScreen( UrlFromDocID( OptInt(\''+fldQuestion.ident+'\',null) ) )';
								fldNewColumn.cl =fldQuestion.has_problems?'#fad2d2':'';
								break;
						case '1':
								fldNewColumn.t = fldNewColumn.r = fldQuestion.acount;
								fldNewColumn.s = '
												  dlgDoc = OpenDoc( \'x-local://wtv/wtv_dlg_questions_analytics_info.xml\' );
												  strAs = OpenDocFromStr( \''+fldQuestion.as.GetXml( { 'tabs': false } )+'\').TopElem
												  dlgDoc.TopElem.as.AssignElem(strAs);
												  Screen.ModalDlg( dlgDoc )';
								break;
						case '2':
								fldNewColumn.t = fldNewColumn.r = fldQuestion.count;
								break;
						case '3':
								fldNewColumn.t = fldQuestion.qtype;
								break;
						case '4':
								fldNewColumn.t = fldNewColumn.r = fldQuestion.maxweight
								break;
						case '5':
								fldNewColumn.t = fldNewColumn.r = fldQuestion.num
								break;
						case '6':
								fldNewColumn.t = fldQuestion.correct_num + ' (' + StrReal(  fldQuestion.per_cent, 2 ) + '%)'
								fldNewColumn.r = fldQuestion.correct_num
								break;
						case '7':
								fldNewColumn.t = fldQuestion.incorrect_num + ' (' + StrReal(  fldQuestion.incorrect_per_cent, 2 ) + '%)'
								fldNewColumn.r = fldQuestion.incorrect_num
								break;
						case '8':
								fldNewColumn.t = fldNewColumn.r = fldQuestion.avg_score
								break;
						case '9':
								fldNewColumn.t = fldNewColumn.r = fldQuestion.mintime
								break;
						case '10':
								fldNewColumn.t = fldNewColumn.r = fldQuestion.maxtime
								break;
						case '11':
								fldNewColumn.t = fldNewColumn.r = fldQuestion.avg_time
								break;
						case '12':
								fldNewColumn.t = fldQuestion.elapsed_count + ' (' + StrReal(  fldQuestion.elapsed_percent, 2 ) + '%)'
								fldNewColumn.r = fldQuestion.elapsed_count
								break;
						case '13':
								fldNewColumn.t = fldNewColumn.r = fldQuestion.duration;
								break;
						case '14':
								fldNewColumn.t = fldNewColumn.r = fldQuestion.max_q_attempt;
								break;
						case '15':
								fldNewColumn.t = fldNewColumn.r = fldQuestion.max_attempt;
								break;
						case '16':
								fldNewColumn.t = fldNewColumn.r = fldQuestion.avg_attempt;
								break;
						case '17':
								fldNewColumn.t = fldNewColumn.r = fldQuestion.correlation_coefficient;
								break;
						case '18':
								fldNewColumn.t = fldNewColumn.r = fldQuestion.variance;
								break;
						case '19':
								fldNewColumn.t = fldQuestion.has_problems?ms_tools.get_const('problemy'):''
								fldNewColumn.s = (fldQuestion.has_problems?'
												  dlgDoc = OpenDoc( \'x-local://wtv/wtv_dlg_questions_analytics_problems.xml\' );
												  dlgDoc.TopElem.problems_text=\''+StrReplace(StrReplace(StrReplace(fldQuestion.problems_text,'\\','\\\\'),'\'','\\\''),'&quot;','\\&quot;')+'\';
												  Screen.ModalDlg( dlgDoc )':'')
								break;
					}
				}

			}

			sortColumn = _params.columns.GetChildByKey(_params.sort_type_id );
			dataForm.rs.Sort( 'cs.GetChildByKey(\'' + sortColumn.name + '\').' + sortColumn.sort_field, '+' );

			oParamObject = new Object();
			oParamObject.use_real_value = false;

			fnCreateExcelFile( oParamObject, _params, dataForm );

			if ( bShowAlert ) alert(dataForm.Xml)
			return dataForm.GetXml( { 'tabs': false } );
	"/>



	<course_comment_report PROPERTY="1" PARAM="_param_str" ALLOW-CALL-FROM-CLIENT="1" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools_report', 'course_comment_report', [ RValue( _param_str ),  ] );

			var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.course_comment_report;

			function fnGetCourseVersionFromUrl(strUrlParam)
			{
				var sReturn=''
				try
				{
					if (Trim(strUrlParam)!='')
					{
						sReturn=1;
						arrStrings=strUrlParam.split('/');
						iLength=ArrayCount(arrStrings);
						if (iLength>1)
						{
							sReturn=arrStrings[iLength-1]
							sReturn=Trim(sReturn)!=''?sReturn:1;
						}
					}
				}
				catch(ex)
				{
				}
				return sReturn
			}

			function fnAddCourseComments(arrLearningParam,fldParamFormParam,fldDataFormParam)
			{
				for ( fldLearning in arrLearningParam )
				{
					try
					{
						teLearning = OpenDoc( UrlFromDocID( fldLearning.id ) ).TopElem;
					}
					catch(ex)
					{
						continue;
					}

					if (ArrayOptFirstElem(fldParamFormParam.versions)!=undefined)
					{
						if (ArrayOptFind(fldParamFormParam.versions,'This.PrimaryKey==\''+teLearning.base_url+'\'')==undefined)
						{
							continue;
						}
					}

					arrParts=[]
					if (ArrayOptFirstElem(fldParamFormParam.modules)!=undefined)
					{
						for (fldModule in fldParamFormParam.modules)
						{
							fldPart=ArrayOptFind(teLearning.parts,'This.code==\''+fldModule.code+'\'')
							if (fldPart!=undefined)
							{
								arrParts.push(fldPart)
							}
						}
					}
					else
					{
						arrParts=teLearning.parts;
					}

					for (fldPart in arrParts)
					{
						arrSlideComments=[];
						for (fldLog in fldPart.logs)
						{
							if (fldLog.comment.HasValue)
							{
								if (fldLog.location.HasValue)
								{
									fldLocation=ArrayOptFind(arrSlideComments,'This.code==\''+fldLog.location+'\'')
								}
								else
								{
									fldLocation=undefined
								}

								if(fldLocation==undefined)
								{
									fldLocation=new Object
									fldLocation.code=fldLog.location
									fldLocation.comment='';
									arrSlideComments.push(fldLocation)
								}
								fldLocation.comment=fldLocation.comment+' '+fldLog.comment;
							}
						}

						for (fldSlideComment in arrSlideComments)
						{
							_child = fldDataFormParam.rs.AddChild();

							fldNewColumn=_child.cs.AddChild();
							fldNewColumn.name = 'id';
							fldNewColumn.t = fldLearning.person_id;
							fldNewColumn.cl = fldLearning.id.Value;
							fldNewColumn.s = StrLeftRange( fldLearning.Name, 1 );


							for (fldColunm in fldParamFormParam.columns)
							{
								fldNewColumn=_child.cs.AddChild();
								fldNewColumn.name = fldColunm.name;

								switch( fldColunm.name )
								{
									case '0':
											fldNewColumn.t = fldLearning.person_fullname;
											break;
									case '1':
											fldNewColumn.t = fldSlideComment.code;
											break;
									case '2':
											fldNewColumn.t = fldSlideComment.comment;
											break;
									case '3':
											fldNewColumn.t = fldPart.name;
											break;
									case '4':
											fldNewColumn.t = fnGetCourseVersionFromUrl(teLearning.base_url.Value);
											break;
								}
							}
						}
					}

				}
			}
			function get_xquery_merge( _person_id, _where_str )
			{
				_where = _person_id == '' ? '' : ' $elem/person_id = ' + _person_id;
				_where += ( _where_str != '' &amp;&amp; _where != '' ? ' and' : '' ) + _where_str;

				for ( _catalog in String( _params.disp_learning_type ).split( ',' ) )
				{
					fnAddCourseComments(XQuery( 'for $elem in ' + _catalog + ( _where == '' ? '' : ' where' ) + _where + ' return $elem' ),_params,dataForm)
				}
			}


			dataForm = OpenNewDoc( 'x-local://wtv/wtv_form_table_data.xmd' ).TopElem;

			_person_ids_array = Array();

			_where_str = _params.course_id.HasValue ? ' $elem/course_id = ' + _params.course_id : '';

			_where_str += _params.start_date.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_usage_date &gt;= date( \'' + _params.start_date + '\' )' : '';
			_where_str += _params.finish_date.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_usage_date &lt;= date( \'' + _params.finish_date + '\' )' : '';

			if ( _params.person_id.HasValue )
			{
				get_xquery_merge( _params.person_id, _where_str );
			}
			else if ( _params.org_id.HasValue || _params.parent_object_id.HasValue || _params.group_id.HasValue )
			{
				if ( _params.org_id.HasValue || _params.parent_object_id.HasValue )
				{
					curNodeID = _params.parent_object_id.HasValue ? _params.parent_object_id : _params.org_id;

					if ( _params.hier_sub_select )
						_person_ids_array = tools.get_sub_person_ids_by_subdivision_id( curNodeID );
					else
						_person_ids_array = ArrayExtract( XQuery( 'for $elem in subs where $elem/parent_id = ' + curNodeID + ' and $elem/type = &quot;position&quot; and $elem/basic_collaborator_id != null() return $elem' ), 'basic_collaborator_id' );
				}

				if ( _params.group_id.HasValue )
				{
					try
					{
						groupDoc = OpenDoc( UrlFromDocID( _params.group_id ) ).TopElem;

						groupPersonsIDArray = ArrayExtract( groupDoc.collaborators, 'collaborator_id' );
						if ( ArrayOptFirstElem( _person_ids_array ) != undefined )
							_person_ids_array = arrayCross( _person_ids_array, groupPersonsIDArray );
						else
							_person_ids_array = groupPersonsIDArray;
					}
					catch( err )
					{
					}
				}
				_person_ids_array = ArraySelectDistinct( _person_ids_array );

				for ( _person_id in _person_ids_array )
					get_xquery_merge( _person_id, _where_str );
			}
			else
			{
				get_xquery_merge( '', _where_str );
			}

			//alert(dataForm.Xml)

			fnCreateExcelFile( null, _params, dataForm );

			return dataForm.GetXml( { 'tabs': false } );
	"/>

	<course_module_status_report PROPERTY="1" PARAM="_param_str" ALLOW-CALL-FROM-CLIENT="1" EXPR="

			if ( ! LdsIsServer )
				return CallServerMethod( 'tools_report', 'course_module_status_report', [ RValue( _param_str ),  ] );

			var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.course_module_status_report;

			arrProcessedStatuses=String('completion_status;success_status;total_time;score;objectives;interactions').split(';')
			arrModuleStatus=[]

			function fnAddCourseModuleStatus(arrLearningParam,fldParamFormParam)
			{
				for ( fldLearning in arrLearningParam )
				{
					try
					{
						teLearning = OpenDoc( UrlFromDocID( fldLearning.id ) ).TopElem;
					}
					catch(ex)
					{
						continue;
					}

					if (ArrayOptFirstElem(fldParamFormParam.versions)!=undefined)
					{
						if (ArrayOptFind(fldParamFormParam.versions,'This.PrimaryKey==\''+teLearning.base_url+'\'')==undefined)
						{
							continue;
						}
					}

					arrParts=[]
					if (ArrayOptFirstElem(fldParamFormParam.modules)!=undefined)
					{
						for (fldModule in fldParamFormParam.modules)
						{
							fldPart=ArrayOptFind(teLearning.parts,'This.code==\''+fldModule.code+'\'')
							if (fldPart!=undefined)
							{
								arrParts.push(fldPart)
							}
						}
					}
					else
					{
						arrParts=teLearning.parts;
					}

					for (fldPart in arrParts)
					{

						oNewModuleStatus=ArrayOptFind(arrModuleStatus,'This.id==\''+Trim(fldPart.code)+'\'')
						if (oNewModuleStatus==undefined)
						{
							oNewModuleStatus=new Object;
							oNewModuleStatus.id=fldPart.code;
							oNewModuleStatus.name=fldPart.name;
							oNewModuleStatus.total_num=0;
							arrModuleStatus.push(oNewModuleStatus)
							oNewModuleStatus=oNewModuleStatus
						}
						arrRes = [];
						for (fldLog in fldPart.logs)
						{
							if ( fldLog.type == 'log' )
							{
								arrRes.push( ParseJson( fldLog.text ) );
							}
						}

							fldLogParams=ArrayOptFirstElem( arrRes )
							if (fldLogParams!=undefined)
							{
								for (strStatusName in arrProcessedStatuses)
								{
									fldProperty=oNewModuleStatus.GetOptProperty(strStatusName,null)
									if (fldProperty==null)
									{
										fldProperty=oNewModuleStatus.SetProperty(strStatusName,0)
									}
									iStatusValue=OptInt(fldProperty,0)

									switch( strStatusName)
									{
										case 'interactions':
										case 'objectives':
												iStatus = ArrayCount( fldLogParams.GetOptProperty( strStatusName, [] ) );
												iStatusValue=iStatusValue+((ArrayOptFind( arrRes,'ArrayCount(This.GetOptProperty(\''+strStatusName+'\',[]))!=' + iStatus ) != undefined)?1:0);
												break;
										case 'score':
												sStatus = fldLogParams.GetOptProperty( strStatusName, {} ).GetOptProperty( 'raw', '' );
												iStatusValue=iStatusValue+((ArrayOptFind( arrRes, 'This.GetOptProperty(\''+strStatusName+'\',{}).GetOptProperty(\'raw\',\'\')!=' + CodeLiteral( sStatus ))  != undefined)?1:0);
												break;
										default:
												sStatus = fldLogParams.GetOptProperty( strStatusName, '' );
												iStatusValue=iStatusValue+((ArrayOptFind( arrRes, 'This.GetOptProperty(\''+strStatusName+'\',\'\')!=' + CodeLiteral( sStatus ) ) != undefined)?1:0);
												break;
									}
									oNewModuleStatus.SetProperty(strStatusName,iStatusValue)
								}
								oNewModuleStatus.total_num++
							}


					}
				}
			}
			function get_xquery_merge( _person_id, _where_str )
			{
				_where = _person_id == '' ? '' : ' $elem/person_id = ' + _person_id;
				_where += ( _where_str != '' &amp;&amp; _where != '' ? ' and' : '' ) + _where_str;

				for ( _catalog in String( _params.disp_learning_type ).split( ',' ) )
				{
					fnAddCourseModuleStatus(XQuery( 'for $elem in ' + _catalog + ( _where == '' ? '' : ' where' ) + _where + ' return $elem' ),_params,dataForm)
				}
			}


			dataForm = OpenNewDoc( 'x-local://wtv/wtv_form_table_data.xmd' ).TopElem;

			_person_ids_array = Array();

			_where_str = _params.course_id.HasValue ? ' $elem/course_id = ' + _params.course_id : '';

			_where_str += _params.start_date.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_usage_date &gt;= date( \'' + _params.start_date + '\' )' : '';
			_where_str += _params.finish_date.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_usage_date &lt;= date( \'' + _params.finish_date + '\' )' : '';

			if ( _params.person_id.HasValue )
			{
				get_xquery_merge( _params.person_id, _where_str );
			}
			else if ( _params.org_id.HasValue || _params.parent_object_id.HasValue || _params.group_id.HasValue )
			{
				if ( _params.org_id.HasValue || _params.parent_object_id.HasValue )
				{
					curNodeID = _params.parent_object_id.HasValue ? _params.parent_object_id : _params.org_id;

					if ( _params.hier_sub_select )
						_person_ids_array = tools.get_sub_person_ids_by_subdivision_id( curNodeID );
					else
						_person_ids_array = ArrayExtract( XQuery( 'for $elem in subs where $elem/parent_id = ' + curNodeID + ' and $elem/type = &quot;position&quot; and $elem/basic_collaborator_id != null() return $elem' ), 'basic_collaborator_id' );
				}

				if ( _params.group_id.HasValue )
				{
					try
					{
						groupDoc = OpenDoc( UrlFromDocID( _params.group_id ) ).TopElem;

						groupPersonsIDArray = ArrayExtract( groupDoc.collaborators, 'collaborator_id' );
						if ( ArrayOptFirstElem( _person_ids_array ) != undefined )
							_person_ids_array = arrayCross( _person_ids_array, groupPersonsIDArray );
						else
							_person_ids_array = groupPersonsIDArray;
					}
					catch( err )
					{
					}
				}
				_person_ids_array = ArraySelectDistinct( _person_ids_array );

				for ( _person_id in _person_ids_array )
					get_xquery_merge( _person_id, _where_str );
			}
			else
			{
				get_xquery_merge( '', _where_str );
			}

			for (fldModuleStatus in arrModuleStatus)
			{
				_child = dataForm.rs.AddChild();

				fldNewColumn=_child.cs.AddChild();
				fldNewColumn.name = 'id';
				fldNewColumn.cl = null;

				iTotalNum=fldModuleStatus.GetOptProperty('total_num',0);
				for (fldColunm in _params.columns)
				{
					fldNewColumn=_child.cs.AddChild();
					fldNewColumn.name = fldColunm.name;
					iValue=null
					switch( fldColunm.name )
					{
						case '0':
								fldNewColumn.t = fldModuleStatus.GetOptProperty('name',null);
								break;
						case '1':
								fldNewColumn.t = iTotalNum;
								break;
						case '2':
								iValue=fldModuleStatus.GetOptProperty('completion_status',null);
								break;
						case '3':
								iValue = fldModuleStatus.GetOptProperty('success_status',null);
								break;
						case '4':
								iValue= fldModuleStatus.GetOptProperty('total_time',null);
								break;
						case '5':
								iValue= fldModuleStatus.GetOptProperty('score',null);
								break;
						case '6':
								iValue= fldModuleStatus.GetOptProperty('objectives',null);
								break;
						case '7':
								iValue= fldModuleStatus.GetOptProperty('interactions',null);
								break;
					}

					if(iTotalNum!=0&&iValue!=null)
					{
						sValue=iValue + ' (' + StrReal(  ((Real(iValue)/Real(iTotalNum))*100), 2 ) + '%)'
						fldNewColumn.t = sValue;
					}

				}
			}

			//alert(dataForm.Xml)

			fnCreateExcelFile( null, _params, dataForm );

			return dataForm.GetXml( { 'tabs': false } );
	"/>

	<get_report_data PROPERTY="1" PARAM="sUrlParam" PARAM="bSwitchForm" PARAM="sReportName" ALLOW-CALL-FROM-CLIENT="1" EXPR="

		if ( ! LdsIsServer )
			return CallServerMethod( 'tools_report', 'get_report_data', [ RValue( sUrlParam ),  ] );

		try
		{
			bSwitchForm = tools_web.is_true( bSwitchForm )
		}
		catch( ex )
		{
			bSwitchForm = false;
		}

		try
		{
			sReportName = Trim( String( sReportName ) );
		}
		catch( ex )
		{
			sReportName = ''
		}

		sData='<data/>'
		sUrl=UrlDecode(sUrlParam)
		if (StrBegins(sUrl, 'x-local://trash/temp/general_reports/'))
		{
			if ( ! bSwitchForm )
			{
				dataForm = OpenDoc(sUrl, 'x-local://wtv/wtv_form_table_data.xmd').TopElem;
			}
			else
			{
				if ( sReportName == 'test_by_question_report' )
				{
					dataForm = OpenDoc(sUrl, 'x-local://wtv/wtv_test_question_report_table_data.xmd').TopElem;
				}
				else if ( sReportName == 'question_report' )
				{
					dataForm = OpenDoc(sUrl, 'x-local://wtv/wtv_question_report_table_data.xmd').TopElem;
				}
			}
			
			sData=dataForm.GetXml( { 'tabs': false } );

		}
		return sData
	"/>

	<career_reserve_report PROPERTY="1" PARAM="_param_str" ALLOW-CALL-FROM-CLIENT="1" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools_report', 'career_reserve_report', [ RValue( _param_str ),  ] );

			var oRes = {'iErrorCounter':0,'iCounter':0,'sErrorText':'','sDataUrl':'','bExcel':false,'oFileObject':null}

			try
			{
				var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.career_reserve_report;

				function get_xquery_merge( _person_id, _where_str )
				{
					_where = _person_id == '' ? '' : ' $elem/person_id = ' + _person_id;
					_where += ( _where_str != '' &amp;&amp; _where != '' ? ' and' : '' ) + _where_str;

					fnAddCareerReserves(XQuery( 'for $elem in career_reserves' + ( _where == '' ? '' : ' where' ) + _where + ' return $elem' ),_params,dataForm,oRes)
				}


				dataForm = OpenNewDoc( 'x-local://wtv/wtv_form_table_data.xmd' ).TopElem;

				_person_ids_array = Array();

				_where_str ='';

				if (_params.position_type!='all')
				{
					_where_str += ( _where_str == '' ? ' ' : ' and ' ) + '$elem/position_type = ' + XQueryLiteral(_params.position_type);
					switch ( _params.position_type )
					{
						case 'name':
							if (_params.target_position_name.HasValue)
								_where_str += ( _where_str == '' ? ' ' : ' and ' ) + ' contains($elem/position_name, '+XQueryLiteral(_params.target_position_name)+')';
							break;
						case 'position':
							if (_params.position_id.HasValue)
								_where_str += ( _where_str == '' ? ' ' : ' and ' ) + '$elem/position_id = ' + _params.position_id;
							break;
						case 'position_common':
							if (_params.position_common_id.HasValue)
							_where_str += ( _where_str == '' ? ' ' : ' and ' ) + '$elem/position_common_id = ' + _params.position_common_id;
							break;
					}
				}
				else if (_params.type!='adaptation')
				{
					_where_str += ( _where_str == '' ? ' ' : ' and ' ) + '$elem/position_type != ' + XQueryLiteral('adaptation');
				}


				_where_str += _params.start_date.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_date &gt;= date( \'' + _params.start_date + '\' )' : '';
				_where_str += _params.finish_date.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/start_date &lt;= date( \'' + _params.finish_date + '\' )' : '';

				_where_str += _params.readiness_date_start.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/plan_readiness_date &gt;= date( \'' + _params.readiness_date_start + '\' )' : '';
				_where_str += _params.readiness_date_finish.HasValue ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/plan_readiness_date &lt;= date( \'' + _params.readiness_date_finish + '\' )' : '';

				_where_str += _params.status.HasValue&&_params.status!='all' ? ( _where_str == '' ? ' ' : ' and ' ) + '$elem/status = '+XQueryLiteral(_params.status) : '';

				if ( _params.person_id.HasValue )
				{
					get_xquery_merge( _params.person_id, _where_str );
				}
				else if ( _params.org_id.HasValue || _params.parent_object_id.HasValue || _params.group_id.HasValue )
				{
					if ( _params.org_id.HasValue || _params.parent_object_id.HasValue )
					{
						curNodeID = _params.parent_object_id.HasValue ? _params.parent_object_id : _params.org_id;

						if ( _params.hier_sub_select )
							_person_ids_array = tools.get_sub_person_ids_by_subdivision_id( curNodeID );
						else
							_person_ids_array = ArrayExtract( XQuery( 'for $elem in subs where $elem/parent_id = ' + curNodeID + ' and $elem/type = &quot;position&quot; and $elem/basic_collaborator_id != null() return $elem' ), 'basic_collaborator_id' );
					}

					if ( _params.group_id.HasValue )
					{
						try
						{
							groupDoc = OpenDoc( UrlFromDocID( _params.group_id ) ).TopElem;

							groupPersonsIDArray = ArrayExtract( groupDoc.collaborators, 'collaborator_id' );
							if ( ArrayOptFirstElem( _person_ids_array ) != undefined )
								_person_ids_array = arrayCross( _person_ids_array, groupPersonsIDArray );
							else
								_person_ids_array = groupPersonsIDArray;
						}
						catch( err )
						{
						}
					}
					_person_ids_array = ArraySelectDistinct( _person_ids_array );

					for ( _person_id in _person_ids_array )
						get_xquery_merge( _person_id, _where_str );
				}
				else
				{
					get_xquery_merge( '', _where_str );
				}

				//alert(dataForm.Xml)
				//return dataForm.GetXml( { 'tabs': false } );
			}
			catch ( err )
			{
				oRes.iErrorCounter=1
				oRes.sErrorText=StrReplace( 'Ошибка при построении отчета: {PARAM1}', '{PARAM1}', err )
			}


			if (oRes.iErrorCounter==0)
			{
				if (oRes.oFileObject!=null)
				{
					oRes.sDataUrl=fnSaveFile(oRes.oFileObject,'Excel');
					if (_params.is_web_client)
					{
						oRes.sDataUrl=UrlFileName(FilePathToUrl(UrlToFilePath(oRes.sDataUrl)))
					}
					oRes.bExcel=true;
				}
				else
				{
					oRes.sDataUrl=fnSaveFile(dataForm.GetXml( { 'tabs': false } ),'Xml');
				}
			}

			return oRes
	"/>
	<run_db_perfomance_test PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="check_current_db" PARAM="countUsers" EXPR="

		function random_str(length)
		{
			var _i;

			var rstr = '';

			for (_i = 1; _i <= length; _i++)
			{
				rstr = rstr + String.fromCharCode(Random(30,102));
			}

			return Base64Encode(rstr);
		}

		var userDescSize = 1;

		var allStart = Date();
		var ResultLog = new Binary;
		ResultLog.AssignStr('Начало теста.' + ' ' + allStart + '\n');

		var userDesc = random_str(userDescSize);

		if(!check_current_db)
		{
			var y, i, doc, start = Date();

			for (i=0; i<countUsers; i++)
			{
				y = OpenNewDoc('x-local://wtv/wtv_banner.xmd');
				y.BindToDb();

				y.TopElem.code = 'XAUTO';
				y.TopElem.name = 'XAUTO';
				y.TopElem.zone = userDesc;

				y.Save();
			}

			try
			{
				if ( tools.sys_db_capability & tools.UNI_CAP_SYNC_CATALOG )
					tools.sync_catalog('banners');
			}
			catch(e)
			{

			}

			ResultLog.AppendStr(StrReplace(StrReplace('Создание {PARAM1} записей баннеров (секунд): {PARAM2}', '{PARAM1}', countUsers), '{PARAM2}', DateDiff(Date(),start))+'\n');

			start = Date();

			var idx = 0;

			var usersArr = ArraySelectAll(XQuery('for $i in banners where $i/code=\'XAUTO\' return $i'));

			for(i in usersArr)
			{
				DeleteDoc(UrlFromDocID(i.id),true)
				idx++;
				//if (idx>=countUsers)
				   //     break;
			}

			try
			{
				if ( tools.sys_db_capability & tools.UNI_CAP_SYNC_CATALOG )
					tools.sync_catalog('banners');
			}
			catch(e)
			{

			}

			ResultLog.AppendStr(StrReplace(StrReplace('Удаление {PARAM1} записей баннеров (секунд): {PARAM2}', '{PARAM1}', idx), '{PARAM2}', DateDiff(Date(),start))+'\n');

			start = Date();

			for (i=0; i<countUsers; i++)
			{
				y = OpenNewDoc('x-local://wtv/wtv_collaborator.xmd');

				y.BindToDb();


				y.TopElem.firstname = 'XAUTO';
				y.TopElem.lastname = 'XAUTO';
				y.TopElem.login = 'XAUTO';
				y.TopElem.desc = userDesc;


				y.Save();
			}

			try
			{
				if ( tools.sys_db_capability & tools.UNI_CAP_SYNC_CATALOG )
					tools.sync_catalog('collaborators');
			}
			catch(e)
			{

			}

			ResultLog.AppendStr(StrReplace(StrReplace('Создание {PARAM1} записей сотрудников (секунд): {PARAM2}', '{PARAM1}', countUsers), '{PARAM2}', DateDiff(Date(),start))+'\n');

			userDesc = random_str(userDescSize);

			start = Date();

			idx=0;

			usersArr = ArraySelectAll(XQuery('for $i in collaborators where $i/login=\'XAUTO\' return $i'));

			for(i in usersArr)
			{
				doc = OpenDoc(UrlFromDocID(i.id));

				doc.TopElem.desc = userDesc;
				doc.Save();
				idx++;
			}

			try
			{
				if ( tools.sys_db_capability & tools.UNI_CAP_SYNC_CATALOG )
					tools.sync_catalog('collaborators');
			}
			catch(e)
			{

			}

			ResultLog.AppendStr(StrReplace(StrReplace('Сохранение {PARAM1} записей сотрудников (секунд): {PARAM2}', '{PARAM1}', idx), '{PARAM2}', DateDiff(Date(),start))+'\n');


			y = OpenNewDoc('x-local://wtv/wtv_course.xmd');

			y.BindToDb();

			y.TopElem.code = 'XXX_WT_AUTO';
			y.TopElem.name = 'XXX_WT_AUTO';

			y.Save();

			idx=0;
			usersArr = ArraySelectAll(XQuery('for $i in collaborators where $i/login=\'XAUTO\' return $i'));

			for(i in usersArr)
			{
				tools.activate_course_to_person(i.id, y.DocID);
				idx++;
			}

			try
			{
				if ( tools.sys_db_capability & tools.UNI_CAP_SYNC_CATALOG )
					tools.sync_catalog('active_learnings');
			}
			catch(e)
			{
			}

			ResultLog.AppendStr(StrReplace(StrReplace('Назначение {PARAM1} записей сотрудников (секунд): {PARAM2}', '{PARAM1}', idx), '{PARAM2}', DateDiff(Date(),start))+'\n');

			start = Date();

			idx = 0;
			usersArr = ArraySelectAll(XQuery('for $i in active_learnings where $i/course_id='+y.DocID+' return $i'));

			for(i in usersArr)
			{
				DeleteDoc(UrlFromDocID(i.id),true);
				idx++;
			}

			try
			{
				if ( tools.sys_db_capability & tools.UNI_CAP_SYNC_CATALOG )
					tools.sync_catalog('active_learnings');
			}
			catch(e)
			{

			}

			ResultLog.AppendStr(StrReplace(StrReplace('Удаление {PARAM1} незавершенных курсов (секунд): {PARAM2}', '{PARAM1}', idx), '{PARAM2}', DateDiff(Date(),start))+'\n');

			DeleteDoc(UrlFromDocID(y.DocID),true)

			start = Date();

			idx=0;
			usersArr = ArraySelectAll(XQuery('for $i in collaborators where $i/login=\'XAUTO\' return $i'));

			for(i in usersArr)
			{
				DeleteDoc(UrlFromDocID(i.id),true);
				idx++;
			}

			try
			{
				if ( tools.sys_db_capability & tools.UNI_CAP_SYNC_CATALOG )
					tools.sync_catalog('collaborators');
			}
			catch(e)
			{

			}

			ResultLog.AppendStr(StrReplace(StrReplace('Удаление {PARAM1} записей сотрудников (секунд): {PARAM2}', '{PARAM1}', idx), '{PARAM2}', DateDiff(Date(),start))+'\n');

		}
		else
		{
			var y, i, doc, start = Date();

			for(i in collaborators)
			{
				doc = OpenDoc(UrlFromDocID(i.id)).TopElem;
			}

			ResultLog.AppendStr(StrReplace(StrReplace('Полный просмотр таблицы пользователей [{PARAM1} записей] (секунд): {PARAM2}', '{PARAM1}', ArrayCount(collaborators)), '{PARAM2}', DateDiff(Date(),start))+'\n');

			start = Date();

			for(i in collaborators)
			{
				y = i.fullname;
			}

			ResultLog.AppendStr(StrReplace(StrReplace('Полный просмотр записей пользователей [{PARAM1} записей] (секунд): {PARAM2}', '{PARAM1}', ArrayCount(collaborators)), '{PARAM2}', DateDiff(CurDate,start))+'\n');

			start = Date();

			for(i in learnings)
			{
				doc = OpenDoc(UrlFromDocID(i.id)).TopElem;
			}

			ResultLog.AppendStr(StrReplace(StrReplace('Полный просмотр записей завершенных курсов [{PARAM1} записей] (секунд): {PARAM2}', '{PARAM1}', ArrayCount(learnings)), '{PARAM2}', DateDiff(CurDate,start))+'\n');

			start = Date();

			for(i in groups)
			{
				doc = OpenDoc(UrlFromDocID(i.id)).TopElem;
			}

			ResultLog.AppendStr(StrReplace(StrReplace('Полный просмотр записей групп [{PARAM1} записей] (секунд): {PARAM2}', '{PARAM1}', ArrayCount(groups)), '{PARAM2}', DateDiff(Date(), start)) + '\n');
		}

		ResultLog.AppendStr(StrReplace('Всего на тест (секунд): {PARAM1}', '{PARAM1}', DateDiff(Date(),allStart)) + '\n');


		ResultLog.AppendStr('Конец теста.' + ' ' + Date() + '\n');



		return ResultLog.GetStr();
	"/>

	<gather_system_info PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" EXPR="
		var ResultLog = new Binary;
		ResultLog.AssignStr('');

		if ((tools.sys_db_capability &amp; tools.UNI_CAP_BASIC) != 0)
		{
			if ((tools.sys_db_capability &amp; tools.UNI_CAP_AZURE) != 0)
			{
				ResultLog.AppendStr('Database type: AZURE\n');
			}
			else if ((tools.sys_db_capability &amp; tools.UNI_CAP_MSSQL) != 0)
				ResultLog.AppendStr('Database type: MSSQL\n');
			else if ((tools.sys_db_capability &amp; tools.UNI_CAP_ORACLE) != 0)
				ResultLog.AppendStr('Database type: Oracle\n');

			ResultLog.AppendStr('DB version: ' + tools.spxml_unibridge.Object.provider.GetProviderConfigValue('DBVersion') + '\n');
			ResultLog.AppendStr('OS version: ' + tools.spxml_unibridge.Object.provider.GetProviderConfigValue('OSVersion') + '\n');

			ResultLog.AppendStr('Cluster: ' +((tools.sys_db_capability &amp; tools.UNI_CAP_CLUSTER) != 0 ? 'Yes': 'No')+ '\n');
			ResultLog.AppendStr('FT Index: ' +((tools.sys_db_capability &amp; tools.UNI_CAP_FT_INDEX) != 0 ? 'Yes': 'No')+ '\n');
			ResultLog.AppendStr('Personal Data: ' +((tools.sys_db_capability &amp; tools.UNI_CAP_PD) != 0 ? 'On': 'Off')+ '\n');

			ResultLog.AppendStr('Run mode: ' + tools.spxml_unibridge.Object.provider.GetProviderConfigValue('COMRunMode') + '\n');

			ResultLog.AppendStr('Unibridge version: ' + tools.spxml_unibridge.Object.provider.GetProviderConfigValue('Version') + '\n');
			ResultLog.AppendStr('WT version: ' + tools.spxml_unibridge.Object.provider.GetProviderConfigValue('WTVersion') + '\n');
		}
		else
		{
			ResultLog.AppendStr('Database type: XML\n');
			ResultLog.AppendStr('WT version: ' + tools.get_version('wtv') + '\n');
		}




		ResultLog.AppendStr('\n\n///////////// xHTTP.ini /////////////////\n\n');

		var sProp;
		for (sProp in AppServerConfig)
		{
			ResultLog.AppendStr(sProp + ': ' + AppServerConfig.GetOptProperty(sProp) + '\n');
		}

		ResultLog.AppendStr('\n\n///////////// spxml_unibridge_config.xml /////////////////\n\n');

		for (sProp in OpenDocFromStr(LoadFileText(AppDirectoryPath() + '\\\\spxml_unibridge_config.xml')).TopElem.appSettings)
		{
			switch (StrLowerCase(sProp.OptAttrValue('key')))
			{
				case 'username':
				case 'password':
				case 'connectionstring':
				case 'pdconnectionstring':
					sProp.SetOptAttrValue('value', '**classified**');
					break;
			}

			ResultLog.AppendStr(sProp.Xml);
		}



		ResultLog.AppendStr('\n\n///////////// Global Settings /////////////////\n\n');

		ResultLog.AppendStr(global_settings.GetXml() + '\n');

		return ResultLog.GetStr();

	"/>
	<!--
	<get_xhttp_info PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="port" PARAM="schema" EXPR="
		if (LdsIsServer)
		{
			//var port = AppConfig.GetOptProperty('PORT','');
			port = OptInt(port);
			if (port != undefined)
				port = ':' + port;

			var rnd = Random(1000000,9000000);

			tools_web.set_user_data('xhttp_info_request_' + rnd , '1', 20);
			return HttpRequest(UrlAppendPath((schema == 'https' ? 'https' : 'http') + '://127.0.0.1' + port, '/xhttp_info?r=' + rnd), 'get').Body;
		}
		else
			return 'Method must be called from server';
	"/> -->

	<get_xhttp_info PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" EXPR="
		var thi, aRes = new Array();
		var ths = GetHttpInfo();
		for(thi in ths)
		{
			aRes.push(({'AuthLogin': String(thi.AuthLogin), 'Url': String(thi.Url), 'StartTicks': String(thi.StartTicks), 'Method': String(thi.Method)}));
		}

		return EncodeJson(aRes);
	"/>

	<!------------------- CUSTOM REPORT FN START ------------------------->

	<custom_report_html_export PROPERTY="1" PARAM="iCustomReportID" PARAM="teCustomReport" PARAM="curUserID" PARAM="sOutType" EXPR="

		var vReportResult = teCustomReport.get_report_data(iCustomReportID, curUserID);
		if (vReportResult == null) throw 'null';
		var aColumnsDataSrc = ArrayExtract( ( vReportResult.h.cs.ChildNum > 0 ? vReportResult.h.cs: teCustomReport.columns ), 'tools.get_report_storage_field(This.datatype.Value)');

		var _head_column, _iColWidth, _row, _cell_color, _msoFormat, vValue, _RESULT = new Binary;
		_RESULT.AssignStr('<html');
		if (sOutType == 'xls')
			_RESULT.AppendStr(' xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; xmlns:x=&quot;urn:schemas-microsoft-com:office:excel&quot; xmlns=&quot;http://www.w3.org/TR/REC-html40&quot;')
		_RESULT.AppendStr('><head><meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/>')
		if (sOutType == &quot;xls&quot;)
			_RESULT.AppendStr('<meta name=&quot;ProgId&quot; content=&quot;Excel.Sheet&quot;/><meta name=&quot;Generator&quot; content=&quot;Microsoft Excel 11&quot;/>')
		_RESULT.AppendStr('</head><body><table border=&quot;1&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot;&gt;&lt;tr valign=&quot;top&quot;>');

		if (vReportResult.h.cs.ChildNum > 0)
		{
			if (sOutType != 'pdf')  //Aspouse delirium
				_iColWidth = Int(100.0 / vReportResult.h.cs.ChildNum) + '%';
			else
				_iColWidth = null;
		}
		else
			_iColWidth = '100%';

		for (_head_column in vReportResult.h.cs)
		{
			if (_head_column.flag_visible)
			{
				_RESULT.AppendStr('<td ');
				if (_iColWidth != null)
					_RESULT.AppendStr('width=&quot;' + _iColWidth +'&quot; ');
				_RESULT.AppendStr('bgcolor=&quot;#FFCC99&quot;>' + _head_column.title + '</td>');
			}
		}

		_RESULT.AppendStr('</tr>');

		for (_row in vReportResult.rs)
		{
			if (_row.bgcl.HasValue)
				_cell_color = _row.bgcl;
			else
				_cell_color = &quot;255,255,255&quot;;

			_RESULT.AppendStr('<tr valign=&quot;top&quot;>');

			for (_column in _row.cs)
			{
				fldPapaColumn = vReportResult.h.cs.Child(_column.ChildIndex);
				if (fldPapaColumn.flag_visible)
				{
					vValue = aColumnsDataSrc[_column.ChildIndex];

					_sourceFld = aColumnsDataSrc[_column.ChildIndex];

					if (_sourceFld != 'vn' && _column.Child('vn').HasValue)
						_sourceFld = 'vn';

					vValue = _column.Child(_sourceFld).Value;

					if (StrLen(vValue) > 32768)
						vValue = StrRangePos(vValue, 0,32767);

					if (_sourceFld == 'vb')
						vValue = (vValue ? '+' : '-');
					else if (_sourceFld == 'vs')
					{
						vValue = StrReplace(vValue, '>', '&amp;gt;');
						vValue = StrReplace(vValue, '<', '&amp;lt;');
					}

					if (sOutType == 'xls')
					{
						_msoFormat ='mso-number-format:';

						switch(_sourceFld)
						{
							case 'vn':
								_msoFormat+='Fixed;';
								break;
							case 'vi':
								_msoFormat+='0;';
								break;
							case 'vd':
								_msoFormat+='dd\\/mm\\/yy\\ h\\:mm\\;\@';
								break;
							case 'vs':
								_msoFormat+='\\@';
								break;
							default:
								_msoFormat+='General;';
						}
					}
					else
						_msoFormat = '';

					_RESULT.AppendStr('<td style=&quot;background: rgb(' + (_column.bgcl.HasValue? _column.bgcl : _cell_color) + '); color: rgb(' + (_column.cl.HasValue? _column.cl : '0,0,0') + ');' + _msoFormat + '&quot;>' + vValue + '</td>');
				}
			}
			_RESULT.AppendStr('</tr>');
		}

		if (teCustomReport.show_total.Value)
		{
			if (vReportResult.inforow.bgcl.HasValue)
				_cell_color = vReportResult.inforow.bgcl;
			else
				_cell_color = '255,255,255';
			_RESULT.AppendStr('<tr valign=&quot;top&quot;>');


			for (_column in vReportResult.inforow.cs)
			{
				if (sOutType == 'xls' && _column.value.HasValue)
				{
					if (_column.value.Value - Int(_column.value.Value) == 0.0)
						_msoFormat = 'mso-number-format: 0';
					else
						_msoFormat = 'mso-number-format: 0.#';
				}
				else
					_msoFormat = '';

				_RESULT.AppendStr('<td style=&quot;background: rgb(' + _cell_color + ');' + _msoFormat + '&quot;>' + _column.value.Value + '</td>');
			}
			_RESULT.AppendStr('</tr>');
		}

		_RESULT.AppendStr('</table></body></html>');

		return _RESULT.GetStr();

	"/>

	<custom_report_export_to_file PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="vCustomReport" PARAM="curUserID" PARAM="sOutType" PARAM="sFileUrl" EXPR="
		var teCustomReport, iCustomReportID = OptInt(vCustomReport);
		if (iCustomReportID != undefined)
			teCustomReport = OpenDoc(UrlFromDocID(iCustomReportID)).TopElem;
		else
		{
			iCustomReportID = vCustomReport.id.Value;
			teCustomReport = vCustomReport;
		}

		try
		{
			if (sFileUrl == null)
				throw 'empty';
		}
		catch(_x_)
		{
			sFileUrl = undefined;
		}


		var sResourceUrl;
		switch (sOutType)
		{
			case 'pdf':
				var sHTMLReport = tools_report.custom_report_html_export(iCustomReportID, teCustomReport, curUserID, sOutType);
				sResourceUrl = ObtainTempFile('.pdf') ;
				tools.html_to_pdf(sHTMLReport, '', UrlToFilePath(sResourceUrl));
				break;
			case 'doc':
				var sHTMLReport = tools_report.custom_report_html_export(iCustomReportID, teCustomReport, curUserID, sOutType);
				sResourceUrl = ObtainTempFile('.docx');
				//alert( 'OpenHTML custom' )
				oWordDoc = tools.get_object_assembly( 'Word' );
				oWordDoc.OpenHTML(sHTMLReport);
				oWordDoc.SaveAs(UrlToFilePath(sResourceUrl));
				break;
			case 'xls':
				var sHTMLReport = tools_report.custom_report_html_export(iCustomReportID, teCustomReport, curUserID, sOutType);
				var oXLS_X = tools.get_object_assembly('Excel');
				oXLS_X.LoadHtmlString(sHTMLReport, '');
				sResourceUrl = ObtainTempFile('.xlsx');
				try
				{
					oXLS_X.SaveAs(UrlToFilePath(sResourceUrl), true);
				}
				catch(_x_)
				{
					oXLS_X.SaveAs(UrlToFilePath(sResourceUrl));
				}
				break;
			case 'html':
				var sHTMLReport = tools_report.custom_report_html_export(iCustomReportID, teCustomReport, curUserID, sOutType);
				sResourceUrl = ObtainTempFile('.html');
				PutUrlText(sResourceUrl,sHTMLReport);
				break;
			case 'txt':

				var _str = teCustomReport.name + '\r\n';

				var _alt_str = '';
				var _vReportData = teCustomReport.get_report_data(iCustomReportID, curUserID);
				var sSrcFld, _aColumnsDataSrc = ArrayExtract( ( _vReportData.h.cs.ChildNum > 0 ? _vReportData.h.cs: teCustomReport.columns ), 'tools.get_report_storage_field(This.datatype.Value)');
				if (_vReportData != null)
				{
					for (_head_column in _vReportData.h.cs)
					if (_head_column.flag_visible)
					{
						_str = _str + _head_column.title + '\t';
						_alt_str = _alt_str + '----------\t';
					}

					_str = _str + '\r\n' + _alt_str + '\r\n';

					for ( _row in _vReportData.rs )
					{
						for ( _column in _row.cs )
						if (_vReportData.h.cs.Child(_column.ChildIndex).flag_visible)
						{
							sSrcFld = _aColumnsDataSrc[_column.ChildIndex];
							_str = _str + (sSrcFld != 'vn' && _column.Child('vn').HasValue ? _column.Child('vn').Value : _column.Child(sSrcFld).Value) + '\t';
						}
						_str = _str + '\r\n';
					}
				}

				sResourceUrl = ObtainTempFile('.txt');
				PutUrlText(sResourceUrl,_str);
				break;
			default:
				var sHTMLReport = tools_report.custom_report_html_export(iCustomReportID, teCustomReport, curUserID, sOutType);
				if (sFileUrl != undefined)
					sResourceUrl = sFileUrl;
				else
					sResourceUrl = ObtainTempFile('.xlsx');

				PutUrlData(sResourceUrl,sHTMLReport);

				break;
		}

		if (sFileUrl != undefined)
		{
			tools.copy_url( sFileUrl, sResourceUrl );
			DeleteUrl(sResourceUrl);
		}
		else
			sFileUrl = sResourceUrl;

		return sFileUrl;

	"/>

	<!------------------- CUSTOM REPORT FN END ------------------------->










	<list_html_export ALLOW-CALL-FROM-CLIENT="1" PROPERTY="1" PARAM="oList" PARAM="sOutType" EXPR="

		var _row, _msoFormat, vValue, _RESULT = new Binary;
		_RESULT.AssignStr('<html');
		if ( StrContains( sOutType, 'xls' ) )
			_RESULT.AppendStr(' xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; xmlns:x=&quot;urn:schemas-microsoft-com:office:excel&quot; xmlns=&quot;http://www.w3.org/TR/REC-html40&quot;')
		_RESULT.AppendStr('><head><meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/>')
		if ( StrContains( sOutType, 'xls' ) )
			_RESULT.AppendStr('<meta name=&quot;ProgId&quot; content=&quot;Excel.Sheet&quot;/><meta name=&quot;Generator&quot; content=&quot;Microsoft Excel 11&quot;/>')
		_RESULT.AppendStr('</head><body><table border=&quot;1&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot;&gt;&lt;tr valign=&quot;top&quot;>');

		arrColumns = oList.Columns;
		arrHeaders = ArrayOptFirstElem( oList.HeaderRows ).Entries;
		for ( i = 0; i < ArrayCount( arrHeaders ); i++ )
		{
			_RESULT.AppendStr('<td ');
			_RESULT.AppendStr('width=&quot;' + arrColumns[ i ].SizeX +'&quot; ');
			_RESULT.AppendStr('bgcolor=&quot;#FFCC99&quot;>' + XmlAttrEncode( arrHeaders[ i ].Title ) + '</td>');
		}

		_RESULT.AppendStr('</tr>');

		for (_row in oList.Rows)
		{

			_RESULT.AppendStr('<tr valign=&quot;top&quot;>');

			for (_column in _row.Entries)
			{
				vValue = _column.Title;
				if ( StrContains( sOutType, 'xls' ) )
					_msoFormat ='mso-number-format:Fixed;';
				else
					_msoFormat = '';

				_bkcolor = _column.BkColor != undefined ? (_column.BkColor ) : '255,255,255';
				try
				{
					_bkcolor = StrHexColor( _bkcolor );
				}
				catch( ex )
				{
					_bkcolor = 'FFFFFF';
				}

				try
				{
					_txcolor = _column.TextColor != undefined ? ( app_ui_local_settings.color_theme_id.HasValue ? '17,26,44' : _column.TextColor ) : '0,0,0';
					_txcolor = StrHexColor( _txcolor );
				}
				catch( ex )
				{
					_txcolor = '000000';
				}


				_RESULT.AppendStr('<td bgcolor=&quot;#' + _bkcolor + '&quot; style=&quot;' + _msoFormat + '; color: #' + _txcolor + '&quot;>' + vValue + '</td>');
			}
			_RESULT.AppendStr('</tr>');
		}


		_RESULT.AppendStr('</table></body></html>');

		return _RESULT.GetStr();

	"/>
	<load_word PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sHtml" PARAM="sFileUrl" EXPR="
		try
		{
			sFileUrl;
		}
		catch( ex ){
			sFileUrl = undefined
		}
		sResourceUrl = ObtainTempFile('.docx');
		oWordDoc = tools.get_object_assembly( 'Word' );
		oWordDoc.OpenHTML(sHtml);
		oWordDoc.SaveAs(UrlToFilePath(sResourceUrl));
		if (sFileUrl != undefined)
		{
			tools.copy_url( sFileUrl, sResourceUrl );
			DeleteUrl(sResourceUrl);
		}
		else
			sFileUrl = sResourceUrl;

		return sFileUrl;
	"/>
	<load_excel PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="sHtml" PARAM="sFileUrl" EXPR="
		try
		{
			sFileUrl;
		}
		catch( ex ){
			sFileUrl = undefined
		}

		var oXLS_X = tools.get_object_assembly('Excel');
		oXLS_X.LoadHtmlString(sHtml, '');
		sResourceUrl = ObtainTempFile('.xlsx');
		try
		{
			oXLS_X.SaveAs(UrlToFilePath(sResourceUrl), true);
		}
		catch(_x_)
		{
			//alert(_x_)
			oXLS_X.SaveAs(UrlToFilePath(sResourceUrl));
		}

		if (sFileUrl != undefined)
		{
			tools.copy_url( sFileUrl, sResourceUrl );
			DeleteUrl(sResourceUrl);
		}
		else
			sFileUrl = sResourceUrl;

		return sFileUrl;
	"/>
	<list_export_to_file PROPERTY="1" ALLOW-CALL-FROM-CLIENT="1" PARAM="oList" PARAM="sOutType" PARAM="sFileUrl" EXPR="

		try
		{
			if (sFileUrl == null)
				throw 'empty';
		}
		catch(_x_)
		{
			sFileUrl = undefined;
		}
		//alert('sOutType '+sOutType)
		var sHTMLReport = tools_report.list_html_export( oList, sOutType );
		//alert(sHTMLReport)
		var sResourceUrl;
		switch (sOutType)
		{
			case 'pdf':
			case '.pdf':
				sResourceUrl = ObtainTempFile('.pdf') ;
				tools.html_to_pdf(sHTMLReport, '', UrlToFilePath(sResourceUrl));
				break;
			case 'doc':
			case '.doc':
			case 'rtf':
			case '.rtf':
			case 'docx':
			case '.docx':
				//sResourceUrl = ObtainTempFile('.docx');
				sResourceUrl = 'x-local://wt/web/trash/' + tools.random_string( 10 ) + '.docx';
				var sResource = CallServerMethod('tools_report','load_word', ([RValue(sHTMLReport), RValue( sResourceUrl )]));
				var sHTML = LoadUrlData(sResource);
				DeleteUrl(sResource);
				sResource = ObtainTempFile('.docx');
				PutUrlData(sResource, sHTML);
				sResourceUrl = sResource;
				break;
			case 'xls':
			case 'xlsx':
			case '.xls':
			case '.xlsx':
				//sResourceUrl = ObtainTempFile('.xlsx');
				sResourceUrl = 'x-local://wt/web/trash/' + tools.random_string( 10 ) + '.xlsx';
				var sResource = CallServerMethod('tools_report','load_excel', ([RValue(sHTMLReport), RValue( sResourceUrl )]));
				var sHTML = LoadUrlData(sResource);
				DeleteUrl(sResource);
				sResource = ObtainTempFile('.xlsx');
				PutUrlData(sResource, sHTML);
				sResourceUrl = sResource;


				break;
			case '.html':
			case 'html':
				sResourceUrl = ObtainTempFile('.html');
				PutUrlData(sResourceUrl,sHTMLReport);
				break;
			default:
				if (sFileUrl != undefined)
					sResourceUrl = sFileUrl;
				else
					sResourceUrl = ObtainTempFile('.xlsx');

				PutUrlData(sFileUrl,sHTMLReport);

				break;
		}

		if (sFileUrl != undefined)
		{
			tools.copy_url( sFileUrl, sResourceUrl );
			DeleteUrl(sResourceUrl);
		}
		else
			sFileUrl = sResourceUrl;

		return sFileUrl;

	"/>

<recommender_detail_report PROPERTY="1" PARAM="Ps" ALLOW-CALL-FROM-CLIENT="1" EXPR="

		oResult = new Object();
		oResult.error = 0;
		oResult.recommender_details = [];

		sFuncParams = OpenNewDoc( 'x-local://wtv/wtv_form_func_params.xmd' ).TopElem;
		sFuncParams.recommender_detail_report.AssignElem( Ps );
		sFuncParams.recommender_detail_report.is_web_client = System.IsWebClient;

		sParams = UrlEncode( sFuncParams.Xml );

		if ( ! LdsIsServer )
			return CallServerMethod( 'tools_report', 'recommender_detail_report', [ RValue( sParams ),  ] );
		
		try
		{
			CheckCurThread();

			var progress = new TaskProgress;
			progress.TaskName = ms_tools.get_const( 'bb1jhx82gs' );

			var oParams = OpenDocFromStr( UrlDecode( sParams ), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.recommender_detail_report;

			arrWhere = new Array();

			if (oParams.start_date.HasValue)
			{
				arrWhere.push('$elem/selected_date >= date( \'' + oParams.start_date + '\' )');
			}
			if (oParams.finish_date.HasValue)
			{
				arrWhere.push('$elem/selected_date < date( \'' + DateOffset(oParams.finish_date, 60*60*24)  + '\' )');
			}

			if (ArrayOptFirstElem(oParams.recommender_algorithms) != undefined)
			{
				arrWhere.push(' MatchSome( $elem/recommender_algorithm_id, ('+ArrayMerge(oParams.recommender_algorithms, 'PrimaryKey', ',')+' ) )');
			}

			if ( oParams.person_id.HasValue )
			{
				arrWhere.push('$elem/person_id = ' + oParams.person_id)
			}
			else if ( oParams.org_id.HasValue || oParams.parent_object_id.HasValue || oParams.group_id.HasValue )
			{
				_person_ids_array=Array()
				if ( oParams.org_id.HasValue || oParams.parent_object_id.HasValue )
				{
					curNodeID = oParams.parent_object_id.HasValue ? oParams.parent_object_id : oParams.org_id;

					if ( oParams.hier_sub_select )
					{
						_person_ids_array = tools.get_sub_person_ids_by_subdivision_id( curNodeID );
					}
					else
					{
						_person_ids_array = ArrayExtract(
							XQuery( 'for $elem in subs '  +
								' where $elem/parent_id = ' + curNodeID +
								' and $elem/type = &quot;position&quot; ' +
								' and $elem/basic_collaborator_id != null() ' +
								' return $elem' ),
							'basic_collaborator_id'
						);
					}
				}

				if ( oParams.group_id.HasValue )
				{
					try
					{
						groupDoc = OpenDoc( UrlFromDocID( oParams.group_id ) ).TopElem;

						groupPersonsIDArray = ArrayExtract( groupDoc.collaborators, 'collaborator_id' );

						if ( ArrayOptFirstElem( _person_ids_array ) != undefined )
						{
							_person_ids_array = arrayCross( _person_ids_array, groupPersonsIDArray );
						}
						else
						{
							_person_ids_array = groupPersonsIDArray;
						}
					}
					catch( err )
					{
					}
				}

				_person_ids_array = ArraySelectDistinct( _person_ids_array );

				arrWhere.push(' MatchSome( $elem/person_id, (' + ArrayMerge(_person_ids_array, 'This', ',') + ' ) )')
			}

			sQuery = 'for $elem in recommender_select_collaborators where $elem/selected_object_type = \'course\' and ' + ArrayMerge(arrWhere, 'This', ' and ') + ' return $elem';

			xarrRecommender_select_collaborator = XQuery(sQuery);

			for(oRecommender_select_collaboratorElem in xarrRecommender_select_collaborator)
			{
				_child = {};


				sRecommender_algorithmName = '';
				if (oRecommender_select_collaboratorElem.recommender_algorithm_id.HasValue)
				{
					oRecommender_algorithm = ArrayOptFirstElem(XQuery('for $elem in recommender_algorithms ' +
						' where $elem/id = ' + XQueryLiteral(oRecommender_select_collaboratorElem.recommender_algorithm_id) +
						' return $elem'));
					if (oRecommender_algorithm != undefined)
					{
						sRecommender_algorithmName = oRecommender_algorithm.name;
					}
				}
				
				_child.name = sRecommender_algorithmName;

				sSelected_objectCode = '';
				sSelected_objectName = '';
				if (oRecommender_select_collaboratorElem.selected_object_type != '')
				{
					oSelected_object = ArrayOptFirstElem(XQuery('for $elem in ' + oRecommender_select_collaboratorElem.selected_object_type + 's ' +
						' where $elem/id = ' + XQueryLiteral(oRecommender_select_collaboratorElem.selected_object_id) +
						' return $elem'));
					if (oSelected_object != undefined)
					{
						sSelected_objectCode = oSelected_object.code;
						sSelected_objectName = oSelected_object.name;
					}
				}
				
				//_child.selected_object_code = sSelected_objectCode;
				_child.selected_object_name = sSelected_objectCode;
				
				/*
				dDate_end = null;
				if (oRecommender_select_collaboratorElem.selected_object_id.HasValue)
				{
					oLearning = ArrayOptFirstElem(XQuery('for $elem in learnings where $elem/active_learning_id = ' + XQueryLiteral(oRecommender_select_collaboratorElem.selected_object_id) + ' return $elem'));
					if (oLearning != undefined)
					{
						dDate_end = DateNewTime(oLearning.last_usage_date);
					}
				}
				*/
				
				dSelectedDate = null;
				if (oRecommender_select_collaboratorElem.selected_date.HasValue)
				{
					dSelectedDate =  StrDate(oRecommender_select_collaboratorElem.selected_date, false, false);
				}
				_child.selected_date = dSelectedDate;
				
				dDate_implemented = null;
				if (oRecommender_select_collaboratorElem.implemented_date.HasValue)
				{
					dDate_implemented =  StrDate(oRecommender_select_collaboratorElem.implemented_date, false, false);
				}
				_child.date_implemented = dDate_implemented;
				
				iPersonID = null;
				if (oRecommender_select_collaboratorElem.person_fullname.HasValue)
				{
					iPersonID = OptInt(oRecommender_select_collaboratorElem.person_id);
				}
				_child.person_id = iPersonID;
				
				sPersonFullname = '';
				if (oRecommender_select_collaboratorElem.person_fullname.HasValue)
				{
					sPersonFullname =  oRecommender_select_collaboratorElem.person_fullname;
				}
				_child.person_fullname = sPersonFullname;
				
				sPersonCode = null;
				if (oRecommender_select_collaboratorElem.person_code.HasValue)
				{
					sPersonCode =  OptInt(oRecommender_select_collaboratorElem.person_code);
				}
				_child.person_code = sPersonCode;
				
				sPersonPositionName = '';
				if (oRecommender_select_collaboratorElem.person_position_name.HasValue)
				{
					sPersonPositionName =  oRecommender_select_collaboratorElem.person_position_name;
				}
				_child.person_position_name = sPersonPositionName;
				
				sPersonPositionOrg = '';
				if (oRecommender_select_collaboratorElem.person_org_name.HasValue)
				{
					sPersonPositionOrg =  oRecommender_select_collaboratorElem.person_org_name;
				}
				_child.person_org_name = sPersonPositionOrg;
				
				sPersonSubdivisionName = '';
				if (oRecommender_select_collaboratorElem.person_subdivision_name.HasValue)
				{
					sPersonSubdivisionName =  oRecommender_select_collaboratorElem.person_subdivision_name;
				}
				_child.person_subdivision_name = sPersonSubdivisionName;

				base_object_type = '';
				if (oRecommender_select_collaboratorElem.base_object_type.HasValue)
				{
					base_object_type = common.exchange_object_types.GetChildByKey( oRecommender_select_collaboratorElem.base_object_type ).title.Value;
				}
				_child.base_object_type = base_object_type;
				
				base_object_name = '';
				if (oRecommender_select_collaboratorElem.base_object_name.HasValue)
				{
					base_object_name =  oRecommender_select_collaboratorElem.base_object_name;
				}
				_child.base_object_name = base_object_name;
				
				selected_object_type = '';
				if (oRecommender_select_collaboratorElem.selected_object_type.HasValue)
				{
					selected_object_type = common.exchange_object_types.GetChildByKey( oRecommender_select_collaboratorElem.selected_object_type ).title.Value;
				}
				_child.selected_object_type = selected_object_type;
				
				selected_object_name = '';
				if (oRecommender_select_collaboratorElem.selected_object_name.HasValue)
				{
					selected_object_name =  oRecommender_select_collaboratorElem.selected_object_name;
				}
				_child.selected_object_name = selected_object_name;
				
				implemented = false;
				if (oRecommender_select_collaboratorElem.implemented.HasValue)
				{
					implemented = (oRecommender_select_collaboratorElem.implemented == true ? '+' : '-');
				}
				_child.implemented = implemented;

				oResult.recommender_details.push(_child);
			}
		}
		catch ( err )
		{
			oResult.error = 1;
		}

		return oResult;
	"/>

	<recommender_use_report PROPERTY="1" PARAM="_param_str" ALLOW-CALL-FROM-CLIENT="1" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools_report', 'recommender_use_report', [ RValue( _param_str ),  ] );

			var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.recommender_use_report;
			bShowAlert=(_params.show_alert)

			dataForm = OpenNewDoc( 'x-local://wtv/wtv_form_table_data.xmd' ).TopElem;

			arrWhere = new Array();

			// Надо, что-бы, период между 'creation_date' и 'applying_date'
			// попадал (можно частично) в период между 'start_date' и 'finish_date'
			arrWhere.push(
				' ( ' +
				' 	( ' +
				' 		$elem/creation_date >= date( \'' + _params.start_date + '\' ) ' +
				' 		and $elem/creation_date < date( \'' + DateOffset(_params.finish_date, 60*60*24) + '\' ) ' +
				' 	) ' +
				' 	or ' +
				' 	( ' +
				' 		$elem/applying_date >= date( \'' + _params.start_date + '\' ) ' +
				' 		and $elem/applying_date < date( \'' + DateOffset(_params.finish_date, 60*60*24) + '\' ) ' +
				' 	) ' +
				' 	or ' +
				' 	( ' +
				' 		$elem/creation_date < date( \'' + _params.start_date + '\' ) ' +
				' 		and $elem/applying_date >= date( \'' + DateOffset(_params.finish_date, 60*60*24) + '\' ) ' +
				' 	) ' +
				' ) '
			);

			if (ArrayOptFirstElem(_params.recommender_algorithms) != undefined)
			{
				arrWhere.push(' MatchSome( $elem/recommender_algorithm_id, ('+ArrayMerge(_params.recommender_algorithms, 'PrimaryKey', ',')+' ) )');
			}

			arrPersonId = Array();
			if ( _params.person_id.HasValue )
			{
				arrPersonId.push(_params.person_id);
			}
			else if ( _params.org_id.HasValue || _params.parent_object_id.HasValue || _params.group_id.HasValue )
			{

				if ( _params.org_id.HasValue || _params.parent_object_id.HasValue )
				{
					curNodeID = _params.parent_object_id.HasValue ? _params.parent_object_id : _params.org_id;

					if ( _params.hier_sub_select )
					{
						arrPersonId = tools.get_sub_person_ids_by_subdivision_id( curNodeID );
					}
					else
					{
						arrPersonId = ArrayExtract(
							XQuery( 'for $elem in subs '  +
								' where $elem/parent_id = ' + curNodeID +
								' and $elem/type = &quot;position&quot; ' +
								' and $elem/basic_collaborator_id != null() ' +
								' return $elem' ),
							'basic_collaborator_id'
						);
					}
				}

				if ( _params.group_id.HasValue )
				{
					try
					{
						groupDoc = OpenDoc( UrlFromDocID( _params.group_id ) ).TopElem;

						groupPersonsIDArray = ArrayExtract( groupDoc.collaborators, 'collaborator_id' );

						if ( ArrayOptFirstElem( arrPersonId ) != undefined )
						{
							arrPersonId = arrayCross( arrPersonId, groupPersonsIDArray );
						}
						else
						{
							arrPersonId = groupPersonsIDArray;
						}
					}
					catch( err )
					{
					}
				}

				arrPersonId = ArraySelectDistinct( arrPersonId );
			}

			sWhere = '';
			if (ArrayOptFirstElem(arrWhere) != undefined)
			{
				sWhere = ' and ' + ArrayMerge(arrWhere, 'This', ' and ');
			}

			if (ArrayOptFirstElem(arrPersonId) == undefined)
			{
				sQuery = 'for $elem in recommender_algorithm_applyings ' +
					' where $elem/object_type = \'course\' ' +
					sWhere +
					' return $elem'
				xarrRecommender_algorithm_applying = XQuery(sQuery);
			}
			else
			{
				xarrRecommender_algorithm_applying = new Array();
				for (iPersonIdElem in arrPersonId)
				{
					sQuery = 'for $elem in recommender_algorithm_applyings ' +
						' where $elem/object_type = \'course\' ' +
						sWhere +
						' and $elem/person_id = ' + OptInt(iPersonIdElem, 0) +
						' return $elem'
					xarrRecommender_algorithm_applying = ArrayUnion(xarrRecommender_algorithm_applying, XQuery(sQuery));
				}
			}

			xarrRecommender_select_collaborator = new Array();
			for (oRecommender_algorithm_applyingElem in xarrRecommender_algorithm_applying)
			{
				xarrRecommender_select_collaborator = ArrayUnion(
					xarrRecommender_select_collaborator,
					XQuery('for $elem in recommender_select_collaborators ' +
						' where $elem/selected_object_type = \'course\' ' +
						' and $elem/recommender_algorithm_id = ' + OptInt(oRecommender_algorithm_applyingElem.recommender_algorithm_id, 0) +
						' and $elem/person_id = ' + OptInt(oRecommender_algorithm_applyingElem.person_id, 0) +
						' and $elem/selected_object_id = ' + OptInt(oRecommender_algorithm_applyingElem.object_id, 0) +
						' return $elem')
				);
			}


			arrRecommender_algorithmId = ArraySelectDistinct(ArrayExtractKeys(xarrRecommender_algorithm_applying, 'recommender_algorithm_id'));
			for (iRecommender_algorithmIdElem in arrRecommender_algorithmId)
			{
				sRecommender_algorithmName = '';
				oRecommender_algorithm = ArrayOptFirstElem(XQuery('for $elem in recommender_algorithms ' +
					' where $elem/id = ' + XQueryLiteral(iRecommender_algorithmIdElem) +
					' return $elem'));
				if (oRecommender_algorithm != undefined)
				{
					sRecommender_algorithmName = oRecommender_algorithm.name;
				}

				arrRecommender_algorithm_applyingFind = ArraySelect(
					xarrRecommender_algorithm_applying,
					' This.recommender_algorithm_id == ' + CodeLiteral(iRecommender_algorithmIdElem)
				)

				arrRecommender_algorithm_applyingInPeriod = new Array();

				xarrRecommender_select_collaboratorFind = ArraySelect(
					xarrRecommender_select_collaborator,
					' This.recommender_algorithm_id == ' + CodeLiteral(iRecommender_algorithmIdElem)
				);

				iCountFinishCourse = 0;
				for (oRecommender_select_collaboratorElem in xarrRecommender_select_collaboratorFind)
				{
					if (oRecommender_select_collaboratorElem.created_object_id.HasValue == false)
					{
						continue;
					}
					oLearning = ArrayOptFirstElem(XQuery('for $elem in learnings ' +
						' where $elem/course_id = ' + OptInt(oRecommender_select_collaboratorElem.selected_object_id, 0) +
						' and $elem/active_learning_id = ' + OptInt(oRecommender_select_collaboratorElem.created_object_id, 0) +
						' return $elem'));
					if (oLearning != undefined)
					{
						iCountFinishCourse++;
					}
				}

				iIssued_count = 0;
				for (oRecommender_algorithm_applyingFindElem in arrRecommender_algorithm_applyingFind)
				{
					if (oRecommender_algorithm_applyingFindElem.creation_date >= _params.start_date
						&& oRecommender_algorithm_applyingFindElem.applying_date < DateOffset(_params.finish_date, 60*60*24))
					{
						iIssued_count++;
					}
					else
					{
						docRecommender_algorithm_applying = tools.open_doc(oRecommender_algorithm_applyingFindElem.id);
						if (docRecommender_algorithm_applying == undefined)
						{
							continue;
						}
						teRecommender_algorithm_applying = docRecommender_algorithm_applying.TopElem;
						for (oApply_dateElem in teRecommender_algorithm_applying.apply_dates)
						{
							if (oApply_dateElem.date >= _params.start_date && oApply_dateElem.date < DateOffset(_params.finish_date, 60*60*24))
							{
								iIssued_count++;
							}
						}
					}
				}

				iClick_count = ArrayCount(
					ArraySelect(
						xarrRecommender_select_collaboratorFind,
						' This.selected_date >= ' + CodeLiteral(_params.start_date) +
						' && This.selected_date < ' + CodeLiteral(DateOffset(_params.finish_date, 60*60*24))
					)
				);
				iAssign_count = ArrayCount(
					ArraySelect(
						xarrRecommender_select_collaboratorFind,
						' This.implemented_date >= ' + CodeLiteral(_params.start_date) +
						' && This.implemented_date < ' + CodeLiteral(DateOffset(_params.finish_date, 60*60*24))
					)
				);

				iClick_percent = 0;
				iAssign_percent = 0;
				iLearning_percent = 0;
				if (iIssued_count > 0)
				{
					iClick_percent = OptReal(iClick_count, 0) / Real(iIssued_count);
					iClick_percent = OptInt(StrInt(iClick_percent * 100), 0);

					iAssign_percent = OptReal(iAssign_count, 0) / Real(iIssued_count);
					iAssign_percent = OptInt(StrInt(iAssign_percent * 100), 0);

					iLearning_percent = OptReal(iCountFinishCourse, 0) / Real(iIssued_count);
					iLearning_percent = OptInt(StrInt(iLearning_percent * 100), 0);
				}

				_child = dataForm.rs.AddChild();
				fldNewColumn = _child.cs.AddChild();
				fldNewColumn.name = 'recommender_algorithm_name';
				fldNewColumn.t = sRecommender_algorithmName;

				for (fldColumn in _params.columns)
				{
					fldNewColumn = _child.cs.AddChild();
					fldNewColumn.name = fldColumn.name;

					switch (fldColumn.name)
					{
						case 'issued_count':
						{
							fldNewColumn.r = iIssued_count;
							fldNewColumn.t = fldNewColumn.r;
							break;
						}
						case 'click_count':
						{
							fldNewColumn.r = iClick_count;
							fldNewColumn.t = fldNewColumn.r;
							break;
						}
						case 'assign_count':
						{
							fldNewColumn.r = iAssign_count;
							fldNewColumn.t = fldNewColumn.r;
							break;
						}
						case 'finish_count':
						{
							fldNewColumn.r = iCountFinishCourse;
							fldNewColumn.t = fldNewColumn.r;
							break;
						}
						case 'click_percent':
						{
							fldNewColumn.r = iClick_percent;
							fldNewColumn.t = fldNewColumn.r;
							break;
						}
						case 'assign_percent':
						{
							fldNewColumn.r = iAssign_percent;
							fldNewColumn.t = fldNewColumn.r;
							break;
						}
						case 'learning_percent':
						{
							fldNewColumn.r = iLearning_percent;
							fldNewColumn.t = fldNewColumn.r;
							break;
						}
					}
				}
			}


			oParamObject = new Object()
			oParamObject.show_graph = true
			oParamObject.graph_title = 'Общий отчет по статистике применения алгоритма';
			oParamObject.graph_type = _params.graph_type
			oParamObject.bIncludeDataInFile = !_params.is_web_client

			oParamObject.arrGraph = new Array();

			oGraph = new Object();
			oGraph.chartType = 'Bar';
			oGraph.TitleTab = 'График';

			oGraph.TitleText = 'Процентное соотношение назначений, переходов и завершений' +
				' к общему количеству выданных рекомендаций за период'+
				' с ' + StrDate(_params.start_date, false, false) +' по ' + StrDate(_params.finish_date, false, false);

			oGraph.ShowLegend = true;
			oGraph.ValueAxisTitleText = 'Проценты, %';
			oGraph.ValueAxisMaxValue = 100;
			oGraph.CategoryData = 'F1:H1';

			oGraph.arrSeries = new Array();

			iCount = 1;
			for (oRsElem in dataForm.rs)
			{
				iCount++;

				oSeries = new Object();
				oSeries.name = ArrayOptFirstElem(oRsElem.cs).t;
				oSeries.data = 'F' + iCount + ':H' + iCount;
				oSeries.isVertical = false;
				oGraph.arrSeries.push(oSeries);
			}

			oParamObject.arrGraph.push( oGraph );

			fnCreateExcelFile( oParamObject, _params, dataForm );

			if (bShowAlert) alert(dataForm.Xml)

			return dataForm.GetXml({'tabs': false});

	"/>

	<recommender_compare_report PROPERTY="1" PARAM="_param_str" ALLOW-CALL-FROM-CLIENT="1" EXPR="
			if ( ! LdsIsServer )
				return CallServerMethod( 'tools_report', 'recommender_compare_report', [ RValue( _param_str ),  ] );

			var _params = OpenDocFromStr( UrlDecode(_param_str), 'form=x-local://wtv/wtv_form_func_params.xmd' ).TopElem.recommender_compare_report;
			bShowAlert=(_params.show_alert)

			dataForm = OpenNewDoc( 'x-local://wtv/wtv_form_table_data.xmd' ).TopElem;

			arrWhere = new Array();
			arrWhereLearning  = new Array();

			arrWhere.push(
				' ( ' +
				' 	( ' +
				' 		$elem/creation_date >= date( \'' + _params.start_date + '\' ) ' +
				' 		and $elem/creation_date < date( \'' + DateOffset(_params.finish_date, 60*60*24) + '\' ) ' +
				' 	) ' +
				' 	or ' +
				' 	( ' +
				' 		$elem/applying_date >= date( \'' + _params.start_date + '\' ) ' +
				' 		and $elem/applying_date < date( \'' + DateOffset(_params.finish_date, 60*60*24) + '\' ) ' +
				' 	) ' +
				' 	or ' +
				' 	( ' +
				' 		$elem/creation_date < date( \'' + _params.start_date + '\' ) ' +
				' 		and $elem/applying_date >= date( \'' + DateOffset(_params.finish_date, 60*60*24) + '\' ) ' +
				' 	) ' +
				' ) '
			);

			arrWhereLearning.push('$elem/start_usage_date >= date( \'' + _params.start_date + '\' )');
			arrWhereLearning.push('$elem/start_usage_date < date( \'' + DateOffset(_params.finish_date, 60*60*24)  + '\' )');

			if (ArrayOptFirstElem(_params.recommender_algorithms) != undefined)
			{
				arrWhere.push(' MatchSome( $elem/recommender_algorithm_id, ('+ArrayMerge(_params.recommender_algorithms, 'PrimaryKey', ',')+' ) )');
			}

			arrPersonId = Array();
			if ( _params.person_id.HasValue )
			{
				arrPersonId.push(_params.person_id);
			}
			else if ( _params.org_id.HasValue || _params.parent_object_id.HasValue || _params.group_id.HasValue )
			{

				if ( _params.org_id.HasValue || _params.parent_object_id.HasValue )
				{
					curNodeID = _params.parent_object_id.HasValue ? _params.parent_object_id : _params.org_id;

					if ( _params.hier_sub_select )
					{
						arrPersonId = tools.get_sub_person_ids_by_subdivision_id( curNodeID );
					}
					else
					{
						arrPersonId = ArrayExtract(
							XQuery( 'for $elem in subs '  +
								' where $elem/parent_id = ' + curNodeID +
								' and $elem/type = &quot;position&quot; ' +
								' and $elem/basic_collaborator_id != null() ' +
								' return $elem' ),
							'basic_collaborator_id'
						);
					}
				}

				if ( _params.group_id.HasValue )
				{
					try
					{
						groupDoc = OpenDoc( UrlFromDocID( _params.group_id ) ).TopElem;

						groupPersonsIDArray = ArrayExtract( groupDoc.collaborators, 'collaborator_id' );

						if ( ArrayOptFirstElem( arrPersonId ) != undefined )
						{
							arrPersonId = arrayCross( arrPersonId, groupPersonsIDArray );
						}
						else
						{
							arrPersonId = groupPersonsIDArray;
						}
					}
					catch( err )
					{
					}
				}

				arrPersonId = ArraySelectDistinct( arrPersonId );
			}

			sWhere = '';
			if (ArrayOptFirstElem(arrWhere) != undefined)
			{
				sWhere = ' and ' + ArrayMerge(arrWhere, 'This', ' and ');
			}
			sWhereLearning = '';
			if (ArrayOptFirstElem(arrWhereLearning) != undefined)
			{
				sWhereLearning = ' and ' + ArrayMerge(arrWhereLearning, 'This', ' and ');
			}

			if (ArrayOptFirstElem(arrPersonId) == undefined)
			{
				sQuery = 'for $elem in recommender_algorithm_applyings ' +
					' where $elem/object_type = \'course\' ' +
					sWhere +
					' return $elem'
				xarrRecommender_algorithm_applying = XQuery(sQuery);

				xarrActive_learning = XQuery('for $elem in active_learnings ' +
					' where $elem/person_id = $elem/creation_user_id ' +
					sWhereLearning +
					' return $elem');
				xarrLearning = XQuery('for $elem in learnings ' +
					' where $elem/person_id = $elem/creation_user_id ' +
					sWhereLearning +
					' return $elem');
			}
			else
			{
				xarrRecommender_algorithm_applying = new Array();
				xarrActive_learning = new Array();
				xarrLearning = new Array();
				for (iPersonIdElem in arrPersonId)
				{
					sQuery = 'for $elem in recommender_algorithm_applyings ' +
						' where $elem/object_type = \'course\' ' +
						sWhere +
						' and $elem/person_id = ' + OptInt(iPersonIdElem, 0) +
						' return $elem'
					xarrRecommender_algorithm_applying = ArrayUnion(xarrRecommender_algorithm_applying, XQuery(sQuery));

					xarrActive_learning = ArrayUnion(xarrActive_learning, XQuery('for $elem in active_learnings ' +
						' where $elem/person_id = $elem/creation_user_id ' +
						sWhereLearning +
						' and $elem/person_id = ' + OptInt(iPersonIdElem, 0) +
						' return $elem'));
					xarrLearning = ArrayUnion(xarrActive_learning, XQuery('for $elem in learnings ' +
						' where $elem/person_id = $elem/creation_user_id ' +
						sWhereLearning +
						' and $elem/person_id = ' + OptInt(iPersonIdElem, 0) +
						' return $elem'));
				}
			}

			xarrRecommender_select_collaborator = new Array();
			for (oRecommender_algorithm_applyingElem in xarrRecommender_algorithm_applying)
			{
				xarrRecommender_select_collaborator = ArrayUnion(
					xarrRecommender_select_collaborator,
					XQuery('for $elem in recommender_select_collaborators ' +
						' where $elem/selected_object_type = \'course\' ' +
						' and $elem/recommender_algorithm_id = ' + OptInt(oRecommender_algorithm_applyingElem.recommender_algorithm_id, 0) +
						' and $elem/person_id = ' + OptInt(oRecommender_algorithm_applyingElem.person_id, 0) +
						' and $elem/selected_object_id = ' + OptInt(oRecommender_algorithm_applyingElem.object_id, 0) +
						' return $elem')
				);
			}


			arrRecommender_algorithmId = ArraySelectDistinct(ArrayExtractKeys(xarrRecommender_algorithm_applying, 'recommender_algorithm_id'));
			for (iRecommender_algorithmIdElem in arrRecommender_algorithmId)
			{
				sRecommender_algorithmName = '';
				oRecommender_algorithm = ArrayOptFirstElem(XQuery('for $elem in recommender_algorithms ' +
					' where $elem/id = ' + XQueryLiteral(iRecommender_algorithmIdElem) +
					' return $elem'));
				if (oRecommender_algorithm != undefined)
				{
					sRecommender_algorithmName = oRecommender_algorithm.name;
				}

				arrRecommender_algorithm_applyingFind = ArraySelect(
					xarrRecommender_algorithm_applying,
					' This.recommender_algorithm_id == ' + CodeLiteral(iRecommender_algorithmIdElem)
				)

				xarrRecommender_select_collaboratorFind = ArraySelect(
					xarrRecommender_select_collaborator,
					' This.recommender_algorithm_id == ' + CodeLiteral(iRecommender_algorithmIdElem)
				);

				iCountFinishCourse = 0;
				for (oRecommender_select_collaboratorElem in xarrRecommender_select_collaboratorFind)
				{
					if (oRecommender_select_collaboratorElem.created_object_id.HasValue == false)
					{
						continue;
					}
					oLearning = ArrayOptFirstElem(XQuery('for $elem in learnings ' +
						' where $elem/course_id = ' + OptInt(oRecommender_select_collaboratorElem.selected_object_id, 0) +
						' and $elem/active_learning_id = ' + OptInt(oRecommender_select_collaboratorElem.created_object_id, 0) +
						' return $elem'));
					if (oLearning != undefined)
					{
						iCountFinishCourse++;
					}
				}

				iIssued_count = 0;
				for (oRecommender_algorithm_applyingFindElem in arrRecommender_algorithm_applyingFind)
				{
					if (oRecommender_algorithm_applyingFindElem.creation_date >= _params.start_date
						&& oRecommender_algorithm_applyingFindElem.applying_date < DateOffset(_params.finish_date, 60*60*24))
					{
						iIssued_count++;
					}
					else
					{
						docRecommender_algorithm_applying = tools.open_doc(oRecommender_algorithm_applyingFindElem.id);
						if (docRecommender_algorithm_applying == undefined)
						{
							continue;
						}
						teRecommender_algorithm_applying = docRecommender_algorithm_applying.TopElem;
						for (oApply_dateElem in teRecommender_algorithm_applying.apply_dates)
						{
							if (oApply_dateElem.date >= _params.start_date && oApply_dateElem.date < DateOffset(_params.finish_date, 60*60*24))
							{
								iIssued_count++;
							}
						}
					}
				}

				iAssign_count = ArrayCount(
					ArraySelect(
						xarrRecommender_select_collaboratorFind,
						' This.implemented_date >= ' + CodeLiteral(_params.start_date) +
						' && This.implemented_date < ' + CodeLiteral(DateOffset(_params.finish_date, 60*60*24))
					)
				);

				iActive_learning_count = ArrayCount(xarrActive_learning) + ArrayCount(xarrLearning);
				iLearning_count = ArrayCount(xarrLearning);

				_child = dataForm.rs.AddChild();
				fldNewColumn = _child.cs.AddChild();
				fldNewColumn.name = 'recommender_algorithm_name';
				fldNewColumn.t = sRecommender_algorithmName;

				iCourse_on_algorithm_percent = 0;
				iCourse_without_algorithm_percent = 0;
				if (iActive_learning_count > 0)
				{
					iCourse_on_algorithm_percent = OptReal(iAssign_count, 0) / Real(iActive_learning_count);
					iCourse_on_algorithm_percent = OptInt(StrInt(iCourse_on_algorithm_percent * 100), 0);

					iCourse_without_algorithm_percent  = 100 - iCourse_on_algorithm_percent;
				}

				iCourse_on_recommender_percent = 0;
				iCourse_without_recommender_percent = 0;
				if (iLearning_count > 0)
				{
					iCourse_on_recommender_percent = OptReal(iCountFinishCourse, 0) / Real(iLearning_count);
					iCourse_on_recommender_percent = OptInt(StrInt(iCourse_on_recommender_percent * 100), 0);

					iCourse_without_recommender_percent  = 100 - iCourse_on_recommender_percent;
				}

				for (fldColumn in _params.columns)
				{
					fldNewColumn = _child.cs.AddChild();
					fldNewColumn.name = fldColumn.name;

					switch (fldColumn.name)
					{
						case 'issued_count':
						{
							fldNewColumn.r = iIssued_count;
							fldNewColumn.t = fldNewColumn.r;
							break;
						}
						case 'assign_count':
						{
							fldNewColumn.r = iAssign_count;
							fldNewColumn.t = fldNewColumn.r;
							break;
						}
						case 'finish_count':
						{
							fldNewColumn.r = iCountFinishCourse;
							fldNewColumn.t = fldNewColumn.r;
							break;
						}
						case 'active_learning_count':
						{
							fldNewColumn.r = iActive_learning_count;
							fldNewColumn.t = fldNewColumn.r;
							break;
						}
						case 'learning_count':
						{
							fldNewColumn.r = iLearning_count;
							fldNewColumn.t = fldNewColumn.r;
							break;
						}
						case 'course_on_algorithm_percent':
						{
							fldNewColumn.r = Real(iCourse_on_algorithm_percent) / Real(100);
							fldNewColumn.t = fldNewColumn.r;
							break;
						}
						case 'course_without_algorithm_percent':
						{
							fldNewColumn.r = Real(iCourse_without_algorithm_percent) / Real(100);
							fldNewColumn.t = fldNewColumn.r;
							break;
						}
						case 'course_on_recommender_percent':
						{
							fldNewColumn.r = Real(iCourse_on_recommender_percent) / Real(100);
							fldNewColumn.t = fldNewColumn.r;
							break;
						}
						case 'course_without_recommender_percent':
						{
							fldNewColumn.r = Real(iCourse_without_recommender_percent) / Real(100);
							fldNewColumn.t = fldNewColumn.r;
							break;
						}
					}
				}
			}

			oParamObject = new Object()
			oParamObject.show_graph = true
			oParamObject.graph_title = 'Общий отчет по статистике применения алгоритма';
			oParamObject.graph_type = _params.graph_type
			oParamObject.bIncludeDataInFile = !_params.is_web_client

			oParamObject.arrGraph = new Array();

			oGraph = new Object();
			oGraph.chartType = 'Bar';
			oGraph.width = 8;
			oGraph.height = 30;
			oGraph.TitleTab = 'Сравнение';
			oGraph.TitleText = 'Сравнение  количественных характеристик алгоритмов ' +
				'за период с ' + StrDate(_params.start_date, false, false) +' по ' + StrDate(_params.finish_date, false, false);
			oGraph.ShowLegend = true;
			oGraph.CategoryData = 'B1:F1';

			oGraph.arrSeries = new Array();

			iCount = 1;
			for (oRsElem in dataForm.rs)
			{
				iCount++;
				oSeries = new Object();
				oSeries.isVertical = false;
				oSeries.name = ArrayOptFirstElem(oRsElem.cs).t;
				oSeries.data = 'B' + iCount + ':F' + iCount;
				oSeries.DataLabelsShowValue = true;

				oGraph.arrSeries.push(oSeries);
			}

			oParamObject.arrGraph.push(oGraph);

			iCount = 1;
			for (oRsElem in dataForm.rs)
			{
				iCount++;
				oGraph = new Object();
				oGraph.chartType = 'Pie';
				oGraph.width = 5;
				oGraph.height = 25;
				oGraph.TitleTab = 'По алгоритму: ' + ArrayOptFirstElem(oRsElem.cs).t;
				oGraph.TitleText = 'Соотношение долей самоназначенных курсов по ' + ArrayOptFirstElem(oRsElem.cs).t;
				oGraph.ShowLegend = true;
				oGraph.LegendPosition = 'Right';
				oGraph.CategoryData = 'G1:H1';

				oGraph.arrSeries = new Array();
				oSeries = new Object();
				oSeries.isVertical = false;
				oSeries.name = '';
				oSeries.data = 'G' + iCount + ':H' + iCount;
				oSeries.DataLabelsShowValue = true;
				oSeries.DataLabelsNumberFormat = '0 %';
				oGraph.arrSeries.push(oSeries);

				oParamObject.arrGraph.push(oGraph);

				oGraph = new Object();
				oGraph.chartType = 'Pie';
				oGraph.width = 5;
				oGraph.height = 25;
				oGraph.TitleTab = 'По рекомендациям: ' + ArrayOptFirstElem(oRsElem.cs).t;
				oGraph.TitleText = 'Соотношение долей самоназначенных завершенных курсов по ' + ArrayOptFirstElem(oRsElem.cs).t;
				oGraph.ShowLegend = true;
				oGraph.LegendPosition = 'Right';
				oGraph.CategoryData = 'I1:J1';

				oGraph.arrSeries = new Array();
				oSeries = new Object();
				oSeries.isVertical = false;
				oSeries.name = '';
				oSeries.data = 'I' + iCount + ':J' + iCount;
				oSeries.DataLabelsShowValue = true;
				oSeries.DataLabelsNumberFormat = '0 %';
				oGraph.arrSeries.push(oSeries);

				oParamObject.arrGraph.push(oGraph);
			}

			fnCreateExcelFile(oParamObject, _params, dataForm)

			if (bShowAlert) alert(dataForm.Xml)

			return dataForm.GetXml({'tabs': false});

	"/>
	
	

</tools_report>

</SPXML-INLINE-FORM>